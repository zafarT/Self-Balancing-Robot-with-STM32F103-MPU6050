
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b688  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba8  0800b798  0800b798  0000c798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c340  0800c340  0000e24c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c340  0800c340  0000d340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c348  0800c348  0000e24c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c348  0800c348  0000d348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c34c  0800c34c  0000d34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  0800c350  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b4c  20000250  0800c59c  0000e250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  0800c59c  0000ed9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e24c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa31  00000000  00000000  0000e275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0d  00000000  00000000  0001dca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00020bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5b  00000000  00000000  00021d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a8b  00000000  00000000  00022a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148bc  00000000  00000000  0003c4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e295  00000000  00000000  00050da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  000df07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e4b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000250 	.word	0x20000250
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b780 	.word	0x0800b780

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000254 	.word	0x20000254
 800014c:	0800b780 	.word	0x0800b780

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <PID_Step>:

PID pid = {20, 0.1, 5, 0.1, 1, 0.001, 100, 1, 50, 0, 0, 0, 0, 0};


float PID_Step(float measurement)
{
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

    float err;
    float command;
    float command_sat;
    float deriv_filt;
    if(measurement < 0)
 8001118:	f04f 0100 	mov.w	r1, #0
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ffaf 	bl	8001080 <__aeabi_fcmplt>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00e      	beq.n	8001146 <PID_Step+0x36>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2102      	movs	r1, #2
 800112c:	488c      	ldr	r0, [pc, #560]	@ (8001360 <PID_Step+0x250>)
 800112e:	f002 fc95 	bl	8003a5c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2104      	movs	r1, #4
 8001136:	488a      	ldr	r0, [pc, #552]	@ (8001360 <PID_Step+0x250>)
 8001138:	f002 fc90 	bl	8003a5c <HAL_GPIO_WritePin>
    	/* Error calculation */
    	err = -measurement;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e013      	b.n	800116e <PID_Step+0x5e>
    }
    else if (measurement > 0)
 8001146:	f04f 0100 	mov.w	r1, #0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffb6 	bl	80010bc <__aeabi_fcmpgt>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <PID_Step+0x5e>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2102      	movs	r1, #2
 800115a:	4881      	ldr	r0, [pc, #516]	@ (8001360 <PID_Step+0x250>)
 800115c:	f002 fc7e 	bl	8003a5c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2104      	movs	r1, #4
 8001164:	487e      	ldr	r0, [pc, #504]	@ (8001360 <PID_Step+0x250>)
 8001166:	f002 fc79 	bl	8003a5c <HAL_GPIO_WritePin>
    	/* Error calculation */
    	err = measurement;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	617b      	str	r3, [r7, #20]
    }


    /* Integral term calculation - including anti-windup */
    pid.integral += pid.Ki*err*pid.T + pid.Kaw*(pid.command_sat_prev - pid.command_prev)*pid.T;
 800116e:	4b7d      	ldr	r3, [pc, #500]	@ (8001364 <PID_Step+0x254>)
 8001170:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001172:	4b7c      	ldr	r3, [pc, #496]	@ (8001364 <PID_Step+0x254>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	6979      	ldr	r1, [r7, #20]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fde3 	bl	8000d44 <__aeabi_fmul>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b78      	ldr	r3, [pc, #480]	@ (8001364 <PID_Step+0x254>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f7ff fddb 	bl	8000d44 <__aeabi_fmul>
 800118e:	4603      	mov	r3, r0
 8001190:	461e      	mov	r6, r3
 8001192:	4b74      	ldr	r3, [pc, #464]	@ (8001364 <PID_Step+0x254>)
 8001194:	68dd      	ldr	r5, [r3, #12]
 8001196:	4b73      	ldr	r3, [pc, #460]	@ (8001364 <PID_Step+0x254>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a72      	ldr	r2, [pc, #456]	@ (8001364 <PID_Step+0x254>)
 800119c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fcc5 	bl	8000b30 <__aeabi_fsub>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4619      	mov	r1, r3
 80011aa:	4628      	mov	r0, r5
 80011ac:	f7ff fdca 	bl	8000d44 <__aeabi_fmul>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001364 <PID_Step+0x254>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4610      	mov	r0, r2
 80011bc:	f7ff fdc2 	bl	8000d44 <__aeabi_fmul>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4630      	mov	r0, r6
 80011c6:	f7ff fcb5 	bl	8000b34 <__addsf3>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4619      	mov	r1, r3
 80011ce:	4620      	mov	r0, r4
 80011d0:	f7ff fcb0 	bl	8000b34 <__addsf3>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b62      	ldr	r3, [pc, #392]	@ (8001364 <PID_Step+0x254>)
 80011da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Derivative term calculation using filtered derivative method */
    deriv_filt = (err - pid.err_prev + pid.T_C*pid.deriv_prev)/(pid.T + pid.T_C);
 80011dc:	4b61      	ldr	r3, [pc, #388]	@ (8001364 <PID_Step+0x254>)
 80011de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e0:	4619      	mov	r1, r3
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff fca4 	bl	8000b30 <__aeabi_fsub>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461c      	mov	r4, r3
 80011ec:	4b5d      	ldr	r3, [pc, #372]	@ (8001364 <PID_Step+0x254>)
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4a5c      	ldr	r2, [pc, #368]	@ (8001364 <PID_Step+0x254>)
 80011f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fda4 	bl	8000d44 <__aeabi_fmul>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4619      	mov	r1, r3
 8001200:	4620      	mov	r0, r4
 8001202:	f7ff fc97 	bl	8000b34 <__addsf3>
 8001206:	4603      	mov	r3, r0
 8001208:	461c      	mov	r4, r3
 800120a:	4b56      	ldr	r3, [pc, #344]	@ (8001364 <PID_Step+0x254>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a55      	ldr	r2, [pc, #340]	@ (8001364 <PID_Step+0x254>)
 8001210:	6912      	ldr	r2, [r2, #16]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fc8d 	bl	8000b34 <__addsf3>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff fe44 	bl	8000eac <__aeabi_fdiv>
 8001224:	4603      	mov	r3, r0
 8001226:	60fb      	str	r3, [r7, #12]
    pid.err_prev = err;
 8001228:	4a4e      	ldr	r2, [pc, #312]	@ (8001364 <PID_Step+0x254>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	6293      	str	r3, [r2, #40]	@ 0x28
    pid.deriv_prev = deriv_filt;
 800122e:	4a4d      	ldr	r2, [pc, #308]	@ (8001364 <PID_Step+0x254>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Summing the 3 terms */
    command = pid.Kp*err + pid.integral + pid.Kd*deriv_filt;
 8001234:	4b4b      	ldr	r3, [pc, #300]	@ (8001364 <PID_Step+0x254>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6979      	ldr	r1, [r7, #20]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fd82 	bl	8000d44 <__aeabi_fmul>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b47      	ldr	r3, [pc, #284]	@ (8001364 <PID_Step+0x254>)
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	4610      	mov	r0, r2
 800124c:	f7ff fc72 	bl	8000b34 <__addsf3>
 8001250:	4603      	mov	r3, r0
 8001252:	461c      	mov	r4, r3
 8001254:	4b43      	ldr	r3, [pc, #268]	@ (8001364 <PID_Step+0x254>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fd72 	bl	8000d44 <__aeabi_fmul>
 8001260:	4603      	mov	r3, r0
 8001262:	4619      	mov	r1, r3
 8001264:	4620      	mov	r0, r4
 8001266:	f7ff fc65 	bl	8000b34 <__addsf3>
 800126a:	4603      	mov	r3, r0
 800126c:	60bb      	str	r3, [r7, #8]

    /* Remember command at previous step */
    pid.command_prev = command;
 800126e:	4a3d      	ldr	r2, [pc, #244]	@ (8001364 <PID_Step+0x254>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Saturate command */
    if (command > pid.max)
 8001274:	4b3b      	ldr	r3, [pc, #236]	@ (8001364 <PID_Step+0x254>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4619      	mov	r1, r3
 800127a:	68b8      	ldr	r0, [r7, #8]
 800127c:	f7ff ff1e 	bl	80010bc <__aeabi_fcmpgt>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <PID_Step+0x17e>
    {
        command_sat = pid.max;
 8001286:	4b37      	ldr	r3, [pc, #220]	@ (8001364 <PID_Step+0x254>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	e00e      	b.n	80012ac <PID_Step+0x19c>
    }
    else if (command < pid.min)
 800128e:	4b35      	ldr	r3, [pc, #212]	@ (8001364 <PID_Step+0x254>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4619      	mov	r1, r3
 8001294:	68b8      	ldr	r0, [r7, #8]
 8001296:	f7ff fef3 	bl	8001080 <__aeabi_fcmplt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <PID_Step+0x198>
    {
        command_sat = pid.min;
 80012a0:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <PID_Step+0x254>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	e001      	b.n	80012ac <PID_Step+0x19c>
    }
    else
    {
        command_sat = command;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	613b      	str	r3, [r7, #16]
    }

    /* Apply rate limiter */
    if (command_sat > pid.command_sat_prev + pid.max_rate*pid.T)
 80012ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001364 <PID_Step+0x254>)
 80012ae:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80012b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <PID_Step+0x254>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001364 <PID_Step+0x254>)
 80012b6:	6952      	ldr	r2, [r2, #20]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fd42 	bl	8000d44 <__aeabi_fmul>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff fc35 	bl	8000b34 <__addsf3>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4619      	mov	r1, r3
 80012ce:	6938      	ldr	r0, [r7, #16]
 80012d0:	f7ff fef4 	bl	80010bc <__aeabi_fcmpgt>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d011      	beq.n	80012fe <PID_Step+0x1ee>
    {
        command_sat = pid.command_sat_prev + pid.max_rate*pid.T;
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <PID_Step+0x254>)
 80012dc:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80012de:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <PID_Step+0x254>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4a20      	ldr	r2, [pc, #128]	@ (8001364 <PID_Step+0x254>)
 80012e4:	6952      	ldr	r2, [r2, #20]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fd2b 	bl	8000d44 <__aeabi_fmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff fc1e 	bl	8000b34 <__addsf3>
 80012f8:	4603      	mov	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	e027      	b.n	800134e <PID_Step+0x23e>
    }
    else if (command_sat < pid.command_sat_prev - pid.max_rate*pid.T)
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <PID_Step+0x254>)
 8001300:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <PID_Step+0x254>)
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4a17      	ldr	r2, [pc, #92]	@ (8001364 <PID_Step+0x254>)
 8001308:	6952      	ldr	r2, [r2, #20]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fd19 	bl	8000d44 <__aeabi_fmul>
 8001312:	4603      	mov	r3, r0
 8001314:	4619      	mov	r1, r3
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff fc0a 	bl	8000b30 <__aeabi_fsub>
 800131c:	4603      	mov	r3, r0
 800131e:	4619      	mov	r1, r3
 8001320:	6938      	ldr	r0, [r7, #16]
 8001322:	f7ff fead 	bl	8001080 <__aeabi_fcmplt>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d010      	beq.n	800134e <PID_Step+0x23e>
    {
        command_sat = pid.command_sat_prev - pid.max_rate*pid.T;
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <PID_Step+0x254>)
 800132e:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <PID_Step+0x254>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <PID_Step+0x254>)
 8001336:	6952      	ldr	r2, [r2, #20]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fd02 	bl	8000d44 <__aeabi_fmul>
 8001340:	4603      	mov	r3, r0
 8001342:	4619      	mov	r1, r3
 8001344:	4620      	mov	r0, r4
 8001346:	f7ff fbf3 	bl	8000b30 <__aeabi_fsub>
 800134a:	4603      	mov	r3, r0
 800134c:	613b      	str	r3, [r7, #16]
    {
        /* No action */
    }

    /* Remember saturated command at previous step */
    pid.command_sat_prev = command_sat;
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <PID_Step+0x254>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6313      	str	r3, [r2, #48]	@ 0x30

    return command_sat;
 8001354:	693b      	ldr	r3, [r7, #16]
}
 8001356:	4618      	mov	r0, r3
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135e:	bf00      	nop
 8001360:	40010800 	.word	0x40010800
 8001364:	20000000 	.word	0x20000000

08001368 <Kalman_Init>:

#include "kalman_filter.h"
#include "math.h"


void Kalman_Init(KalmanFilter *kf) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    kf->angle = 0.0f;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
    kf->bias = 0.0f;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
    kf->P[0][0] = 0.0f;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
    kf->P[0][1] = 0.0f;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
    kf->P[1][0] = 0.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
    kf->P[1][1] = 0.0f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
    kf->Q_angle = 0.001f;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a06      	ldr	r2, [pc, #24]	@ (80013bc <Kalman_Init+0x54>)
 80013a4:	61da      	str	r2, [r3, #28]
    kf->Q_bias = 0.003f;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <Kalman_Init+0x58>)
 80013aa:	621a      	str	r2, [r3, #32]
    kf->R_measure = 0.03f;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <Kalman_Init+0x5c>)
 80013b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	3a83126f 	.word	0x3a83126f
 80013c0:	3b449ba6 	.word	0x3b449ba6
 80013c4:	3cf5c28f 	.word	0x3cf5c28f

080013c8 <Kalman_Update>:





float Kalman_Update(KalmanFilter *kf, float newAngle, float newRate, float dt) {
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b08b      	sub	sp, #44	@ 0x2c
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
    // Predict
    kf->rate = newRate - kf->bias;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fba7 	bl	8000b30 <__aeabi_fsub>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	609a      	str	r2, [r3, #8]
    kf->angle += dt * kf->rate;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681c      	ldr	r4, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fca5 	bl	8000d44 <__aeabi_fmul>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff fb98 	bl	8000b34 <__addsf3>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	601a      	str	r2, [r3, #0]

    // Update error covariance matrix
    kf->P[0][0] += dt * (dt*kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + kf->Q_angle);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	68dc      	ldr	r4, [r3, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc94 	bl	8000d44 <__aeabi_fmul>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f7ff fb82 	bl	8000b30 <__aeabi_fsub>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f7ff fb7a 	bl	8000b30 <__aeabi_fsub>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f7ff fb74 	bl	8000b34 <__addsf3>
 800144c:	4603      	mov	r3, r0
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fc77 	bl	8000d44 <__aeabi_fmul>
 8001456:	4603      	mov	r3, r0
 8001458:	4619      	mov	r1, r3
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff fb6a 	bl	8000b34 <__addsf3>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1];
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	691c      	ldr	r4, [r3, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	6839      	ldr	r1, [r7, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc66 	bl	8000d44 <__aeabi_fmul>
 8001478:	4603      	mov	r3, r0
 800147a:	4619      	mov	r1, r3
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff fb57 	bl	8000b30 <__aeabi_fsub>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	611a      	str	r2, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1];
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	695c      	ldr	r4, [r3, #20]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc55 	bl	8000d44 <__aeabi_fmul>
 800149a:	4603      	mov	r3, r0
 800149c:	4619      	mov	r1, r3
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff fb46 	bl	8000b30 <__aeabi_fsub>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	615a      	str	r2, [r3, #20]
    kf->P[1][1] += kf->Q_bias * dt;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	699c      	ldr	r4, [r3, #24]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	6839      	ldr	r1, [r7, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fc44 	bl	8000d44 <__aeabi_fmul>
 80014bc:	4603      	mov	r3, r0
 80014be:	4619      	mov	r1, r3
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff fb37 	bl	8000b34 <__addsf3>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	619a      	str	r2, [r3, #24]

    // Measurement update
    float S = kf->P[0][0] + kf->R_measure;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	4610      	mov	r0, r2
 80014da:	f7ff fb2b 	bl	8000b34 <__addsf3>
 80014de:	4603      	mov	r3, r0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
    float K[2];
    K[0] = kf->P[0][0] / S;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fcdf 	bl	8000eac <__aeabi_fdiv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	613b      	str	r3, [r7, #16]
    K[1] = kf->P[1][0] / S;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fcd7 	bl	8000eac <__aeabi_fdiv>
 80014fe:	4603      	mov	r3, r0
 8001500:	617b      	str	r3, [r7, #20]

    float y = newAngle - kf->angle;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4619      	mov	r1, r3
 8001508:	68b8      	ldr	r0, [r7, #8]
 800150a:	f7ff fb11 	bl	8000b30 <__aeabi_fsub>
 800150e:	4603      	mov	r3, r0
 8001510:	623b      	str	r3, [r7, #32]
    kf->angle += K[0] * y;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681c      	ldr	r4, [r3, #0]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	6a39      	ldr	r1, [r7, #32]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fc12 	bl	8000d44 <__aeabi_fmul>
 8001520:	4603      	mov	r3, r0
 8001522:	4619      	mov	r1, r3
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff fb05 	bl	8000b34 <__addsf3>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	601a      	str	r2, [r3, #0]
    kf->bias += K[1] * y;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	685c      	ldr	r4, [r3, #4]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	6a39      	ldr	r1, [r7, #32]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fc02 	bl	8000d44 <__aeabi_fmul>
 8001540:	4603      	mov	r3, r0
 8001542:	4619      	mov	r1, r3
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff faf5 	bl	8000b34 <__addsf3>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	605a      	str	r2, [r3, #4]

    // Update covariance matrix
    float P00_temp = kf->P[0][0];
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	61fb      	str	r3, [r7, #28]
    float P01_temp = kf->P[0][1];
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	61bb      	str	r3, [r7, #24]

    kf->P[0][0] -= K[0] * P00_temp;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	68dc      	ldr	r4, [r3, #12]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	69f9      	ldr	r1, [r7, #28]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fbec 	bl	8000d44 <__aeabi_fmul>
 800156c:	4603      	mov	r3, r0
 800156e:	4619      	mov	r1, r3
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff fadd 	bl	8000b30 <__aeabi_fsub>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= K[0] * P01_temp;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	691c      	ldr	r4, [r3, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	69b9      	ldr	r1, [r7, #24]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fbdc 	bl	8000d44 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	4619      	mov	r1, r3
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff facd 	bl	8000b30 <__aeabi_fsub>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	611a      	str	r2, [r3, #16]
    kf->P[1][0] -= K[1] * P00_temp;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	695c      	ldr	r4, [r3, #20]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	69f9      	ldr	r1, [r7, #28]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fbcc 	bl	8000d44 <__aeabi_fmul>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4619      	mov	r1, r3
 80015b0:	4620      	mov	r0, r4
 80015b2:	f7ff fabd 	bl	8000b30 <__aeabi_fsub>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	615a      	str	r2, [r3, #20]
    kf->P[1][1] -= K[1] * P01_temp;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	699c      	ldr	r4, [r3, #24]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fbbc 	bl	8000d44 <__aeabi_fmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff faad 	bl	8000b30 <__aeabi_fsub>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	619a      	str	r2, [r3, #24]

    return kf->angle;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	372c      	adds	r7, #44	@ 0x2c
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	0000      	movs	r0, r0
 80015ec:	0000      	movs	r0, r0
	...

080015f0 <getRoll>:


float getRoll(float accY, float accZ) {
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
    return atan2(accY, accZ) * 180.0f / M_PI;
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7fe ff14 	bl	8000428 <__aeabi_f2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7fe ff0f 	bl	8000428 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4620      	mov	r0, r4
 8001610:	4629      	mov	r1, r5
 8001612:	f009 fd53 	bl	800b0bc <atan2>
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <getRoll+0x60>)
 800161c:	f7fe ff5c 	bl	80004d8 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	a307      	add	r3, pc, #28	@ (adr r3, 8001648 <getRoll+0x58>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7ff f87d 	bl	800072c <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fa25 	bl	8000a88 <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bdb0      	pop	{r4, r5, r7, pc}
 8001648:	54442d18 	.word	0x54442d18
 800164c:	400921fb 	.word	0x400921fb
 8001650:	40668000 	.word	0x40668000
 8001654:	00000000 	.word	0x00000000

08001658 <getPitch>:

float getPitch(float accX, float accY, float accZ) {
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
    return atan2(-accX, sqrt(accY*accY + accZ*accZ)) * 180.0f / M_PI;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fedc 	bl	8000428 <__aeabi_f2d>
 8001670:	4604      	mov	r4, r0
 8001672:	460d      	mov	r5, r1
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68b8      	ldr	r0, [r7, #8]
 8001678:	f7ff fb64 	bl	8000d44 <__aeabi_fmul>
 800167c:	4603      	mov	r3, r0
 800167e:	461e      	mov	r6, r3
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fb5e 	bl	8000d44 <__aeabi_fmul>
 8001688:	4603      	mov	r3, r0
 800168a:	4619      	mov	r1, r3
 800168c:	4630      	mov	r0, r6
 800168e:	f7ff fa51 	bl	8000b34 <__addsf3>
 8001692:	4603      	mov	r3, r0
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fec7 	bl	8000428 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f009 fd0d 	bl	800b0c0 <sqrt>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f009 fd05 	bl	800b0bc <atan2>
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <getPitch+0x98>)
 80016b8:	f7fe ff0e 	bl	80004d8 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	a308      	add	r3, pc, #32	@ (adr r3, 80016e8 <getPitch+0x90>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7ff f82f 	bl	800072c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff f9d7 	bl	8000a88 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e4:	f3af 8000 	nop.w
 80016e8:	54442d18 	.word	0x54442d18
 80016ec:	400921fb 	.word	0x400921fb
 80016f0:	40668000 	.word	0x40668000

080016f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001700:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800170c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001710:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001714:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00b      	beq.n	8001734 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800171c:	e000      	b.n	8001720 <ITM_SendChar+0x2c>
    {
      __NOP();
 800171e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001720:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f9      	beq.n	800171e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800172a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001744:	f001 faa6 	bl	8002c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001748:	f000 f82c 	bl	80017a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174c:	f000 f970 	bl	8001a30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001750:	f000 f948 	bl	80019e4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001754:	f000 f86c 	bl	8001830 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001758:	f000 f898 	bl	800188c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim1);
 800175c:	480e      	ldr	r0, [pc, #56]	@ (8001798 <main+0x58>)
 800175e:	f005 fef7 	bl	8007550 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001762:	2100      	movs	r1, #0
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <main+0x58>)
 8001766:	f005 ff9d 	bl	80076a4 <HAL_TIM_PWM_Start>


  MPU6050_Init(&hi2c1);
 800176a:	480c      	ldr	r0, [pc, #48]	@ (800179c <main+0x5c>)
 800176c:	f000 f9cc 	bl	8001b08 <MPU6050_Init>


  MPU6050_AccelerometerConfig(0x18);
 8001770:	2018      	movs	r0, #24
 8001772:	f000 fa11 	bl	8001b98 <MPU6050_AccelerometerConfig>
  MPU6050_GyroConfig(0x18);
 8001776:	2018      	movs	r0, #24
 8001778:	f000 fa56 	bl	8001c28 <MPU6050_GyroConfig>



  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2102      	movs	r1, #2
 8001780:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <main+0x60>)
 8001782:	f002 f96b 	bl	8003a5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	2110      	movs	r1, #16
 800178a:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <main+0x60>)
 800178c:	f002 f966 	bl	8003a5c <HAL_GPIO_WritePin>


  SSD1306_Init();
 8001790:	f000 fc78 	bl	8002084 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <main+0x54>
 8001798:	20000348 	.word	0x20000348
 800179c:	2000026c 	.word	0x2000026c
 80017a0:	40010800 	.word	0x40010800

080017a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b090      	sub	sp, #64	@ 0x40
 80017a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017aa:	f107 0318 	add.w	r3, r7, #24
 80017ae:	2228      	movs	r2, #40	@ 0x28
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f007 fba9 	bl	8008f0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d4:	2301      	movs	r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d8:	2302      	movs	r3, #2
 80017da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80017e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	4618      	mov	r0, r3
 80017ee:	f005 fa63 	bl	8006cb8 <HAL_RCC_OscConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017f8:	f000 f980 	bl	8001afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fc:	230f      	movs	r3, #15
 80017fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001800:	2302      	movs	r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800180c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2102      	movs	r1, #2
 8001816:	4618      	mov	r0, r3
 8001818:	f005 fcd0 	bl	80071bc <HAL_RCC_ClockConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001822:	f000 f96b 	bl	8001afc <Error_Handler>
  }
}
 8001826:	bf00      	nop
 8001828:	3740      	adds	r7, #64	@ 0x40
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001836:	4a13      	ldr	r2, [pc, #76]	@ (8001884 <MX_I2C1_Init+0x54>)
 8001838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <MX_I2C1_Init+0x50>)
 800183c:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <MX_I2C1_Init+0x58>)
 800183e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001840:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <MX_I2C1_Init+0x50>)
 800184e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001854:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <MX_I2C1_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001860:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	@ (8001880 <MX_I2C1_Init+0x50>)
 800186e:	f002 f90d 	bl	8003a8c <HAL_I2C_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001878:	f000 f940 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000026c 	.word	0x2000026c
 8001884:	40005400 	.word	0x40005400
 8001888:	00061a80 	.word	0x00061a80

0800188c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b096      	sub	sp, #88	@ 0x58
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2220      	movs	r2, #32
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f007 fb20 	bl	8008f0a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ca:	4b44      	ldr	r3, [pc, #272]	@ (80019dc <MX_TIM1_Init+0x150>)
 80018cc:	4a44      	ldr	r2, [pc, #272]	@ (80019e0 <MX_TIM1_Init+0x154>)
 80018ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 80018d0:	4b42      	ldr	r3, [pc, #264]	@ (80019dc <MX_TIM1_Init+0x150>)
 80018d2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80018d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b40      	ldr	r3, [pc, #256]	@ (80019dc <MX_TIM1_Init+0x150>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80018de:	4b3f      	ldr	r3, [pc, #252]	@ (80019dc <MX_TIM1_Init+0x150>)
 80018e0:	2263      	movs	r2, #99	@ 0x63
 80018e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b3d      	ldr	r3, [pc, #244]	@ (80019dc <MX_TIM1_Init+0x150>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ea:	4b3c      	ldr	r3, [pc, #240]	@ (80019dc <MX_TIM1_Init+0x150>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f0:	4b3a      	ldr	r3, [pc, #232]	@ (80019dc <MX_TIM1_Init+0x150>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018f6:	4839      	ldr	r0, [pc, #228]	@ (80019dc <MX_TIM1_Init+0x150>)
 80018f8:	f005 fdda 	bl	80074b0 <HAL_TIM_Base_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001902:	f000 f8fb 	bl	8001afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800190c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001910:	4619      	mov	r1, r3
 8001912:	4832      	ldr	r0, [pc, #200]	@ (80019dc <MX_TIM1_Init+0x150>)
 8001914:	f006 f91a 	bl	8007b4c <HAL_TIM_ConfigClockSource>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800191e:	f000 f8ed 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001922:	482e      	ldr	r0, [pc, #184]	@ (80019dc <MX_TIM1_Init+0x150>)
 8001924:	f005 fe66 	bl	80075f4 <HAL_TIM_PWM_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800192e:	f000 f8e5 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800193a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800193e:	4619      	mov	r1, r3
 8001940:	4826      	ldr	r0, [pc, #152]	@ (80019dc <MX_TIM1_Init+0x150>)
 8001942:	f006 fc9f 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800194c:	f000 f8d6 	bl	8001afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001950:	2360      	movs	r3, #96	@ 0x60
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50;
 8001954:	2332      	movs	r3, #50	@ 0x32
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800195c:	2300      	movs	r3, #0
 800195e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	4819      	ldr	r0, [pc, #100]	@ (80019dc <MX_TIM1_Init+0x150>)
 8001976:	f006 f827 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001980:	f000 f8bc 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001988:	2204      	movs	r2, #4
 800198a:	4619      	mov	r1, r3
 800198c:	4813      	ldr	r0, [pc, #76]	@ (80019dc <MX_TIM1_Init+0x150>)
 800198e:	f006 f81b 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001998:	f000 f8b0 	bl	8001afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <MX_TIM1_Init+0x150>)
 80019c0:	f006 fcbe 	bl	8008340 <HAL_TIMEx_ConfigBreakDeadTime>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019ca:	f000 f897 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ce:	4803      	ldr	r0, [pc, #12]	@ (80019dc <MX_TIM1_Init+0x150>)
 80019d0:	f000 ff62 	bl	8002898 <HAL_TIM_MspPostInit>

}
 80019d4:	bf00      	nop
 80019d6:	3758      	adds	r7, #88	@ 0x58
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000348 	.word	0x20000348
 80019e0:	40012c00 	.word	0x40012c00

080019e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <MX_DMA_Init+0x48>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4a0f      	ldr	r2, [pc, #60]	@ (8001a2c <MX_DMA_Init+0x48>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6153      	str	r3, [r2, #20]
 80019f6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <MX_DMA_Init+0x48>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2010      	movs	r0, #16
 8001a08:	f001 fa7d 	bl	8002f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001a0c:	2010      	movs	r0, #16
 8001a0e:	f001 fa96 	bl	8002f3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2011      	movs	r0, #17
 8001a18:	f001 fa75 	bl	8002f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001a1c:	2011      	movs	r0, #17
 8001a1e:	f001 fa8e 	bl	8002f3e <HAL_NVIC_EnableIRQ>

}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a44:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <MX_GPIO_Init+0x8c>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a1c      	ldr	r2, [pc, #112]	@ (8001abc <MX_GPIO_Init+0x8c>)
 8001a4a:	f043 0320 	orr.w	r3, r3, #32
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <MX_GPIO_Init+0x8c>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b17      	ldr	r3, [pc, #92]	@ (8001abc <MX_GPIO_Init+0x8c>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a16      	ldr	r2, [pc, #88]	@ (8001abc <MX_GPIO_Init+0x8c>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <MX_GPIO_Init+0x8c>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_GPIO_Init+0x8c>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a10      	ldr	r2, [pc, #64]	@ (8001abc <MX_GPIO_Init+0x8c>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_GPIO_Init+0x8c>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2116      	movs	r1, #22
 8001a90:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <MX_GPIO_Init+0x90>)
 8001a92:	f001 ffe3 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8001a96:	2316      	movs	r3, #22
 8001a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <MX_GPIO_Init+0x90>)
 8001aae:	f001 fe51 	bl	8003754 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3720      	adds	r7, #32
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010800 	.word	0x40010800

08001ac4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e009      	b.n	8001aea <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	60ba      	str	r2, [r7, #8]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fe08 	bl	80016f4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbf1      	blt.n	8001ad6 <_write+0x12>
  }
  return len;
 8001af2:	687b      	ldr	r3, [r7, #4]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <Error_Handler+0x8>

08001b08 <MPU6050_Init>:
static KalmanFilter kalmanRoll, kalmanPitch;

float roll = 0, pitch = 0;

uint8_t MPU6050_Init(I2C_HandleTypeDef *i2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af04      	add	r7, sp, #16
 8001b0e:	6078      	str	r0, [r7, #4]
	Kalman_Init(&kalmanRoll);
 8001b10:	481c      	ldr	r0, [pc, #112]	@ (8001b84 <MPU6050_Init+0x7c>)
 8001b12:	f7ff fc29 	bl	8001368 <Kalman_Init>
	Kalman_Init(&kalmanPitch);
 8001b16:	481c      	ldr	r0, [pc, #112]	@ (8001b88 <MPU6050_Init+0x80>)
 8001b18:	f7ff fc26 	bl	8001368 <Kalman_Init>
	DWT_Init();
 8001b1c:	f000 fa98 	bl	8002050 <DWT_Init>
	i2c_config = i2c;
 8001b20:	4a1a      	ldr	r2, [pc, #104]	@ (8001b8c <MPU6050_Init+0x84>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
	uint8_t PowerRegValue = 0x00;
 8001b26:	2300      	movs	r3, #0
 8001b28:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef retInit = HAL_I2C_IsDeviceReady(i2c_config, MPU_I2C_Address, 1, 100);
 8001b2a:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <MPU6050_Init+0x84>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <MPU6050_Init+0x88>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	2364      	movs	r3, #100	@ 0x64
 8001b36:	2201      	movs	r2, #1
 8001b38:	f002 fda2 	bl	8004680 <HAL_I2C_IsDeviceReady>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef retPower = HAL_I2C_Mem_Write(i2c_config, MPU_I2C_Address, MPU_PowerUpAddress, I2C_MEMADD_SIZE_8BIT, &PowerRegValue, I2C_MEMADD_SIZE_8BIT, 100);
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <MPU6050_Init+0x84>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <MPU6050_Init+0x88>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <MPU6050_Init+0x8c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2364      	movs	r3, #100	@ 0x64
 8001b52:	9302      	str	r3, [sp, #8]
 8001b54:	2301      	movs	r3, #1
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	f107 030d 	add.w	r3, r7, #13
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f002 fb0e 	bl	8004180 <HAL_I2C_Mem_Write>
 8001b64:	4603      	mov	r3, r0
 8001b66:	73bb      	strb	r3, [r7, #14]
	if(retInit == HAL_OK && retPower == HAL_OK)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d104      	bne.n	8001b78 <MPU6050_Init+0x70>
 8001b6e:	7bbb      	ldrb	r3, [r7, #14]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <MPU6050_Init+0x70>
	{
		return 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e000      	b.n	8001b7a <MPU6050_Init+0x72>
	}
	else
	{
		return 1;
 8001b78:	2301      	movs	r3, #1
	}




}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200003c0 	.word	0x200003c0
 8001b88:	200003e8 	.word	0x200003e8
 8001b8c:	200003bc 	.word	0x200003bc
 8001b90:	20000040 	.word	0x20000040
 8001b94:	20000041 	.word	0x20000041

08001b98 <MPU6050_AccelerometerConfig>:

uint8_t MPU6050_AccelerometerConfig(uint8_t AccRegValue)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af04      	add	r7, sp, #16
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retA = HAL_I2C_Mem_Write(i2c_config, MPU_I2C_Address, AccelConfigAdd, I2C_MEMADD_SIZE_8BIT, &AccRegValue, I2C_MEMADD_SIZE_8BIT, 100);
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <MPU6050_AccelerometerConfig+0x80>)
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MPU6050_AccelerometerConfig+0x84>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MPU6050_AccelerometerConfig+0x88>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2364      	movs	r3, #100	@ 0x64
 8001bb4:	9302      	str	r3, [sp, #8]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f002 fade 	bl	8004180 <HAL_I2C_Mem_Write>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	73fb      	strb	r3, [r7, #15]
	if(retA == HAL_OK)
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d11e      	bne.n	8001c0c <MPU6050_AccelerometerConfig+0x74>
	{
		if((AccRegValue & 0x18) == 0x18)
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 0318 	and.w	r3, r3, #24
 8001bd4:	2b18      	cmp	r3, #24
 8001bd6:	d104      	bne.n	8001be2 <MPU6050_AccelerometerConfig+0x4a>
		{
			AccelLSBSens = 2048;
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <MPU6050_AccelerometerConfig+0x8c>)
 8001bda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bde:	801a      	strh	r2, [r3, #0]
 8001be0:	e012      	b.n	8001c08 <MPU6050_AccelerometerConfig+0x70>
		}
		else if((AccRegValue & 0x18) == 0x10)
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 0318 	and.w	r3, r3, #24
 8001be8:	2b10      	cmp	r3, #16
 8001bea:	d104      	bne.n	8001bf6 <MPU6050_AccelerometerConfig+0x5e>
		{
			AccelLSBSens = 4096;
 8001bec:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <MPU6050_AccelerometerConfig+0x8c>)
 8001bee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bf2:	801a      	strh	r2, [r3, #0]
 8001bf4:	e008      	b.n	8001c08 <MPU6050_AccelerometerConfig+0x70>
		}
		else if((AccRegValue & 0x18) == 0x08)
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f003 0318 	and.w	r3, r3, #24
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d103      	bne.n	8001c08 <MPU6050_AccelerometerConfig+0x70>
		{
			AccelLSBSens = 8192;
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <MPU6050_AccelerometerConfig+0x8c>)
 8001c02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c06:	801a      	strh	r2, [r3, #0]
		}
		return 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e000      	b.n	8001c0e <MPU6050_AccelerometerConfig+0x76>
	}
	else
	{
		return 1;
 8001c0c:	2301      	movs	r3, #1
	}
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200003bc 	.word	0x200003bc
 8001c1c:	20000040 	.word	0x20000040
 8001c20:	20000042 	.word	0x20000042
 8001c24:	20000046 	.word	0x20000046

08001c28 <MPU6050_GyroConfig>:

uint8_t MPU6050_GyroConfig(uint8_t GRegValue)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af04      	add	r7, sp, #16
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retG = HAL_I2C_Mem_Write(i2c_config, MPU_I2C_Address, GyroConfigAdd, I2C_MEMADD_SIZE_8BIT, &GRegValue, I2C_MEMADD_SIZE_8BIT, 100);
 8001c32:	4b27      	ldr	r3, [pc, #156]	@ (8001cd0 <MPU6050_GyroConfig+0xa8>)
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <MPU6050_GyroConfig+0xac>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4b26      	ldr	r3, [pc, #152]	@ (8001cd8 <MPU6050_GyroConfig+0xb0>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	2364      	movs	r3, #100	@ 0x64
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f002 fa96 	bl	8004180 <HAL_I2C_Mem_Write>
 8001c54:	4603      	mov	r3, r0
 8001c56:	73fb      	strb	r3, [r7, #15]
	if(retG == HAL_OK)
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d124      	bne.n	8001ca8 <MPU6050_GyroConfig+0x80>
	{
		if((GRegValue & 0x18) == 0x18)
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 0318 	and.w	r3, r3, #24
 8001c64:	2b18      	cmp	r3, #24
 8001c66:	d106      	bne.n	8001c76 <MPU6050_GyroConfig+0x4e>
		{
			GyrolLSBSens = 16.4;
 8001c68:	491c      	ldr	r1, [pc, #112]	@ (8001cdc <MPU6050_GyroConfig+0xb4>)
 8001c6a:	a313      	add	r3, pc, #76	@ (adr r3, 8001cb8 <MPU6050_GyroConfig+0x90>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	e9c1 2300 	strd	r2, r3, [r1]
 8001c74:	e016      	b.n	8001ca4 <MPU6050_GyroConfig+0x7c>
		}
		else if((GRegValue & 0x18) == 0x10)
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 0318 	and.w	r3, r3, #24
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d106      	bne.n	8001c8e <MPU6050_GyroConfig+0x66>
		{
			GyrolLSBSens = 32.8;
 8001c80:	4916      	ldr	r1, [pc, #88]	@ (8001cdc <MPU6050_GyroConfig+0xb4>)
 8001c82:	a30f      	add	r3, pc, #60	@ (adr r3, 8001cc0 <MPU6050_GyroConfig+0x98>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	e9c1 2300 	strd	r2, r3, [r1]
 8001c8c:	e00a      	b.n	8001ca4 <MPU6050_GyroConfig+0x7c>
		}
		else if((GRegValue & 0x18) == 0x08)
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 0318 	and.w	r3, r3, #24
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d105      	bne.n	8001ca4 <MPU6050_GyroConfig+0x7c>
		{
			GyrolLSBSens = 65.5;
 8001c98:	4910      	ldr	r1, [pc, #64]	@ (8001cdc <MPU6050_GyroConfig+0xb4>)
 8001c9a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001cc8 <MPU6050_GyroConfig+0xa0>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		return 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e000      	b.n	8001caa <MPU6050_GyroConfig+0x82>
	}
	else
	{
		return 1;
 8001ca8:	2301      	movs	r3, #1
	}
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	66666666 	.word	0x66666666
 8001cbc:	40306666 	.word	0x40306666
 8001cc0:	66666666 	.word	0x66666666
 8001cc4:	40406666 	.word	0x40406666
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	40506000 	.word	0x40506000
 8001cd0:	200003bc 	.word	0x200003bc
 8001cd4:	20000040 	.word	0x20000040
 8001cd8:	20000043 	.word	0x20000043
 8001cdc:	20000048 	.word	0x20000048

08001ce0 <bytes_to_int>:

int16_t bytes_to_int(uint8_t firstbyte, uint8_t secondbyte)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460a      	mov	r2, r1
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	71bb      	strb	r3, [r7, #6]
	int16_t val = (int16_t)((firstbyte << 8) | secondbyte);
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	79bb      	ldrb	r3, [r7, #6]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	81fb      	strh	r3, [r7, #14]
}
 8001d00:	bf00      	nop
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <MPU6050_Read>:


void MPU6050_Read(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af02      	add	r7, sp, #8
	if (MPU_I2C_Ready && oled_ready)
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <MPU6050_Read+0x40>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d015      	beq.n	8001d46 <MPU6050_Read+0x3a>
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <MPU6050_Read+0x44>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d011      	beq.n	8001d46 <MPU6050_Read+0x3a>
	{
		MPU_I2C_Ready = 0;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <MPU6050_Read+0x40>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_DMA(i2c_config, MPU_I2C_Address, DataRegStart, I2C_MEMADD_SIZE_8BIT,  mpu6050_data, sizeof(mpu6050_data));
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <MPU6050_Read+0x48>)
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <MPU6050_Read+0x4c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <MPU6050_Read+0x50>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	230e      	movs	r3, #14
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <MPU6050_Read+0x54>)
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	f002 fb17 	bl	8004374 <HAL_I2C_Mem_Read_DMA>
	}

}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000074 	.word	0x20000074
 8001d50:	20000075 	.word	0x20000075
 8001d54:	200003bc 	.word	0x200003bc
 8001d58:	20000040 	.word	0x20000040
 8001d5c:	20000044 	.word	0x20000044
 8001d60:	20000390 	.word	0x20000390
 8001d64:	00000000 	.word	0x00000000

08001d68 <MPU6050_Data_Update>:


void MPU6050_Data_Update(void)
{
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b08e      	sub	sp, #56	@ 0x38
 8001d6c:	af00      	add	r7, sp, #0
	double LSB = AccelLSBSens;
 8001d6e:	4ba4      	ldr	r3, [pc, #656]	@ (8002000 <MPU6050_Data_Update+0x298>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fb36 	bl	80003e4 <__aeabi_ui2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	for(int i=0; i < 7; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d84:	e0a8      	b.n	8001ed8 <MPU6050_Data_Update+0x170>
	{
		if(i == 3)
 8001d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d12d      	bne.n	8001de8 <MPU6050_Data_Update+0x80>
		{
			MPU6050_DATA[i] = (bytes_to_int(mpu6050_data[i*2], mpu6050_data[i*2+1]))/340 + 36.53;
 8001d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4a9c      	ldr	r2, [pc, #624]	@ (8002004 <MPU6050_Data_Update+0x29c>)
 8001d92:	5cd2      	ldrb	r2, [r2, r3]
 8001d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	3301      	adds	r3, #1
 8001d9a:	499a      	ldr	r1, [pc, #616]	@ (8002004 <MPU6050_Data_Update+0x29c>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4610      	mov	r0, r2
 8001da2:	f7ff ff9d 	bl	8001ce0 <bytes_to_int>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a97      	ldr	r2, [pc, #604]	@ (8002008 <MPU6050_Data_Update+0x2a0>)
 8001daa:	fb82 1203 	smull	r1, r2, r2, r3
 8001dae:	11d2      	asrs	r2, r2, #7
 8001db0:	17db      	asrs	r3, r3, #31
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fb24 	bl	8000404 <__aeabi_i2d>
 8001dbc:	a38e      	add	r3, pc, #568	@ (adr r3, 8001ff8 <MPU6050_Data_Update+0x290>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe f9d3 	bl	800016c <__adddf3>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe fe5b 	bl	8000a88 <__aeabi_d2f>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	498d      	ldr	r1, [pc, #564]	@ (800200c <MPU6050_Data_Update+0x2a4>)
 8001dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			LSB = GyrolLSBSens;
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	@ (8002010 <MPU6050_Data_Update+0x2a8>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001de6:	e074      	b.n	8001ed2 <MPU6050_Data_Update+0x16a>
		}
		else
		{
			if(i > 3)
 8001de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	dd36      	ble.n	8001e5c <MPU6050_Data_Update+0xf4>
				MPU6050_DATA[i] = (float)bytes_to_int(mpu6050_data[i*2], mpu6050_data[i*2+1])/LSB - CalibratedGyro[i-4];
 8001dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4a84      	ldr	r2, [pc, #528]	@ (8002004 <MPU6050_Data_Update+0x29c>)
 8001df4:	5cd2      	ldrb	r2, [r2, r3]
 8001df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	4981      	ldr	r1, [pc, #516]	@ (8002004 <MPU6050_Data_Update+0x29c>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f7ff ff6c 	bl	8001ce0 <bytes_to_int>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ff46 	bl	8000c9c <__aeabi_i2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb08 	bl	8000428 <__aeabi_f2d>
 8001e18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e1c:	f7fe fc86 	bl	800072c <__aeabi_ddiv>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	4a79      	ldr	r2, [pc, #484]	@ (8002014 <MPU6050_Data_Update+0x2ac>)
 8001e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe faf8 	bl	8000428 <__aeabi_f2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f7fe f992 	bl	8000168 <__aeabi_dsub>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f7fe fe1c 	bl	8000a88 <__aeabi_d2f>
 8001e50:	4602      	mov	r2, r0
 8001e52:	496e      	ldr	r1, [pc, #440]	@ (800200c <MPU6050_Data_Update+0x2a4>)
 8001e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001e5a:	e03a      	b.n	8001ed2 <MPU6050_Data_Update+0x16a>
			else
			{
				float temp = (float)bytes_to_int(mpu6050_data[i*2], mpu6050_data[i*2+1])/LSB;
 8001e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4a68      	ldr	r2, [pc, #416]	@ (8002004 <MPU6050_Data_Update+0x29c>)
 8001e62:	5cd2      	ldrb	r2, [r2, r3]
 8001e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4966      	ldr	r1, [pc, #408]	@ (8002004 <MPU6050_Data_Update+0x29c>)
 8001e6c:	5ccb      	ldrb	r3, [r1, r3]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4610      	mov	r0, r2
 8001e72:	f7ff ff35 	bl	8001ce0 <bytes_to_int>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe ff0f 	bl	8000c9c <__aeabi_i2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fad1 	bl	8000428 <__aeabi_f2d>
 8001e86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e8a:	f7fe fc4f 	bl	800072c <__aeabi_ddiv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7fe fdf7 	bl	8000a88 <__aeabi_d2f>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	617b      	str	r3, [r7, #20]
				MPU6050_DATA[i] = CalibrationParameterAccelerometer[i*2]*temp + CalibrationParameterAccelerometer[i*2+1];
 8001e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4a5d      	ldr	r2, [pc, #372]	@ (8002018 <MPU6050_Data_Update+0x2b0>)
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	6979      	ldr	r1, [r7, #20]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ff4a 	bl	8000d44 <__aeabi_fmul>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	3301      	adds	r3, #1
 8001eba:	4a57      	ldr	r2, [pc, #348]	@ (8002018 <MPU6050_Data_Update+0x2b0>)
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f7fe fe37 	bl	8000b34 <__addsf3>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4a50      	ldr	r2, [pc, #320]	@ (800200c <MPU6050_Data_Update+0x2a4>)
 8001ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ece:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i < 7; i++)
 8001ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	f77f af53 	ble.w	8001d86 <MPU6050_Data_Update+0x1e>
			//average_values[i] = (MPU6050_DATA[i] + average_values[i]*(counter_average - 1))/counter_average;
			//printf("DataAvr[%d]: %.6f\t", i, average_values[i]);
		}
	}
	static uint32_t lastTicks = 0;
	uint32_t now = DWT->CYCCNT;
 8001ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800201c <MPU6050_Data_Update+0x2b4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t cycles = now - lastTicks;
 8001ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8002020 <MPU6050_Data_Update+0x2b8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
	lastTicks = now;
 8001ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8002020 <MPU6050_Data_Update+0x2b8>)
 8001ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef4:	6013      	str	r3, [r2, #0]

	float dt = (float)cycles / (float)SystemCoreClock; // seconds
 8001ef6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ef8:	f7fe fecc 	bl	8000c94 <__aeabi_ui2f>
 8001efc:	4604      	mov	r4, r0
 8001efe:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <MPU6050_Data_Update+0x2bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fec6 	bl	8000c94 <__aeabi_ui2f>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7fe ffcd 	bl	8000eac <__aeabi_fdiv>
 8001f12:	4603      	mov	r3, r0
 8001f14:	623b      	str	r3, [r7, #32]

	float rollAcc = getRoll(MPU6050_DATA[1], MPU6050_DATA[2]);
 8001f16:	4b3d      	ldr	r3, [pc, #244]	@ (800200c <MPU6050_Data_Update+0x2a4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a3c      	ldr	r2, [pc, #240]	@ (800200c <MPU6050_Data_Update+0x2a4>)
 8001f1c:	6892      	ldr	r2, [r2, #8]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fb65 	bl	80015f0 <getRoll>
 8001f26:	61f8      	str	r0, [r7, #28]
	float pitchAcc = getPitch(MPU6050_DATA[0], MPU6050_DATA[1], MPU6050_DATA[2]);
 8001f28:	4b38      	ldr	r3, [pc, #224]	@ (800200c <MPU6050_Data_Update+0x2a4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a37      	ldr	r2, [pc, #220]	@ (800200c <MPU6050_Data_Update+0x2a4>)
 8001f2e:	6851      	ldr	r1, [r2, #4]
 8001f30:	4a36      	ldr	r2, [pc, #216]	@ (800200c <MPU6050_Data_Update+0x2a4>)
 8001f32:	6892      	ldr	r2, [r2, #8]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fb8f 	bl	8001658 <getPitch>
 8001f3a:	61b8      	str	r0, [r7, #24]

	roll = Kalman_Update(&kalmanRoll, rollAcc, MPU6050_DATA[4], dt);
 8001f3c:	4b33      	ldr	r3, [pc, #204]	@ (800200c <MPU6050_Data_Update+0x2a4>)
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	69f9      	ldr	r1, [r7, #28]
 8001f44:	4838      	ldr	r0, [pc, #224]	@ (8002028 <MPU6050_Data_Update+0x2c0>)
 8001f46:	f7ff fa3f 	bl	80013c8 <Kalman_Update>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a37      	ldr	r2, [pc, #220]	@ (800202c <MPU6050_Data_Update+0x2c4>)
 8001f4e:	6013      	str	r3, [r2, #0]
	pitch = Kalman_Update(&kalmanPitch, pitchAcc, MPU6050_DATA[5],  dt);
 8001f50:	4b2e      	ldr	r3, [pc, #184]	@ (800200c <MPU6050_Data_Update+0x2a4>)
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	4835      	ldr	r0, [pc, #212]	@ (8002030 <MPU6050_Data_Update+0x2c8>)
 8001f5a:	f7ff fa35 	bl	80013c8 <Kalman_Update>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4a34      	ldr	r2, [pc, #208]	@ (8002034 <MPU6050_Data_Update+0x2cc>)
 8001f62:	6013      	str	r3, [r2, #0]
//	{
//		SSD1306_Clear();
//	}

	char stringvalues[20];
	SSD1306_GotoXY(0, 0);
 8001f64:	2100      	movs	r1, #0
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f9f4 	bl	8002354 <SSD1306_GotoXY>
	SSD1306_Puts("Roll: ", &Font_7x10, 1);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4932      	ldr	r1, [pc, #200]	@ (8002038 <MPU6050_Data_Update+0x2d0>)
 8001f70:	4832      	ldr	r0, [pc, #200]	@ (800203c <MPU6050_Data_Update+0x2d4>)
 8001f72:	f000 fa83 	bl	800247c <SSD1306_Puts>
	SSD1306_GotoXY(40, 0);
 8001f76:	2100      	movs	r1, #0
 8001f78:	2028      	movs	r0, #40	@ 0x28
 8001f7a:	f000 f9eb 	bl	8002354 <SSD1306_GotoXY>
	sprintf(stringvalues, "%.3f", roll);
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800202c <MPU6050_Data_Update+0x2c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fa50 	bl	8000428 <__aeabi_f2d>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4638      	mov	r0, r7
 8001f8e:	492c      	ldr	r1, [pc, #176]	@ (8002040 <MPU6050_Data_Update+0x2d8>)
 8001f90:	f006 ff56 	bl	8008e40 <siprintf>
	SSD1306_Puts(stringvalues, &Font_7x10, 1);
 8001f94:	463b      	mov	r3, r7
 8001f96:	2201      	movs	r2, #1
 8001f98:	4927      	ldr	r1, [pc, #156]	@ (8002038 <MPU6050_Data_Update+0x2d0>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fa6e 	bl	800247c <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 8001fa0:	211e      	movs	r1, #30
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 f9d6 	bl	8002354 <SSD1306_GotoXY>
	SSD1306_Puts("Pitch : ", &Font_7x10, 1);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4923      	ldr	r1, [pc, #140]	@ (8002038 <MPU6050_Data_Update+0x2d0>)
 8001fac:	4825      	ldr	r0, [pc, #148]	@ (8002044 <MPU6050_Data_Update+0x2dc>)
 8001fae:	f000 fa65 	bl	800247c <SSD1306_Puts>
	SSD1306_GotoXY(40, 30);
 8001fb2:	211e      	movs	r1, #30
 8001fb4:	2028      	movs	r0, #40	@ 0x28
 8001fb6:	f000 f9cd 	bl	8002354 <SSD1306_GotoXY>
	sprintf(stringvalues, "%.3f", pitch);
 8001fba:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <MPU6050_Data_Update+0x2cc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fa32 	bl	8000428 <__aeabi_f2d>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4638      	mov	r0, r7
 8001fca:	491d      	ldr	r1, [pc, #116]	@ (8002040 <MPU6050_Data_Update+0x2d8>)
 8001fcc:	f006 ff38 	bl	8008e40 <siprintf>
	SSD1306_Puts(stringvalues, &Font_7x10, 1);
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4918      	ldr	r1, [pc, #96]	@ (8002038 <MPU6050_Data_Update+0x2d0>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fa50 	bl	800247c <SSD1306_Puts>
	if (oled_ready && MPU_I2C_Ready)
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <MPU6050_Data_Update+0x2e0>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <MPU6050_Data_Update+0x288>
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <MPU6050_Data_Update+0x2e4>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MPU6050_Data_Update+0x288>
	{
		SSD1306_UpdateScreen_DMA();
 8001fec:	f000 fb04 	bl	80025f8 <SSD1306_UpdateScreen_DMA>
	}


//	printf("Roll_Acc: %.6f\t\tPitch_Acc: %.6f\t", roll, pitch);
//	printf("\n\n");
}
 8001ff0:	bf00      	nop
 8001ff2:	3738      	adds	r7, #56	@ 0x38
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff8:	0a3d70a4 	.word	0x0a3d70a4
 8001ffc:	404243d7 	.word	0x404243d7
 8002000:	20000046 	.word	0x20000046
 8002004:	20000390 	.word	0x20000390
 8002008:	60606061 	.word	0x60606061
 800200c:	200003a0 	.word	0x200003a0
 8002010:	20000048 	.word	0x20000048
 8002014:	20000068 	.word	0x20000068
 8002018:	20000050 	.word	0x20000050
 800201c:	e0001000 	.word	0xe0001000
 8002020:	20000418 	.word	0x20000418
 8002024:	20000078 	.word	0x20000078
 8002028:	200003c0 	.word	0x200003c0
 800202c:	20000410 	.word	0x20000410
 8002030:	200003e8 	.word	0x200003e8
 8002034:	20000414 	.word	0x20000414
 8002038:	20000038 	.word	0x20000038
 800203c:	0800b798 	.word	0x0800b798
 8002040:	0800b7a0 	.word	0x0800b7a0
 8002044:	0800b7a8 	.word	0x0800b7a8
 8002048:	20000075 	.word	0x20000075
 800204c:	20000074 	.word	0x20000074

08002050 <DWT_Init>:



void DWT_Init(void) {
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
 8002054:	4b09      	ldr	r3, [pc, #36]	@ (800207c <DWT_Init+0x2c>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4a08      	ldr	r2, [pc, #32]	@ (800207c <DWT_Init+0x2c>)
 800205a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800205e:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;                                // Reset counter
 8002060:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <DWT_Init+0x30>)
 8002062:	2200      	movs	r2, #0
 8002064:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <DWT_Init+0x30>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <DWT_Init+0x30>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6013      	str	r3, [r2, #0]
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000edf0 	.word	0xe000edf0
 8002080:	e0001000 	.word	0xe0001000

08002084 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800208a:	f000 fa1d 	bl	80024c8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800208e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002092:	2201      	movs	r2, #1
 8002094:	2178      	movs	r1, #120	@ 0x78
 8002096:	485b      	ldr	r0, [pc, #364]	@ (8002204 <SSD1306_Init+0x180>)
 8002098:	f002 faf2 	bl	8004680 <HAL_I2C_IsDeviceReady>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e0a9      	b.n	80021fa <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80020a6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80020aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020ac:	e002      	b.n	80020b4 <SSD1306_Init+0x30>
		p--;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f9      	bne.n	80020ae <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80020ba:	22ae      	movs	r2, #174	@ 0xae
 80020bc:	2100      	movs	r1, #0
 80020be:	2078      	movs	r0, #120	@ 0x78
 80020c0:	f000 fa7c 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80020c4:	2220      	movs	r2, #32
 80020c6:	2100      	movs	r1, #0
 80020c8:	2078      	movs	r0, #120	@ 0x78
 80020ca:	f000 fa77 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80020ce:	2210      	movs	r2, #16
 80020d0:	2100      	movs	r1, #0
 80020d2:	2078      	movs	r0, #120	@ 0x78
 80020d4:	f000 fa72 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020d8:	22b0      	movs	r2, #176	@ 0xb0
 80020da:	2100      	movs	r1, #0
 80020dc:	2078      	movs	r0, #120	@ 0x78
 80020de:	f000 fa6d 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80020e2:	22c8      	movs	r2, #200	@ 0xc8
 80020e4:	2100      	movs	r1, #0
 80020e6:	2078      	movs	r0, #120	@ 0x78
 80020e8:	f000 fa68 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2078      	movs	r0, #120	@ 0x78
 80020f2:	f000 fa63 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80020f6:	2210      	movs	r2, #16
 80020f8:	2100      	movs	r1, #0
 80020fa:	2078      	movs	r0, #120	@ 0x78
 80020fc:	f000 fa5e 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002100:	2240      	movs	r2, #64	@ 0x40
 8002102:	2100      	movs	r1, #0
 8002104:	2078      	movs	r0, #120	@ 0x78
 8002106:	f000 fa59 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800210a:	2281      	movs	r2, #129	@ 0x81
 800210c:	2100      	movs	r1, #0
 800210e:	2078      	movs	r0, #120	@ 0x78
 8002110:	f000 fa54 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002114:	22ff      	movs	r2, #255	@ 0xff
 8002116:	2100      	movs	r1, #0
 8002118:	2078      	movs	r0, #120	@ 0x78
 800211a:	f000 fa4f 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800211e:	22a1      	movs	r2, #161	@ 0xa1
 8002120:	2100      	movs	r1, #0
 8002122:	2078      	movs	r0, #120	@ 0x78
 8002124:	f000 fa4a 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002128:	22a6      	movs	r2, #166	@ 0xa6
 800212a:	2100      	movs	r1, #0
 800212c:	2078      	movs	r0, #120	@ 0x78
 800212e:	f000 fa45 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002132:	22a8      	movs	r2, #168	@ 0xa8
 8002134:	2100      	movs	r1, #0
 8002136:	2078      	movs	r0, #120	@ 0x78
 8002138:	f000 fa40 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800213c:	223f      	movs	r2, #63	@ 0x3f
 800213e:	2100      	movs	r1, #0
 8002140:	2078      	movs	r0, #120	@ 0x78
 8002142:	f000 fa3b 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002146:	22a4      	movs	r2, #164	@ 0xa4
 8002148:	2100      	movs	r1, #0
 800214a:	2078      	movs	r0, #120	@ 0x78
 800214c:	f000 fa36 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002150:	22d3      	movs	r2, #211	@ 0xd3
 8002152:	2100      	movs	r1, #0
 8002154:	2078      	movs	r0, #120	@ 0x78
 8002156:	f000 fa31 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	2078      	movs	r0, #120	@ 0x78
 8002160:	f000 fa2c 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002164:	22d5      	movs	r2, #213	@ 0xd5
 8002166:	2100      	movs	r1, #0
 8002168:	2078      	movs	r0, #120	@ 0x78
 800216a:	f000 fa27 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800216e:	22f0      	movs	r2, #240	@ 0xf0
 8002170:	2100      	movs	r1, #0
 8002172:	2078      	movs	r0, #120	@ 0x78
 8002174:	f000 fa22 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002178:	22d9      	movs	r2, #217	@ 0xd9
 800217a:	2100      	movs	r1, #0
 800217c:	2078      	movs	r0, #120	@ 0x78
 800217e:	f000 fa1d 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002182:	2222      	movs	r2, #34	@ 0x22
 8002184:	2100      	movs	r1, #0
 8002186:	2078      	movs	r0, #120	@ 0x78
 8002188:	f000 fa18 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800218c:	22da      	movs	r2, #218	@ 0xda
 800218e:	2100      	movs	r1, #0
 8002190:	2078      	movs	r0, #120	@ 0x78
 8002192:	f000 fa13 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002196:	2212      	movs	r2, #18
 8002198:	2100      	movs	r1, #0
 800219a:	2078      	movs	r0, #120	@ 0x78
 800219c:	f000 fa0e 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80021a0:	22db      	movs	r2, #219	@ 0xdb
 80021a2:	2100      	movs	r1, #0
 80021a4:	2078      	movs	r0, #120	@ 0x78
 80021a6:	f000 fa09 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80021aa:	2220      	movs	r2, #32
 80021ac:	2100      	movs	r1, #0
 80021ae:	2078      	movs	r0, #120	@ 0x78
 80021b0:	f000 fa04 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80021b4:	228d      	movs	r2, #141	@ 0x8d
 80021b6:	2100      	movs	r1, #0
 80021b8:	2078      	movs	r0, #120	@ 0x78
 80021ba:	f000 f9ff 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80021be:	2214      	movs	r2, #20
 80021c0:	2100      	movs	r1, #0
 80021c2:	2078      	movs	r0, #120	@ 0x78
 80021c4:	f000 f9fa 	bl	80025bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80021c8:	22af      	movs	r2, #175	@ 0xaf
 80021ca:	2100      	movs	r1, #0
 80021cc:	2078      	movs	r0, #120	@ 0x78
 80021ce:	f000 f9f5 	bl	80025bc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80021d2:	222e      	movs	r2, #46	@ 0x2e
 80021d4:	2100      	movs	r1, #0
 80021d6:	2078      	movs	r0, #120	@ 0x78
 80021d8:	f000 f9f0 	bl	80025bc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80021dc:	2000      	movs	r0, #0
 80021de:	f000 f843 	bl	8002268 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80021e2:	f000 f813 	bl	800220c <SSD1306_UpdateScreen>
	/* Set default values */
	SSD1306.CurrentX = 0;
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <SSD1306_Init+0x184>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <SSD1306_Init+0x184>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80021f2:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SSD1306_Init+0x184>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80021f8:	2301      	movs	r3, #1
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000026c 	.word	0x2000026c
 8002208:	2000081c 	.word	0x2000081c

0800220c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002212:	2300      	movs	r3, #0
 8002214:	71fb      	strb	r3, [r7, #7]
 8002216:	e01d      	b.n	8002254 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	3b50      	subs	r3, #80	@ 0x50
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	2100      	movs	r1, #0
 8002222:	2078      	movs	r0, #120	@ 0x78
 8002224:	f000 f9ca 	bl	80025bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	2078      	movs	r0, #120	@ 0x78
 800222e:	f000 f9c5 	bl	80025bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002232:	2210      	movs	r2, #16
 8002234:	2100      	movs	r1, #0
 8002236:	2078      	movs	r0, #120	@ 0x78
 8002238:	f000 f9c0 	bl	80025bc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	01db      	lsls	r3, r3, #7
 8002240:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <SSD1306_UpdateScreen+0x58>)
 8002242:	441a      	add	r2, r3
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	2140      	movs	r1, #64	@ 0x40
 8002248:	2078      	movs	r0, #120	@ 0x78
 800224a:	f000 f951 	bl	80024f0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	3301      	adds	r3, #1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	2b07      	cmp	r3, #7
 8002258:	d9de      	bls.n	8002218 <SSD1306_UpdateScreen+0xc>
	}
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	2000041c 	.word	0x2000041c

08002268 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <SSD1306_Fill+0x14>
 8002278:	2300      	movs	r3, #0
 800227a:	e000      	b.n	800227e <SSD1306_Fill+0x16>
 800227c:	23ff      	movs	r3, #255	@ 0xff
 800227e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002282:	4619      	mov	r1, r3
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <SSD1306_Fill+0x2c>)
 8002286:	f006 fe40 	bl	8008f0a <memset>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000041c 	.word	0x2000041c

08002298 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
 80022a2:	460b      	mov	r3, r1
 80022a4:	80bb      	strh	r3, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	70fb      	strb	r3, [r7, #3]
	if (
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80022ae:	d848      	bhi.n	8002342 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80022b4:	d845      	bhi.n	8002342 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80022b6:	4b25      	ldr	r3, [pc, #148]	@ (800234c <SSD1306_DrawPixel+0xb4>)
 80022b8:	791b      	ldrb	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d11a      	bne.n	8002308 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	88bb      	ldrh	r3, [r7, #4]
 80022d6:	08db      	lsrs	r3, r3, #3
 80022d8:	b298      	uxth	r0, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	01db      	lsls	r3, r3, #7
 80022de:	4413      	add	r3, r2
 80022e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002350 <SSD1306_DrawPixel+0xb8>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	b25a      	sxtb	r2, r3
 80022e6:	88bb      	ldrh	r3, [r7, #4]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b259      	sxtb	r1, r3
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	4603      	mov	r3, r0
 80022fc:	01db      	lsls	r3, r3, #7
 80022fe:	4413      	add	r3, r2
 8002300:	b2c9      	uxtb	r1, r1
 8002302:	4a13      	ldr	r2, [pc, #76]	@ (8002350 <SSD1306_DrawPixel+0xb8>)
 8002304:	54d1      	strb	r1, [r2, r3]
 8002306:	e01d      	b.n	8002344 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	88bb      	ldrh	r3, [r7, #4]
 800230c:	08db      	lsrs	r3, r3, #3
 800230e:	b298      	uxth	r0, r3
 8002310:	4603      	mov	r3, r0
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	4413      	add	r3, r2
 8002316:	4a0e      	ldr	r2, [pc, #56]	@ (8002350 <SSD1306_DrawPixel+0xb8>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	b25a      	sxtb	r2, r3
 800231c:	88bb      	ldrh	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	b25b      	sxtb	r3, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	b25b      	sxtb	r3, r3
 800232e:	4013      	ands	r3, r2
 8002330:	b259      	sxtb	r1, r3
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	4603      	mov	r3, r0
 8002336:	01db      	lsls	r3, r3, #7
 8002338:	4413      	add	r3, r2
 800233a:	b2c9      	uxtb	r1, r1
 800233c:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <SSD1306_DrawPixel+0xb8>)
 800233e:	54d1      	strb	r1, [r2, r3]
 8002340:	e000      	b.n	8002344 <SSD1306_DrawPixel+0xac>
		return;
 8002342:	bf00      	nop
	}
}
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	2000081c 	.word	0x2000081c
 8002350:	2000041c 	.word	0x2000041c

08002354 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	460a      	mov	r2, r1
 800235e:	80fb      	strh	r3, [r7, #6]
 8002360:	4613      	mov	r3, r2
 8002362:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002364:	4a05      	ldr	r2, [pc, #20]	@ (800237c <SSD1306_GotoXY+0x28>)
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800236a:	4a04      	ldr	r2, [pc, #16]	@ (800237c <SSD1306_GotoXY+0x28>)
 800236c:	88bb      	ldrh	r3, [r7, #4]
 800236e:	8053      	strh	r3, [r2, #2]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	2000081c 	.word	0x2000081c

08002380 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	4613      	mov	r3, r2
 800238e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002390:	4b39      	ldr	r3, [pc, #228]	@ (8002478 <SSD1306_Putc+0xf8>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4413      	add	r3, r2
	if (
 800239c:	2b7f      	cmp	r3, #127	@ 0x7f
 800239e:	dc07      	bgt.n	80023b0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80023a0:	4b35      	ldr	r3, [pc, #212]	@ (8002478 <SSD1306_Putc+0xf8>)
 80023a2:	885b      	ldrh	r3, [r3, #2]
 80023a4:	461a      	mov	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80023ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80023ae:	dd01      	ble.n	80023b4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e05d      	b.n	8002470 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e04b      	b.n	8002452 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	3b20      	subs	r3, #32
 80023c2:	6839      	ldr	r1, [r7, #0]
 80023c4:	7849      	ldrb	r1, [r1, #1]
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4619      	mov	r1, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	440b      	add	r3, r1
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	e030      	b.n	8002440 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d010      	beq.n	8002410 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80023ee:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <SSD1306_Putc+0xf8>)
 80023f0:	881a      	ldrh	r2, [r3, #0]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	b298      	uxth	r0, r3
 80023fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002478 <SSD1306_Putc+0xf8>)
 80023fc:	885a      	ldrh	r2, [r3, #2]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	b29b      	uxth	r3, r3
 8002402:	4413      	add	r3, r2
 8002404:	b29b      	uxth	r3, r3
 8002406:	79ba      	ldrb	r2, [r7, #6]
 8002408:	4619      	mov	r1, r3
 800240a:	f7ff ff45 	bl	8002298 <SSD1306_DrawPixel>
 800240e:	e014      	b.n	800243a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <SSD1306_Putc+0xf8>)
 8002412:	881a      	ldrh	r2, [r3, #0]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	b29b      	uxth	r3, r3
 8002418:	4413      	add	r3, r2
 800241a:	b298      	uxth	r0, r3
 800241c:	4b16      	ldr	r3, [pc, #88]	@ (8002478 <SSD1306_Putc+0xf8>)
 800241e:	885a      	ldrh	r2, [r3, #2]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	b29b      	uxth	r3, r3
 8002424:	4413      	add	r3, r2
 8002426:	b299      	uxth	r1, r3
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	f7ff ff2f 	bl	8002298 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	3301      	adds	r3, #1
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4293      	cmp	r3, r2
 800244a:	d3c8      	bcc.n	80023de <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3301      	adds	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	461a      	mov	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	4293      	cmp	r3, r2
 800245c:	d3ad      	bcc.n	80023ba <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <SSD1306_Putc+0xf8>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	7812      	ldrb	r2, [r2, #0]
 8002466:	4413      	add	r3, r2
 8002468:	b29a      	uxth	r2, r3
 800246a:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <SSD1306_Putc+0xf8>)
 800246c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800246e:	79fb      	ldrb	r3, [r7, #7]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2000081c 	.word	0x2000081c

0800247c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800248a:	e012      	b.n	80024b2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	79fa      	ldrb	r2, [r7, #7]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff73 	bl	8002380 <SSD1306_Putc>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d002      	beq.n	80024ac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	e008      	b.n	80024be <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e8      	bne.n	800248c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	781b      	ldrb	r3, [r3, #0]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <ssd1306_I2C_Init+0x24>)
 80024d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024d2:	e002      	b.n	80024da <ssd1306_I2C_Init+0x12>
		p--;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f9      	bne.n	80024d4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	0003d090 	.word	0x0003d090

080024f0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b0c7      	sub	sp, #284	@ 0x11c
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	4604      	mov	r4, r0
 80024f8:	4608      	mov	r0, r1
 80024fa:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80024fe:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002502:	600a      	str	r2, [r1, #0]
 8002504:	4619      	mov	r1, r3
 8002506:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800250a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800250e:	4622      	mov	r2, r4
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002516:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800251a:	4602      	mov	r2, r0
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002522:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002526:	460a      	mov	r2, r1
 8002528:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800252a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800252e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002532:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002536:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800253a:	7812      	ldrb	r2, [r2, #0]
 800253c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800253e:	2300      	movs	r3, #0
 8002540:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002544:	e015      	b.n	8002572 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002546:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800254a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800254e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	441a      	add	r2, r3
 8002556:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800255a:	3301      	adds	r3, #1
 800255c:	7811      	ldrb	r1, [r2, #0]
 800255e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002562:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002566:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002568:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800256c:	3301      	adds	r3, #1
 800256e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002572:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002576:	b29b      	uxth	r3, r3
 8002578:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800257c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d8df      	bhi.n	8002546 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800258a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b299      	uxth	r1, r3
 8002592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002596:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f107 020c 	add.w	r2, r7, #12
 80025a4:	200a      	movs	r0, #10
 80025a6:	9000      	str	r0, [sp, #0]
 80025a8:	4803      	ldr	r0, [pc, #12]	@ (80025b8 <ssd1306_I2C_WriteMulti+0xc8>)
 80025aa:	f001 fbc7 	bl	8003d3c <HAL_I2C_Master_Transmit>
//HAL_I2C_Master_Transmit_IT(&hi2c1, address, dt, count+1);
//HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, count+1);
}
 80025ae:	bf00      	nop
 80025b0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd90      	pop	{r4, r7, pc}
 80025b8:	2000026c 	.word	0x2000026c

080025bc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
 80025c6:	460b      	mov	r3, r1
 80025c8:	71bb      	strb	r3, [r7, #6]
 80025ca:	4613      	mov	r3, r2
 80025cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80025ce:	79bb      	ldrb	r3, [r7, #6]
 80025d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80025d2:	797b      	ldrb	r3, [r7, #5]
 80025d4:	737b      	strb	r3, [r7, #13]
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, 2);
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	b299      	uxth	r1, r3
 80025da:	f107 020c 	add.w	r2, r7, #12
 80025de:	230a      	movs	r3, #10
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2302      	movs	r3, #2
 80025e4:	4803      	ldr	r0, [pc, #12]	@ (80025f4 <ssd1306_I2C_Write+0x38>)
 80025e6:	f001 fba9 	bl	8003d3c <HAL_I2C_Master_Transmit>
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000026c 	.word	0x2000026c

080025f8 <SSD1306_UpdateScreen_DMA>:

void SSD1306_UpdateScreen_DMA(void) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
    if (oled_ready) {
 80025fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <SSD1306_UpdateScreen_DMA+0x3c>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d015      	beq.n	8002630 <SSD1306_UpdateScreen_DMA+0x38>
        oled_ready = 0;
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <SSD1306_UpdateScreen_DMA+0x3c>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
        static uint8_t dma_buf[1 + 1024]; // 1 control byte + 128x64 buffer
        dma_buf[0] = 0x40;
 800260a:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <SSD1306_UpdateScreen_DMA+0x40>)
 800260c:	2240      	movs	r2, #64	@ 0x40
 800260e:	701a      	strb	r2, [r3, #0]
        memcpy(&dma_buf[1], SSD1306_Buffer, 1024);
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <SSD1306_UpdateScreen_DMA+0x40>)
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <SSD1306_UpdateScreen_DMA+0x44>)
 8002614:	3301      	adds	r3, #1
 8002616:	4611      	mov	r1, r2
 8002618:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800261c:	4618      	mov	r0, r3
 800261e:	f006 fd02 	bl	8009026 <memcpy>
        HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDR, dma_buf, sizeof(dma_buf));
 8002622:	f240 4301 	movw	r3, #1025	@ 0x401
 8002626:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <SSD1306_UpdateScreen_DMA+0x40>)
 8002628:	2178      	movs	r1, #120	@ 0x78
 800262a:	4805      	ldr	r0, [pc, #20]	@ (8002640 <SSD1306_UpdateScreen_DMA+0x48>)
 800262c:	f001 fc84 	bl	8003f38 <HAL_I2C_Master_Transmit_DMA>
    }
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000075 	.word	0x20000075
 8002638:	20000824 	.word	0x20000824
 800263c:	2000041c 	.word	0x2000041c
 8002640:	2000026c 	.word	0x2000026c

08002644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800264a:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <HAL_MspInit+0x8c>)
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	4a20      	ldr	r2, [pc, #128]	@ (80026d0 <HAL_MspInit+0x8c>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6193      	str	r3, [r2, #24]
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <HAL_MspInit+0x8c>)
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_MspInit+0x8c>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a1a      	ldr	r2, [pc, #104]	@ (80026d0 <HAL_MspInit+0x8c>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800266c:	61d3      	str	r3, [r2, #28]
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_MspInit+0x8c>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2001      	movs	r0, #1
 8002680:	f000 fc41 	bl	8002f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002684:	2001      	movs	r0, #1
 8002686:	f000 fc5a 	bl	8002f3e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	2004      	movs	r0, #4
 8002690:	f000 fc39 	bl	8002f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002694:	2004      	movs	r0, #4
 8002696:	f000 fc52 	bl	8002f3e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	2005      	movs	r0, #5
 80026a0:	f000 fc31 	bl	8002f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80026a4:	2005      	movs	r0, #5
 80026a6:	f000 fc4a 	bl	8002f3e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026aa:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <HAL_MspInit+0x90>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <HAL_MspInit+0x90>)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40010000 	.word	0x40010000

080026d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a43      	ldr	r2, [pc, #268]	@ (8002800 <HAL_I2C_MspInit+0x128>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d17f      	bne.n	80027f8 <HAL_I2C_MspInit+0x120>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f8:	4b42      	ldr	r3, [pc, #264]	@ (8002804 <HAL_I2C_MspInit+0x12c>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a41      	ldr	r2, [pc, #260]	@ (8002804 <HAL_I2C_MspInit+0x12c>)
 80026fe:	f043 0308 	orr.w	r3, r3, #8
 8002702:	6193      	str	r3, [r2, #24]
 8002704:	4b3f      	ldr	r3, [pc, #252]	@ (8002804 <HAL_I2C_MspInit+0x12c>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002710:	23c0      	movs	r3, #192	@ 0xc0
 8002712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002714:	2312      	movs	r3, #18
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4619      	mov	r1, r3
 8002722:	4839      	ldr	r0, [pc, #228]	@ (8002808 <HAL_I2C_MspInit+0x130>)
 8002724:	f001 f816 	bl	8003754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002728:	4b36      	ldr	r3, [pc, #216]	@ (8002804 <HAL_I2C_MspInit+0x12c>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	4a35      	ldr	r2, [pc, #212]	@ (8002804 <HAL_I2C_MspInit+0x12c>)
 800272e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002732:	61d3      	str	r3, [r2, #28]
 8002734:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <HAL_I2C_MspInit+0x12c>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002740:	4b32      	ldr	r3, [pc, #200]	@ (800280c <HAL_I2C_MspInit+0x134>)
 8002742:	4a33      	ldr	r2, [pc, #204]	@ (8002810 <HAL_I2C_MspInit+0x138>)
 8002744:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002746:	4b31      	ldr	r3, [pc, #196]	@ (800280c <HAL_I2C_MspInit+0x134>)
 8002748:	2200      	movs	r2, #0
 800274a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800274c:	4b2f      	ldr	r3, [pc, #188]	@ (800280c <HAL_I2C_MspInit+0x134>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002752:	4b2e      	ldr	r3, [pc, #184]	@ (800280c <HAL_I2C_MspInit+0x134>)
 8002754:	2280      	movs	r2, #128	@ 0x80
 8002756:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002758:	4b2c      	ldr	r3, [pc, #176]	@ (800280c <HAL_I2C_MspInit+0x134>)
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800275e:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <HAL_I2C_MspInit+0x134>)
 8002760:	2200      	movs	r2, #0
 8002762:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002764:	4b29      	ldr	r3, [pc, #164]	@ (800280c <HAL_I2C_MspInit+0x134>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800276a:	4b28      	ldr	r3, [pc, #160]	@ (800280c <HAL_I2C_MspInit+0x134>)
 800276c:	2200      	movs	r2, #0
 800276e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002770:	4826      	ldr	r0, [pc, #152]	@ (800280c <HAL_I2C_MspInit+0x134>)
 8002772:	f000 fbff 	bl	8002f74 <HAL_DMA_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 800277c:	f7ff f9be 	bl	8001afc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a22      	ldr	r2, [pc, #136]	@ (800280c <HAL_I2C_MspInit+0x134>)
 8002784:	639a      	str	r2, [r3, #56]	@ 0x38
 8002786:	4a21      	ldr	r2, [pc, #132]	@ (800280c <HAL_I2C_MspInit+0x134>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800278c:	4b21      	ldr	r3, [pc, #132]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 800278e:	4a22      	ldr	r2, [pc, #136]	@ (8002818 <HAL_I2C_MspInit+0x140>)
 8002790:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002792:	4b20      	ldr	r3, [pc, #128]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 8002794:	2210      	movs	r2, #16
 8002796:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002798:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800279e:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 80027a0:	2280      	movs	r2, #128	@ 0x80
 80027a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80027b0:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027b6:	4b17      	ldr	r3, [pc, #92]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80027bc:	4815      	ldr	r0, [pc, #84]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 80027be:	f000 fbd9 	bl	8002f74 <HAL_DMA_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 80027c8:	f7ff f998 	bl	8001afc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a11      	ldr	r2, [pc, #68]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 80027d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80027d2:	4a10      	ldr	r2, [pc, #64]	@ (8002814 <HAL_I2C_MspInit+0x13c>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80027d8:	2200      	movs	r2, #0
 80027da:	2100      	movs	r1, #0
 80027dc:	201f      	movs	r0, #31
 80027de:	f000 fb92 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027e2:	201f      	movs	r0, #31
 80027e4:	f000 fbab 	bl	8002f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	2020      	movs	r0, #32
 80027ee:	f000 fb8a 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80027f2:	2020      	movs	r0, #32
 80027f4:	f000 fba3 	bl	8002f3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027f8:	bf00      	nop
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40005400 	.word	0x40005400
 8002804:	40021000 	.word	0x40021000
 8002808:	40010c00 	.word	0x40010c00
 800280c:	200002c0 	.word	0x200002c0
 8002810:	40020080 	.word	0x40020080
 8002814:	20000304 	.word	0x20000304
 8002818:	4002006c 	.word	0x4002006c

0800281c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a19      	ldr	r2, [pc, #100]	@ (8002890 <HAL_TIM_Base_MspInit+0x74>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d12b      	bne.n	8002886 <HAL_TIM_Base_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800282e:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <HAL_TIM_Base_MspInit+0x78>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	4a18      	ldr	r2, [pc, #96]	@ (8002894 <HAL_TIM_Base_MspInit+0x78>)
 8002834:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002838:	6193      	str	r3, [r2, #24]
 800283a:	4b16      	ldr	r3, [pc, #88]	@ (8002894 <HAL_TIM_Base_MspInit+0x78>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2100      	movs	r1, #0
 800284a:	2018      	movs	r0, #24
 800284c:	f000 fb5b 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002850:	2018      	movs	r0, #24
 8002852:	f000 fb74 	bl	8002f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	2019      	movs	r0, #25
 800285c:	f000 fb53 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002860:	2019      	movs	r0, #25
 8002862:	f000 fb6c 	bl	8002f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	201a      	movs	r0, #26
 800286c:	f000 fb4b 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002870:	201a      	movs	r0, #26
 8002872:	f000 fb64 	bl	8002f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	201b      	movs	r0, #27
 800287c:	f000 fb43 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002880:	201b      	movs	r0, #27
 8002882:	f000 fb5c 	bl	8002f3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40021000 	.word	0x40021000

08002898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0310 	add.w	r3, r7, #16
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a10      	ldr	r2, [pc, #64]	@ (80028f4 <HAL_TIM_MspPostInit+0x5c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d118      	bne.n	80028ea <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <HAL_TIM_MspPostInit+0x60>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4a0e      	ldr	r2, [pc, #56]	@ (80028f8 <HAL_TIM_MspPostInit+0x60>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	6193      	str	r3, [r2, #24]
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <HAL_TIM_MspPostInit+0x60>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2302      	movs	r3, #2
 80028dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	4619      	mov	r1, r3
 80028e4:	4805      	ldr	r0, [pc, #20]	@ (80028fc <HAL_TIM_MspPostInit+0x64>)
 80028e6:	f000 ff35 	bl	8003754 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028ea:	bf00      	nop
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010800 	.word	0x40010800

08002900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <NMI_Handler+0x4>

08002908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <HardFault_Handler+0x4>

08002910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <MemManage_Handler+0x4>

08002918 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <BusFault_Handler+0x4>

08002920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <UsageFault_Handler+0x4>

08002928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002950:	f000 f9e6 	bl	8002d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800295c:	f004 f994 	bl	8006c88 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002968:	f000 fd76 	bl	8003458 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}

08002970 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <DMA1_Channel6_IRQHandler+0x10>)
 8002982:	f000 fc29 	bl	80031d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000304 	.word	0x20000304

08002990 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <DMA1_Channel7_IRQHandler+0x10>)
 8002996:	f000 fc1f 	bl	80031d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200002c0 	.word	0x200002c0

080029a4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <TIM1_BRK_IRQHandler+0x10>)
 80029aa:	f004 ff1d 	bl	80077e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000348 	.word	0x20000348

080029b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <TIM1_UP_IRQHandler+0x10>)
 80029be:	f004 ff13 	bl	80077e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000348 	.word	0x20000348

080029cc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <TIM1_TRG_COM_IRQHandler+0x10>)
 80029d2:	f004 ff09 	bl	80077e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000348 	.word	0x20000348

080029e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <TIM1_CC_IRQHandler+0x10>)
 80029e6:	f004 feff 	bl	80077e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000348 	.word	0x20000348

080029f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <I2C1_EV_IRQHandler+0x10>)
 80029fa:	f001 ff6f 	bl	80048dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000026c 	.word	0x2000026c

08002a08 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <I2C1_ER_IRQHandler+0x10>)
 8002a0e:	f002 f8d6 	bl	8004bbe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000026c 	.word	0x2000026c

08002a1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a16      	ldr	r2, [pc, #88]	@ (8002a84 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d125      	bne.n	8002a7a <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		MPU6050_Read();
 8002a2e:	f7ff f96d 	bl	8001d0c <MPU6050_Read>
		if(roll>40||roll<-40)
 8002a32:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4915      	ldr	r1, [pc, #84]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fb3f 	bl	80010bc <__aeabi_fcmpgt>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d108      	bne.n	8002a56 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8002a44:	4b10      	ldr	r3, [pc, #64]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4911      	ldr	r1, [pc, #68]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fb18 	bl	8001080 <__aeabi_fcmplt>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_TIM_PeriodElapsedCallback+0x44>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002a56:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	635a      	str	r2, [r3, #52]	@ 0x34


//		printf("Angle: %.4f\t\tCommand: %.4f \n", roll, command);
	}

}
 8002a5e:	e00c      	b.n	8002a7a <HAL_TIM_PeriodElapsedCallback+0x5e>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PID_Step(roll));
 8002a60:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fb53 	bl	8001110 <PID_Step>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a09      	ldr	r2, [pc, #36]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a6e:	6814      	ldr	r4, [r2, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe fb2d 	bl	80010d0 <__aeabi_f2uiz>
 8002a76:	4603      	mov	r3, r0
 8002a78:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd90      	pop	{r4, r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	20000410 	.word	0x20000410
 8002a8c:	42200000 	.word	0x42200000
 8002a90:	c2200000 	.word	0xc2200000
 8002a94:	20000348 	.word	0x20000348

08002a98 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a05      	ldr	r2, [pc, #20]	@ (8002abc <HAL_I2C_MemRxCpltCallback+0x24>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d104      	bne.n	8002ab4 <HAL_I2C_MemRxCpltCallback+0x1c>
	{
		MPU_I2C_Ready = 1;
 8002aaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <HAL_I2C_MemRxCpltCallback+0x28>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
		MPU6050_Data_Update();
 8002ab0:	f7ff f95a 	bl	8001d68 <MPU6050_Data_Update>
	}

}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40005400 	.word	0x40005400
 8002ac0:	20000074 	.word	0x20000074

08002ac4 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c1.Instance) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d102      	bne.n	8002ade <HAL_I2C_MasterTxCpltCallback+0x1a>
    	oled_ready = 1;
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <HAL_I2C_MasterTxCpltCallback+0x28>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
    }
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	2000026c 	.word	0x2000026c
 8002aec:	20000075 	.word	0x20000075

08002af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return 1;
 8002af4:	2301      	movs	r3, #1
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <_kill>:

int _kill(int pid, int sig)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b08:	f006 fa52 	bl	8008fb0 <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2216      	movs	r2, #22
 8002b10:	601a      	str	r2, [r3, #0]
  return -1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <_exit>:

void _exit (int status)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b26:	f04f 31ff 	mov.w	r1, #4294967295
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffe7 	bl	8002afe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <_exit+0x12>

08002b34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e00a      	b.n	8002b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b46:	f3af 8000 	nop.w
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	60ba      	str	r2, [r7, #8]
 8002b52:	b2ca      	uxtb	r2, r1
 8002b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	dbf0      	blt.n	8002b46 <_read+0x12>
  }

  return len;
 8002b64:	687b      	ldr	r3, [r7, #4]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b94:	605a      	str	r2, [r3, #4]
  return 0;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <_isatty>:

int _isatty(int file)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002baa:	2301      	movs	r3, #1
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
	...

08002bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd8:	4a14      	ldr	r2, [pc, #80]	@ (8002c2c <_sbrk+0x5c>)
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <_sbrk+0x60>)
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002be4:	4b13      	ldr	r3, [pc, #76]	@ (8002c34 <_sbrk+0x64>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bec:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <_sbrk+0x64>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	@ (8002c38 <_sbrk+0x68>)
 8002bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d207      	bcs.n	8002c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c00:	f006 f9d6 	bl	8008fb0 <__errno>
 8002c04:	4603      	mov	r3, r0
 8002c06:	220c      	movs	r2, #12
 8002c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0e:	e009      	b.n	8002c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c10:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c16:	4b07      	ldr	r3, [pc, #28]	@ (8002c34 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a05      	ldr	r2, [pc, #20]	@ (8002c34 <_sbrk+0x64>)
 8002c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20005000 	.word	0x20005000
 8002c30:	00000400 	.word	0x00000400
 8002c34:	20000c28 	.word	0x20000c28
 8002c38:	20000da0 	.word	0x20000da0

08002c3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c48:	f7ff fff8 	bl	8002c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c4c:	480b      	ldr	r0, [pc, #44]	@ (8002c7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c4e:	490c      	ldr	r1, [pc, #48]	@ (8002c80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c50:	4a0c      	ldr	r2, [pc, #48]	@ (8002c84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c54:	e002      	b.n	8002c5c <LoopCopyDataInit>

08002c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5a:	3304      	adds	r3, #4

08002c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c60:	d3f9      	bcc.n	8002c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c62:	4a09      	ldr	r2, [pc, #36]	@ (8002c88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c64:	4c09      	ldr	r4, [pc, #36]	@ (8002c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c68:	e001      	b.n	8002c6e <LoopFillZerobss>

08002c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c6c:	3204      	adds	r2, #4

08002c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c70:	d3fb      	bcc.n	8002c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c72:	f006 f9a3 	bl	8008fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c76:	f7fe fd63 	bl	8001740 <main>
  bx lr
 8002c7a:	4770      	bx	lr
  ldr r0, =_sdata
 8002c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c80:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8002c84:	0800c350 	.word	0x0800c350
  ldr r2, =_sbss
 8002c88:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002c8c:	20000d9c 	.word	0x20000d9c

08002c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c90:	e7fe      	b.n	8002c90 <ADC1_2_IRQHandler>
	...

08002c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c98:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <HAL_Init+0x28>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a07      	ldr	r2, [pc, #28]	@ (8002cbc <HAL_Init+0x28>)
 8002c9e:	f043 0310 	orr.w	r3, r3, #16
 8002ca2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	f000 f923 	bl	8002ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002caa:	200f      	movs	r0, #15
 8002cac:	f000 f808 	bl	8002cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb0:	f7ff fcc8 	bl	8002644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc8:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <HAL_InitTick+0x54>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <HAL_InitTick+0x58>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f93b 	bl	8002f5a <HAL_SYSTICK_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00e      	b.n	8002d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0f      	cmp	r3, #15
 8002cf2:	d80a      	bhi.n	8002d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f000 f903 	bl	8002f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d00:	4a06      	ldr	r2, [pc, #24]	@ (8002d1c <HAL_InitTick+0x5c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000078 	.word	0x20000078
 8002d18:	20000080 	.word	0x20000080
 8002d1c:	2000007c 	.word	0x2000007c

08002d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <HAL_IncTick+0x1c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_IncTick+0x20>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	4a03      	ldr	r2, [pc, #12]	@ (8002d40 <HAL_IncTick+0x20>)
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000080 	.word	0x20000080
 8002d40:	20000c2c 	.word	0x20000c2c

08002d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b02      	ldr	r3, [pc, #8]	@ (8002d54 <HAL_GetTick+0x10>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	20000c2c 	.word	0x20000c2c

08002d58 <__NVIC_SetPriorityGrouping>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8a:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	60d3      	str	r3, [r2, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_GetPriorityGrouping>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da4:	4b04      	ldr	r3, [pc, #16]	@ (8002db8 <__NVIC_GetPriorityGrouping+0x18>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0307 	and.w	r3, r3, #7
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_EnableIRQ>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db0b      	blt.n	8002de6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4906      	ldr	r1, [pc, #24]	@ (8002df0 <__NVIC_EnableIRQ+0x34>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2001      	movs	r0, #1
 8002dde:	fa00 f202 	lsl.w	r2, r0, r2
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100

08002df4 <__NVIC_SetPriority>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	db0a      	blt.n	8002e1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	490c      	ldr	r1, [pc, #48]	@ (8002e40 <__NVIC_SetPriority+0x4c>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	440b      	add	r3, r1
 8002e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e1c:	e00a      	b.n	8002e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4908      	ldr	r1, [pc, #32]	@ (8002e44 <__NVIC_SetPriority+0x50>)
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	3b04      	subs	r3, #4
 8002e2c:	0112      	lsls	r2, r2, #4
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	440b      	add	r3, r1
 8002e32:	761a      	strb	r2, [r3, #24]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <NVIC_EncodePriority>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	@ 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f1c3 0307 	rsb	r3, r3, #7
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	bf28      	it	cs
 8002e66:	2304      	movcs	r3, #4
 8002e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d902      	bls.n	8002e78 <NVIC_EncodePriority+0x30>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3b03      	subs	r3, #3
 8002e76:	e000      	b.n	8002e7a <NVIC_EncodePriority+0x32>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e90:	f04f 31ff 	mov.w	r1, #4294967295
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	43d9      	mvns	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	4313      	orrs	r3, r2
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3724      	adds	r7, #36	@ 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <SysTick_Config>:
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ebc:	d301      	bcc.n	8002ec2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00f      	b.n	8002ee2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <SysTick_Config+0x40>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eca:	210f      	movs	r1, #15
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f7ff ff90 	bl	8002df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <SysTick_Config+0x40>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eda:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <SysTick_Config+0x40>)
 8002edc:	2207      	movs	r2, #7
 8002ede:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	e000e010 	.word	0xe000e010

08002ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff2d 	bl	8002d58 <__NVIC_SetPriorityGrouping>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f18:	f7ff ff42 	bl	8002da0 <__NVIC_GetPriorityGrouping>
 8002f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f7ff ff90 	bl	8002e48 <NVIC_EncodePriority>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff5f 	bl	8002df4 <__NVIC_SetPriority>
}
 8002f36:	bf00      	nop
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff35 	bl	8002dbc <__NVIC_EnableIRQ>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffa2 	bl	8002eac <SysTick_Config>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e043      	b.n	8003012 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4b22      	ldr	r3, [pc, #136]	@ (800301c <HAL_DMA_Init+0xa8>)
 8002f92:	4413      	add	r3, r2
 8002f94:	4a22      	ldr	r2, [pc, #136]	@ (8003020 <HAL_DMA_Init+0xac>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	009a      	lsls	r2, r3, #2
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <HAL_DMA_Init+0xb0>)
 8002fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fbe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002fc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	bffdfff8 	.word	0xbffdfff8
 8003020:	cccccccd 	.word	0xcccccccd
 8003024:	40020000 	.word	0x40020000

08003028 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_DMA_Start_IT+0x20>
 8003044:	2302      	movs	r3, #2
 8003046:	e04b      	b.n	80030e0 <HAL_DMA_Start_IT+0xb8>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d13a      	bne.n	80030d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f9bc 	bl	80033fe <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 020e 	orr.w	r2, r2, #14
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e00f      	b.n	80030c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0204 	bic.w	r2, r2, #4
 80030ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 020a 	orr.w	r2, r2, #10
 80030be:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e005      	b.n	80030de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d005      	beq.n	800310c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2204      	movs	r2, #4
 8003104:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
 800310a:	e051      	b.n	80031b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 020e 	bic.w	r2, r2, #14
 800311a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a22      	ldr	r2, [pc, #136]	@ (80031bc <HAL_DMA_Abort_IT+0xd4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d029      	beq.n	800318a <HAL_DMA_Abort_IT+0xa2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <HAL_DMA_Abort_IT+0xd8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d022      	beq.n	8003186 <HAL_DMA_Abort_IT+0x9e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1f      	ldr	r2, [pc, #124]	@ (80031c4 <HAL_DMA_Abort_IT+0xdc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01a      	beq.n	8003180 <HAL_DMA_Abort_IT+0x98>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1e      	ldr	r2, [pc, #120]	@ (80031c8 <HAL_DMA_Abort_IT+0xe0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d012      	beq.n	800317a <HAL_DMA_Abort_IT+0x92>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1c      	ldr	r2, [pc, #112]	@ (80031cc <HAL_DMA_Abort_IT+0xe4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00a      	beq.n	8003174 <HAL_DMA_Abort_IT+0x8c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <HAL_DMA_Abort_IT+0xe8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d102      	bne.n	800316e <HAL_DMA_Abort_IT+0x86>
 8003168:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800316c:	e00e      	b.n	800318c <HAL_DMA_Abort_IT+0xa4>
 800316e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003172:	e00b      	b.n	800318c <HAL_DMA_Abort_IT+0xa4>
 8003174:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003178:	e008      	b.n	800318c <HAL_DMA_Abort_IT+0xa4>
 800317a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800317e:	e005      	b.n	800318c <HAL_DMA_Abort_IT+0xa4>
 8003180:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003184:	e002      	b.n	800318c <HAL_DMA_Abort_IT+0xa4>
 8003186:	2310      	movs	r3, #16
 8003188:	e000      	b.n	800318c <HAL_DMA_Abort_IT+0xa4>
 800318a:	2301      	movs	r3, #1
 800318c:	4a11      	ldr	r2, [pc, #68]	@ (80031d4 <HAL_DMA_Abort_IT+0xec>)
 800318e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
    } 
  }
  return status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40020008 	.word	0x40020008
 80031c0:	4002001c 	.word	0x4002001c
 80031c4:	40020030 	.word	0x40020030
 80031c8:	40020044 	.word	0x40020044
 80031cc:	40020058 	.word	0x40020058
 80031d0:	4002006c 	.word	0x4002006c
 80031d4:	40020000 	.word	0x40020000

080031d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	2204      	movs	r2, #4
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d04f      	beq.n	80032a0 <HAL_DMA_IRQHandler+0xc8>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b00      	cmp	r3, #0
 8003208:	d04a      	beq.n	80032a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d107      	bne.n	8003228 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0204 	bic.w	r2, r2, #4
 8003226:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a66      	ldr	r2, [pc, #408]	@ (80033c8 <HAL_DMA_IRQHandler+0x1f0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d029      	beq.n	8003286 <HAL_DMA_IRQHandler+0xae>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a65      	ldr	r2, [pc, #404]	@ (80033cc <HAL_DMA_IRQHandler+0x1f4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d022      	beq.n	8003282 <HAL_DMA_IRQHandler+0xaa>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a63      	ldr	r2, [pc, #396]	@ (80033d0 <HAL_DMA_IRQHandler+0x1f8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01a      	beq.n	800327c <HAL_DMA_IRQHandler+0xa4>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a62      	ldr	r2, [pc, #392]	@ (80033d4 <HAL_DMA_IRQHandler+0x1fc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d012      	beq.n	8003276 <HAL_DMA_IRQHandler+0x9e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a60      	ldr	r2, [pc, #384]	@ (80033d8 <HAL_DMA_IRQHandler+0x200>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00a      	beq.n	8003270 <HAL_DMA_IRQHandler+0x98>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a5f      	ldr	r2, [pc, #380]	@ (80033dc <HAL_DMA_IRQHandler+0x204>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d102      	bne.n	800326a <HAL_DMA_IRQHandler+0x92>
 8003264:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003268:	e00e      	b.n	8003288 <HAL_DMA_IRQHandler+0xb0>
 800326a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800326e:	e00b      	b.n	8003288 <HAL_DMA_IRQHandler+0xb0>
 8003270:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003274:	e008      	b.n	8003288 <HAL_DMA_IRQHandler+0xb0>
 8003276:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800327a:	e005      	b.n	8003288 <HAL_DMA_IRQHandler+0xb0>
 800327c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003280:	e002      	b.n	8003288 <HAL_DMA_IRQHandler+0xb0>
 8003282:	2340      	movs	r3, #64	@ 0x40
 8003284:	e000      	b.n	8003288 <HAL_DMA_IRQHandler+0xb0>
 8003286:	2304      	movs	r3, #4
 8003288:	4a55      	ldr	r2, [pc, #340]	@ (80033e0 <HAL_DMA_IRQHandler+0x208>)
 800328a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8094 	beq.w	80033be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800329e:	e08e      	b.n	80033be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	2202      	movs	r2, #2
 80032a6:	409a      	lsls	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d056      	beq.n	800335e <HAL_DMA_IRQHandler+0x186>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d051      	beq.n	800335e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10b      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 020a 	bic.w	r2, r2, #10
 80032d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a38      	ldr	r2, [pc, #224]	@ (80033c8 <HAL_DMA_IRQHandler+0x1f0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d029      	beq.n	800333e <HAL_DMA_IRQHandler+0x166>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a37      	ldr	r2, [pc, #220]	@ (80033cc <HAL_DMA_IRQHandler+0x1f4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d022      	beq.n	800333a <HAL_DMA_IRQHandler+0x162>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a35      	ldr	r2, [pc, #212]	@ (80033d0 <HAL_DMA_IRQHandler+0x1f8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01a      	beq.n	8003334 <HAL_DMA_IRQHandler+0x15c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a34      	ldr	r2, [pc, #208]	@ (80033d4 <HAL_DMA_IRQHandler+0x1fc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d012      	beq.n	800332e <HAL_DMA_IRQHandler+0x156>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a32      	ldr	r2, [pc, #200]	@ (80033d8 <HAL_DMA_IRQHandler+0x200>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00a      	beq.n	8003328 <HAL_DMA_IRQHandler+0x150>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a31      	ldr	r2, [pc, #196]	@ (80033dc <HAL_DMA_IRQHandler+0x204>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d102      	bne.n	8003322 <HAL_DMA_IRQHandler+0x14a>
 800331c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003320:	e00e      	b.n	8003340 <HAL_DMA_IRQHandler+0x168>
 8003322:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003326:	e00b      	b.n	8003340 <HAL_DMA_IRQHandler+0x168>
 8003328:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800332c:	e008      	b.n	8003340 <HAL_DMA_IRQHandler+0x168>
 800332e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003332:	e005      	b.n	8003340 <HAL_DMA_IRQHandler+0x168>
 8003334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003338:	e002      	b.n	8003340 <HAL_DMA_IRQHandler+0x168>
 800333a:	2320      	movs	r3, #32
 800333c:	e000      	b.n	8003340 <HAL_DMA_IRQHandler+0x168>
 800333e:	2302      	movs	r3, #2
 8003340:	4a27      	ldr	r2, [pc, #156]	@ (80033e0 <HAL_DMA_IRQHandler+0x208>)
 8003342:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	d034      	beq.n	80033be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800335c:	e02f      	b.n	80033be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	2208      	movs	r2, #8
 8003364:	409a      	lsls	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d028      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x1e8>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d023      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 020e 	bic.w	r2, r2, #14
 8003386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003390:	2101      	movs	r1, #1
 8003392:	fa01 f202 	lsl.w	r2, r1, r2
 8003396:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
    }
  }
  return;
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
}
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40020008 	.word	0x40020008
 80033cc:	4002001c 	.word	0x4002001c
 80033d0:	40020030 	.word	0x40020030
 80033d4:	40020044 	.word	0x40020044
 80033d8:	40020058 	.word	0x40020058
 80033dc:	4002006c 	.word	0x4002006c
 80033e0:	40020000 	.word	0x40020000

080033e4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033f2:	b2db      	uxtb	r3, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033fe:	b480      	push	{r7}
 8003400:	b085      	sub	sp, #20
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b10      	cmp	r3, #16
 800342a:	d108      	bne.n	800343e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800343c:	e007      	b.n	800344e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	60da      	str	r2, [r3, #12]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003462:	4b6b      	ldr	r3, [pc, #428]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_FLASH_IRQHandler+0x22>
 800346e:	4b68      	ldr	r3, [pc, #416]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00e      	beq.n	8003498 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800347a:	4b66      	ldr	r3, [pc, #408]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8003480:	4b64      	ldr	r3, [pc, #400]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 8003482:	f04f 32ff 	mov.w	r2, #4294967295
 8003486:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8003488:	f000 f8f4 	bl	8003674 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f8cc 	bl	800362a <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003492:	4b60      	ldr	r3, [pc, #384]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003498:	4b5d      	ldr	r3, [pc, #372]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80a0 	beq.w	80035e6 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80034a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 80034a8:	2220      	movs	r2, #32
 80034aa:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80034ac:	4b59      	ldr	r3, [pc, #356]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8097 	beq.w	80035e6 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80034b8:	4b56      	ldr	r3, [pc, #344]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d12d      	bne.n	800351e <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80034c2:	4b54      	ldr	r3, [pc, #336]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	4a52      	ldr	r2, [pc, #328]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80034ca:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80034cc:	4b51      	ldr	r3, [pc, #324]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80034d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f89c 	bl	8003618 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80034e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034e8:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80034ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80034f0:	4b47      	ldr	r3, [pc, #284]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	4a46      	ldr	r2, [pc, #280]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 80034f6:	f023 0302 	bic.w	r3, r3, #2
 80034fa:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f909 	bl	8003714 <FLASH_PageErase>
 8003502:	e070      	b.n	80035e6 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8003504:	f04f 33ff 	mov.w	r3, #4294967295
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	4a42      	ldr	r2, [pc, #264]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003510:	4b40      	ldr	r3, [pc, #256]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f87e 	bl	8003618 <HAL_FLASH_EndOfOperationCallback>
 800351c:	e063      	b.n	80035e6 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800351e:	4b3d      	ldr	r3, [pc, #244]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d10c      	bne.n	8003542 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003528:	4b39      	ldr	r3, [pc, #228]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	4a38      	ldr	r2, [pc, #224]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 800352e:	f023 0304 	bic.w	r3, r3, #4
 8003532:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8003534:	2000      	movs	r0, #0
 8003536:	f000 f86f 	bl	8003618 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800353a:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e051      	b.n	80035e6 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8003542:	4b34      	ldr	r3, [pc, #208]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	4a32      	ldr	r2, [pc, #200]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 800354a:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 800354c:	4b31      	ldr	r3, [pc, #196]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d024      	beq.n	800359e <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8003554:	4b2f      	ldr	r3, [pc, #188]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	3302      	adds	r3, #2
 800355a:	4a2e      	ldr	r2, [pc, #184]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 800355c:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 800355e:	4b2d      	ldr	r3, [pc, #180]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8003564:	4b2b      	ldr	r3, [pc, #172]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 8003566:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	0c02      	lsrs	r2, r0, #16
 8003574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003578:	0c0b      	lsrs	r3, r1, #16
 800357a:	4926      	ldr	r1, [pc, #152]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 800357c:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003580:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	4a22      	ldr	r2, [pc, #136]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 800358c:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 800358e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003592:	b293      	uxth	r3, r2
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f850 	bl	800363c <FLASH_Program_HalfWord>
 800359c:	e023      	b.n	80035e6 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800359e:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d105      	bne.n	80035b4 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80035a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 f833 	bl	8003618 <HAL_FLASH_EndOfOperationCallback>
 80035b2:	e011      	b.n	80035d8 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80035b4:	4b17      	ldr	r3, [pc, #92]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d106      	bne.n	80035cc <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80035be:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	3b02      	subs	r3, #2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 f827 	bl	8003618 <HAL_FLASH_EndOfOperationCallback>
 80035ca:	e005      	b.n	80035d8 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	3b06      	subs	r3, #6
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f820 	bl	8003618 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80035d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80035da:	f04f 32ff 	mov.w	r2, #4294967295
 80035de:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80035e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_FLASH_IRQHandler+0x1bc>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80035f0:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	4a06      	ldr	r2, [pc, #24]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 80035f6:	f023 0307 	bic.w	r3, r3, #7
 80035fa:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80035fc:	4b04      	ldr	r3, [pc, #16]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	4a03      	ldr	r2, [pc, #12]	@ (8003610 <HAL_FLASH_IRQHandler+0x1b8>)
 8003602:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 8003606:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40022000 	.word	0x40022000
 8003614:	20000c30 	.word	0x20000c30

08003618 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003648:	4b08      	ldr	r3, [pc, #32]	@ (800366c <FLASH_Program_HalfWord+0x30>)
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800364e:	4b08      	ldr	r3, [pc, #32]	@ (8003670 <FLASH_Program_HalfWord+0x34>)
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	4a07      	ldr	r2, [pc, #28]	@ (8003670 <FLASH_Program_HalfWord+0x34>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	887a      	ldrh	r2, [r7, #2]
 800365e:	801a      	strh	r2, [r3, #0]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000c30 	.word	0x20000c30
 8003670:	40022000 	.word	0x40022000

08003674 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800367e:	4b23      	ldr	r3, [pc, #140]	@ (800370c <FLASH_SetErrorCode+0x98>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800368a:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <FLASH_SetErrorCode+0x9c>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	4a1f      	ldr	r2, [pc, #124]	@ (8003710 <FLASH_SetErrorCode+0x9c>)
 8003694:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f043 0310 	orr.w	r3, r3, #16
 800369c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800369e:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <FLASH_SetErrorCode+0x98>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80036aa:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <FLASH_SetErrorCode+0x9c>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <FLASH_SetErrorCode+0x9c>)
 80036b4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80036be:	4b13      	ldr	r3, [pc, #76]	@ (800370c <FLASH_SetErrorCode+0x98>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80036ca:	4b11      	ldr	r3, [pc, #68]	@ (8003710 <FLASH_SetErrorCode+0x9c>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f043 0304 	orr.w	r3, r3, #4
 80036d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003710 <FLASH_SetErrorCode+0x9c>)
 80036d4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80036d6:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <FLASH_SetErrorCode+0x98>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4a0c      	ldr	r2, [pc, #48]	@ (800370c <FLASH_SetErrorCode+0x98>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f240 1201 	movw	r2, #257	@ 0x101
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d106      	bne.n	80036fa <FLASH_SetErrorCode+0x86>
 80036ec:	4b07      	ldr	r3, [pc, #28]	@ (800370c <FLASH_SetErrorCode+0x98>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4a06      	ldr	r2, [pc, #24]	@ (800370c <FLASH_SetErrorCode+0x98>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	61d3      	str	r3, [r2, #28]
}  
 80036f8:	e002      	b.n	8003700 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80036fa:	4a04      	ldr	r2, [pc, #16]	@ (800370c <FLASH_SetErrorCode+0x98>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	60d3      	str	r3, [r2, #12]
}  
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40022000 	.word	0x40022000
 8003710:	20000c30 	.word	0x20000c30

08003714 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <FLASH_PageErase+0x38>)
 800371e:	2200      	movs	r2, #0
 8003720:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003722:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <FLASH_PageErase+0x3c>)
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	4a0a      	ldr	r2, [pc, #40]	@ (8003750 <FLASH_PageErase+0x3c>)
 8003728:	f043 0302 	orr.w	r3, r3, #2
 800372c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800372e:	4a08      	ldr	r2, [pc, #32]	@ (8003750 <FLASH_PageErase+0x3c>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003734:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <FLASH_PageErase+0x3c>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	4a05      	ldr	r2, [pc, #20]	@ (8003750 <FLASH_PageErase+0x3c>)
 800373a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800373e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000c30 	.word	0x20000c30
 8003750:	40022000 	.word	0x40022000

08003754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003754:	b480      	push	{r7}
 8003756:	b08b      	sub	sp, #44	@ 0x2c
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003766:	e169      	b.n	8003a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003768:	2201      	movs	r2, #1
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	429a      	cmp	r2, r3
 8003782:	f040 8158 	bne.w	8003a36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4a9a      	ldr	r2, [pc, #616]	@ (80039f4 <HAL_GPIO_Init+0x2a0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d05e      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 8003790:	4a98      	ldr	r2, [pc, #608]	@ (80039f4 <HAL_GPIO_Init+0x2a0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d875      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 8003796:	4a98      	ldr	r2, [pc, #608]	@ (80039f8 <HAL_GPIO_Init+0x2a4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d058      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 800379c:	4a96      	ldr	r2, [pc, #600]	@ (80039f8 <HAL_GPIO_Init+0x2a4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d86f      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037a2:	4a96      	ldr	r2, [pc, #600]	@ (80039fc <HAL_GPIO_Init+0x2a8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d052      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 80037a8:	4a94      	ldr	r2, [pc, #592]	@ (80039fc <HAL_GPIO_Init+0x2a8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d869      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037ae:	4a94      	ldr	r2, [pc, #592]	@ (8003a00 <HAL_GPIO_Init+0x2ac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d04c      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 80037b4:	4a92      	ldr	r2, [pc, #584]	@ (8003a00 <HAL_GPIO_Init+0x2ac>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d863      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037ba:	4a92      	ldr	r2, [pc, #584]	@ (8003a04 <HAL_GPIO_Init+0x2b0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d046      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 80037c0:	4a90      	ldr	r2, [pc, #576]	@ (8003a04 <HAL_GPIO_Init+0x2b0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d85d      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037c6:	2b12      	cmp	r3, #18
 80037c8:	d82a      	bhi.n	8003820 <HAL_GPIO_Init+0xcc>
 80037ca:	2b12      	cmp	r3, #18
 80037cc:	d859      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037ce:	a201      	add	r2, pc, #4	@ (adr r2, 80037d4 <HAL_GPIO_Init+0x80>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	0800384f 	.word	0x0800384f
 80037d8:	08003829 	.word	0x08003829
 80037dc:	0800383b 	.word	0x0800383b
 80037e0:	0800387d 	.word	0x0800387d
 80037e4:	08003883 	.word	0x08003883
 80037e8:	08003883 	.word	0x08003883
 80037ec:	08003883 	.word	0x08003883
 80037f0:	08003883 	.word	0x08003883
 80037f4:	08003883 	.word	0x08003883
 80037f8:	08003883 	.word	0x08003883
 80037fc:	08003883 	.word	0x08003883
 8003800:	08003883 	.word	0x08003883
 8003804:	08003883 	.word	0x08003883
 8003808:	08003883 	.word	0x08003883
 800380c:	08003883 	.word	0x08003883
 8003810:	08003883 	.word	0x08003883
 8003814:	08003883 	.word	0x08003883
 8003818:	08003831 	.word	0x08003831
 800381c:	08003845 	.word	0x08003845
 8003820:	4a79      	ldr	r2, [pc, #484]	@ (8003a08 <HAL_GPIO_Init+0x2b4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003826:	e02c      	b.n	8003882 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	623b      	str	r3, [r7, #32]
          break;
 800382e:	e029      	b.n	8003884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	3304      	adds	r3, #4
 8003836:	623b      	str	r3, [r7, #32]
          break;
 8003838:	e024      	b.n	8003884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	3308      	adds	r3, #8
 8003840:	623b      	str	r3, [r7, #32]
          break;
 8003842:	e01f      	b.n	8003884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	330c      	adds	r3, #12
 800384a:	623b      	str	r3, [r7, #32]
          break;
 800384c:	e01a      	b.n	8003884 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003856:	2304      	movs	r3, #4
 8003858:	623b      	str	r3, [r7, #32]
          break;
 800385a:	e013      	b.n	8003884 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003864:	2308      	movs	r3, #8
 8003866:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	611a      	str	r2, [r3, #16]
          break;
 800386e:	e009      	b.n	8003884 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003870:	2308      	movs	r3, #8
 8003872:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	615a      	str	r2, [r3, #20]
          break;
 800387a:	e003      	b.n	8003884 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800387c:	2300      	movs	r3, #0
 800387e:	623b      	str	r3, [r7, #32]
          break;
 8003880:	e000      	b.n	8003884 <HAL_GPIO_Init+0x130>
          break;
 8003882:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2bff      	cmp	r3, #255	@ 0xff
 8003888:	d801      	bhi.n	800388e <HAL_GPIO_Init+0x13a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	e001      	b.n	8003892 <HAL_GPIO_Init+0x13e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3304      	adds	r3, #4
 8003892:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2bff      	cmp	r3, #255	@ 0xff
 8003898:	d802      	bhi.n	80038a0 <HAL_GPIO_Init+0x14c>
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	e002      	b.n	80038a6 <HAL_GPIO_Init+0x152>
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	3b08      	subs	r3, #8
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	210f      	movs	r1, #15
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	401a      	ands	r2, r3
 80038b8:	6a39      	ldr	r1, [r7, #32]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	431a      	orrs	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80b1 	beq.w	8003a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038d4:	4b4d      	ldr	r3, [pc, #308]	@ (8003a0c <HAL_GPIO_Init+0x2b8>)
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	4a4c      	ldr	r2, [pc, #304]	@ (8003a0c <HAL_GPIO_Init+0x2b8>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6193      	str	r3, [r2, #24]
 80038e0:	4b4a      	ldr	r3, [pc, #296]	@ (8003a0c <HAL_GPIO_Init+0x2b8>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038ec:	4a48      	ldr	r2, [pc, #288]	@ (8003a10 <HAL_GPIO_Init+0x2bc>)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	3302      	adds	r3, #2
 80038f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a40      	ldr	r2, [pc, #256]	@ (8003a14 <HAL_GPIO_Init+0x2c0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d013      	beq.n	8003940 <HAL_GPIO_Init+0x1ec>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a18 <HAL_GPIO_Init+0x2c4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00d      	beq.n	800393c <HAL_GPIO_Init+0x1e8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3e      	ldr	r2, [pc, #248]	@ (8003a1c <HAL_GPIO_Init+0x2c8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <HAL_GPIO_Init+0x1e4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a3d      	ldr	r2, [pc, #244]	@ (8003a20 <HAL_GPIO_Init+0x2cc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_GPIO_Init+0x1e0>
 8003930:	2303      	movs	r3, #3
 8003932:	e006      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003934:	2304      	movs	r3, #4
 8003936:	e004      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003938:	2302      	movs	r3, #2
 800393a:	e002      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003940:	2300      	movs	r3, #0
 8003942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003944:	f002 0203 	and.w	r2, r2, #3
 8003948:	0092      	lsls	r2, r2, #2
 800394a:	4093      	lsls	r3, r2
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003952:	492f      	ldr	r1, [pc, #188]	@ (8003a10 <HAL_GPIO_Init+0x2bc>)
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3302      	adds	r3, #2
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d006      	beq.n	800397a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800396c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	492c      	ldr	r1, [pc, #176]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	608b      	str	r3, [r1, #8]
 8003978:	e006      	b.n	8003988 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800397a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	43db      	mvns	r3, r3
 8003982:	4928      	ldr	r1, [pc, #160]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 8003984:	4013      	ands	r3, r2
 8003986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d006      	beq.n	80039a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003994:	4b23      	ldr	r3, [pc, #140]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4922      	ldr	r1, [pc, #136]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
 80039a0:	e006      	b.n	80039b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039a2:	4b20      	ldr	r3, [pc, #128]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	491e      	ldr	r1, [pc, #120]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039bc:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	4918      	ldr	r1, [pc, #96]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
 80039c8:	e006      	b.n	80039d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039ca:	4b16      	ldr	r3, [pc, #88]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	4914      	ldr	r1, [pc, #80]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d021      	beq.n	8003a28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	490e      	ldr	r1, [pc, #56]	@ (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e021      	b.n	8003a36 <HAL_GPIO_Init+0x2e2>
 80039f2:	bf00      	nop
 80039f4:	10320000 	.word	0x10320000
 80039f8:	10310000 	.word	0x10310000
 80039fc:	10220000 	.word	0x10220000
 8003a00:	10210000 	.word	0x10210000
 8003a04:	10120000 	.word	0x10120000
 8003a08:	10110000 	.word	0x10110000
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40010000 	.word	0x40010000
 8003a14:	40010800 	.word	0x40010800
 8003a18:	40010c00 	.word	0x40010c00
 8003a1c:	40011000 	.word	0x40011000
 8003a20:	40011400 	.word	0x40011400
 8003a24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <HAL_GPIO_Init+0x304>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	4909      	ldr	r1, [pc, #36]	@ (8003a58 <HAL_GPIO_Init+0x304>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a38:	3301      	adds	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f47f ae8e 	bne.w	8003768 <HAL_GPIO_Init+0x14>
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	372c      	adds	r7, #44	@ 0x2c
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	40010400 	.word	0x40010400

08003a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a6c:	787b      	ldrb	r3, [r7, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a78:	e003      	b.n	8003a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	041a      	lsls	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	611a      	str	r2, [r3, #16]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e12b      	b.n	8003cf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fe fe10 	bl	80026d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2224      	movs	r2, #36	@ 0x24
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ade:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af0:	f003 fcac 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 8003af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a81      	ldr	r2, [pc, #516]	@ (8003d00 <HAL_I2C_Init+0x274>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d807      	bhi.n	8003b10 <HAL_I2C_Init+0x84>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a80      	ldr	r2, [pc, #512]	@ (8003d04 <HAL_I2C_Init+0x278>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e006      	b.n	8003b1e <HAL_I2C_Init+0x92>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a7d      	ldr	r2, [pc, #500]	@ (8003d08 <HAL_I2C_Init+0x27c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bf94      	ite	ls
 8003b18:	2301      	movls	r3, #1
 8003b1a:	2300      	movhi	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0e7      	b.n	8003cf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a78      	ldr	r2, [pc, #480]	@ (8003d0c <HAL_I2C_Init+0x280>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	0c9b      	lsrs	r3, r3, #18
 8003b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a6a      	ldr	r2, [pc, #424]	@ (8003d00 <HAL_I2C_Init+0x274>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d802      	bhi.n	8003b60 <HAL_I2C_Init+0xd4>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	e009      	b.n	8003b74 <HAL_I2C_Init+0xe8>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	4a69      	ldr	r2, [pc, #420]	@ (8003d10 <HAL_I2C_Init+0x284>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	3301      	adds	r3, #1
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	495c      	ldr	r1, [pc, #368]	@ (8003d00 <HAL_I2C_Init+0x274>)
 8003b90:	428b      	cmp	r3, r1
 8003b92:	d819      	bhi.n	8003bc8 <HAL_I2C_Init+0x13c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e59      	subs	r1, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ba8:	400b      	ands	r3, r1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_I2C_Init+0x138>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1e59      	subs	r1, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	e051      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e04f      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d111      	bne.n	8003bf4 <HAL_I2C_Init+0x168>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1e58      	subs	r0, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e012      	b.n	8003c1a <HAL_I2C_Init+0x18e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1e58      	subs	r0, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	0099      	lsls	r1, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Init+0x196>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e022      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10e      	bne.n	8003c48 <HAL_I2C_Init+0x1bc>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e58      	subs	r0, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	440b      	add	r3, r1
 8003c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c46:	e00f      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	0099      	lsls	r1, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	6809      	ldr	r1, [r1, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6911      	ldr	r1, [r2, #16]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68d2      	ldr	r2, [r2, #12]
 8003ca2:	4311      	orrs	r1, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	000186a0 	.word	0x000186a0
 8003d04:	001e847f 	.word	0x001e847f
 8003d08:	003d08ff 	.word	0x003d08ff
 8003d0c:	431bde83 	.word	0x431bde83
 8003d10:	10624dd3 	.word	0x10624dd3

08003d14 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d26:	2b80      	cmp	r3, #128	@ 0x80
 8003d28:	d103      	bne.n	8003d32 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	611a      	str	r2, [r3, #16]
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	461a      	mov	r2, r3
 8003d48:	460b      	mov	r3, r1
 8003d4a:	817b      	strh	r3, [r7, #10]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d50:	f7fe fff8 	bl	8002d44 <HAL_GetTick>
 8003d54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	f040 80e0 	bne.w	8003f24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	2319      	movs	r3, #25
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4970      	ldr	r1, [pc, #448]	@ (8003f30 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f002 fd66 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e0d3      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_I2C_Master_Transmit+0x50>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e0cc      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x1ea>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d007      	beq.n	8003db2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2221      	movs	r2, #33	@ 0x21
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2210      	movs	r2, #16
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	893a      	ldrh	r2, [r7, #8]
 8003de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a50      	ldr	r2, [pc, #320]	@ (8003f34 <HAL_I2C_Master_Transmit+0x1f8>)
 8003df2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003df4:	8979      	ldrh	r1, [r7, #10]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f002 f962 	bl	80060c4 <I2C_MasterRequestWrite>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e08d      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e20:	e066      	b.n	8003ef0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	6a39      	ldr	r1, [r7, #32]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f002 fe24 	bl	8006a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d107      	bne.n	8003e4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e06b      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	781a      	ldrb	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_I2C_Master_Transmit+0x188>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d017      	beq.n	8003ec4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	6a39      	ldr	r1, [r7, #32]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f002 fe1b 	bl	8006b04 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d107      	bne.n	8003eec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e01a      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d194      	bne.n	8003e22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	00100002 	.word	0x00100002
 8003f34:	ffff0000 	.word	0xffff0000

08003f38 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	461a      	mov	r2, r3
 8003f44:	460b      	mov	r3, r1
 8003f46:	817b      	strh	r3, [r7, #10]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	f040 8101 	bne.w	8004160 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f5e:	4b83      	ldr	r3, [pc, #524]	@ (800416c <HAL_I2C_Master_Transmit_DMA+0x234>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	08db      	lsrs	r3, r3, #3
 8003f64:	4a82      	ldr	r2, [pc, #520]	@ (8004170 <HAL_I2C_Master_Transmit_DMA+0x238>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	0a1a      	lsrs	r2, r3, #8
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009a      	lsls	r2, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d112      	bne.n	8003faa <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e0db      	b.n	8004162 <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d0df      	beq.n	8003f78 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2C_Master_Transmit_DMA+0x8e>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e0cd      	b.n	8004162 <HAL_I2C_Master_Transmit_DMA+0x22a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d007      	beq.n	8003fec <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2221      	movs	r2, #33	@ 0x21
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2210      	movs	r2, #16
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	893a      	ldrh	r2, [r7, #8]
 800401c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a52      	ldr	r2, [pc, #328]	@ (8004174 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 800402c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800402e:	897a      	ldrh	r2, [r7, #10]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d073      	beq.n	8004124 <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004040:	2b00      	cmp	r3, #0
 8004042:	d022      	beq.n	800408a <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004048:	4a4b      	ldr	r2, [pc, #300]	@ (8004178 <HAL_I2C_Master_Transmit_DMA+0x240>)
 800404a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004050:	4a4a      	ldr	r2, [pc, #296]	@ (800417c <HAL_I2C_Master_Transmit_DMA+0x244>)
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004058:	2200      	movs	r2, #0
 800405a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004060:	2200      	movs	r2, #0
 8004062:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	4619      	mov	r1, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3310      	adds	r3, #16
 8004074:	461a      	mov	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	f7fe ffd5 	bl	8003028 <HAL_DMA_Start_IT>
 800407e:	4603      	mov	r3, r0
 8004080:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d139      	bne.n	80040fc <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8004088:	e013      	b.n	80040b2 <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e057      	b.n	8004162 <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80040c8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040d8:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040e8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e02f      	b.n	800415c <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	f043 0210 	orr.w	r2, r3, #16
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e01e      	b.n	8004162 <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004132:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004142:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800415a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	e000      	b.n	8004162 <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8004160:	2302      	movs	r3, #2
  }
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000078 	.word	0x20000078
 8004170:	14f8b589 	.word	0x14f8b589
 8004174:	ffff0000 	.word	0xffff0000
 8004178:	080064c5 	.word	0x080064c5
 800417c:	08006683 	.word	0x08006683

08004180 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	4608      	mov	r0, r1
 800418a:	4611      	mov	r1, r2
 800418c:	461a      	mov	r2, r3
 800418e:	4603      	mov	r3, r0
 8004190:	817b      	strh	r3, [r7, #10]
 8004192:	460b      	mov	r3, r1
 8004194:	813b      	strh	r3, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800419a:	f7fe fdd3 	bl	8002d44 <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	f040 80d9 	bne.w	8004360 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2319      	movs	r3, #25
 80041b4:	2201      	movs	r2, #1
 80041b6:	496d      	ldr	r1, [pc, #436]	@ (800436c <HAL_I2C_Mem_Write+0x1ec>)
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f002 fb41 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
 80041c6:	e0cc      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_I2C_Mem_Write+0x56>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e0c5      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d007      	beq.n	80041fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800420a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2221      	movs	r2, #33	@ 0x21
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2240      	movs	r2, #64	@ 0x40
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800422c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a4d      	ldr	r2, [pc, #308]	@ (8004370 <HAL_I2C_Mem_Write+0x1f0>)
 800423c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800423e:	88f8      	ldrh	r0, [r7, #6]
 8004240:	893a      	ldrh	r2, [r7, #8]
 8004242:	8979      	ldrh	r1, [r7, #10]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	4603      	mov	r3, r0
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f001 ffba 	bl	80061c8 <I2C_RequestMemoryWrite>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d052      	beq.n	8004300 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e081      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f002 fc06 	bl	8006a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	2b04      	cmp	r3, #4
 8004274:	d107      	bne.n	8004286 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e06b      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d11b      	bne.n	8004300 <HAL_I2C_Mem_Write+0x180>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d017      	beq.n	8004300 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1aa      	bne.n	800425e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f002 fbf9 	bl	8006b04 <I2C_WaitOnBTFFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	2b04      	cmp	r3, #4
 800431e:	d107      	bne.n	8004330 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e016      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	00100002 	.word	0x00100002
 8004370:	ffff0000 	.word	0xffff0000

08004374 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	@ 0x30
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	4608      	mov	r0, r1
 800437e:	4611      	mov	r1, r2
 8004380:	461a      	mov	r2, r3
 8004382:	4603      	mov	r3, r0
 8004384:	817b      	strh	r3, [r7, #10]
 8004386:	460b      	mov	r3, r1
 8004388:	813b      	strh	r3, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800438e:	f7fe fcd9 	bl	8002d44 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	f040 8168 	bne.w	8004676 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80043a6:	4b98      	ldr	r3, [pc, #608]	@ (8004608 <HAL_I2C_Mem_Read_DMA+0x294>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	08db      	lsrs	r3, r3, #3
 80043ac:	4a97      	ldr	r2, [pc, #604]	@ (800460c <HAL_I2C_Mem_Read_DMA+0x298>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	0a1a      	lsrs	r2, r3, #8
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009a      	lsls	r2, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d112      	bne.n	80043f2 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
 80043f0:	e142      	b.n	8004678 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d0df      	beq.n	80043c0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_I2C_Mem_Read_DMA+0x9a>
 800440a:	2302      	movs	r3, #2
 800440c:	e134      	b.n	8004678 <HAL_I2C_Mem_Read_DMA+0x304>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d007      	beq.n	8004434 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2222      	movs	r2, #34	@ 0x22
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2240      	movs	r2, #64	@ 0x40
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800445e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a67      	ldr	r2, [pc, #412]	@ (8004610 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8004474:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004476:	897a      	ldrh	r2, [r7, #10]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800447c:	893a      	ldrh	r2, [r7, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80c2 	beq.w	800461c <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	2b00      	cmp	r3, #0
 800449e:	d024      	beq.n	80044ea <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a4:	4a5b      	ldr	r2, [pc, #364]	@ (8004614 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 80044a6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004618 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b4:	2200      	movs	r2, #0
 80044b6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	2200      	movs	r2, #0
 80044be:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3310      	adds	r3, #16
 80044ca:	4619      	mov	r1, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	461a      	mov	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d6:	f7fe fda7 	bl	8003028 <HAL_DMA_Start_IT>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80044e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d17b      	bne.n	80045e0 <HAL_I2C_Mem_Read_DMA+0x26c>
 80044e8:	e013      	b.n	8004512 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e0b2      	b.n	8004678 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004512:	88f8      	ldrh	r0, [r7, #6]
 8004514:	893a      	ldrh	r2, [r7, #8]
 8004516:	8979      	ldrh	r1, [r7, #10]
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	2323      	movs	r3, #35	@ 0x23
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	4603      	mov	r3, r0
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f001 fee6 	bl	80062f4 <I2C_RequestMemoryRead>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d023      	beq.n	8004576 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fdd8 	bl	80030e8 <HAL_DMA_Abort_IT>
 8004538:	4603      	mov	r3, r0
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004542:	2200      	movs	r2, #0
 8004544:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004554:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e080      	b.n	8004678 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457a:	2b01      	cmp	r3, #1
 800457c:	d108      	bne.n	8004590 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e007      	b.n	80045a0 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800459e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045cc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	e048      	b.n	8004672 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	f043 0210 	orr.w	r2, r3, #16
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e037      	b.n	8004678 <HAL_I2C_Mem_Read_DMA+0x304>
 8004608:	20000078 	.word	0x20000078
 800460c:	14f8b589 	.word	0x14f8b589
 8004610:	ffff0000 	.word	0xffff0000
 8004614:	080064c5 	.word	0x080064c5
 8004618:	08006683 	.word	0x08006683
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800461c:	88f8      	ldrh	r0, [r7, #6]
 800461e:	893a      	ldrh	r2, [r7, #8]
 8004620:	8979      	ldrh	r1, [r7, #10]
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	2323      	movs	r3, #35	@ 0x23
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4603      	mov	r3, r0
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f001 fe61 	bl	80062f4 <I2C_RequestMemoryRead>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e01d      	b.n	8004678 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004660:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8004676:	2302      	movs	r3, #2
  }
}
 8004678:	4618      	mov	r0, r3
 800467a:	3728      	adds	r7, #40	@ 0x28
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	@ 0x28
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	460b      	mov	r3, r1
 800468e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004690:	f7fe fb58 	bl	8002d44 <HAL_GetTick>
 8004694:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	f040 8111 	bne.w	80048ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	2319      	movs	r3, #25
 80046ae:	2201      	movs	r2, #1
 80046b0:	4988      	ldr	r1, [pc, #544]	@ (80048d4 <HAL_I2C_IsDeviceReady+0x254>)
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f002 f8c4 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80046be:	2302      	movs	r3, #2
 80046c0:	e104      	b.n	80048cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_I2C_IsDeviceReady+0x50>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e0fd      	b.n	80048cc <HAL_I2C_IsDeviceReady+0x24c>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d007      	beq.n	80046f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004704:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2224      	movs	r2, #36	@ 0x24
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a70      	ldr	r2, [pc, #448]	@ (80048d8 <HAL_I2C_IsDeviceReady+0x258>)
 8004718:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004728:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2200      	movs	r2, #0
 8004732:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f002 f882 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00d      	beq.n	800475e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004750:	d103      	bne.n	800475a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004758:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e0b6      	b.n	80048cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800475e:	897b      	ldrh	r3, [r7, #10]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800476c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800476e:	f7fe fae9 	bl	8002d44 <HAL_GetTick>
 8004772:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004798:	bf0c      	ite	eq
 800479a:	2301      	moveq	r3, #1
 800479c:	2300      	movne	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047a2:	e025      	b.n	80047f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047a4:	f7fe face 	bl	8002d44 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d302      	bcc.n	80047ba <HAL_I2C_IsDeviceReady+0x13a>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	22a0      	movs	r2, #160	@ 0xa0
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80047fa:	d005      	beq.n	8004808 <HAL_I2C_IsDeviceReady+0x188>
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <HAL_I2C_IsDeviceReady+0x188>
 8004802:	7dbb      	ldrb	r3, [r7, #22]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0cd      	beq.n	80047a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b02      	cmp	r3, #2
 800481c:	d129      	bne.n	8004872 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800482c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2319      	movs	r3, #25
 800484a:	2201      	movs	r2, #1
 800484c:	4921      	ldr	r1, [pc, #132]	@ (80048d4 <HAL_I2C_IsDeviceReady+0x254>)
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f001 fff6 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e036      	b.n	80048cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e02c      	b.n	80048cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004880:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800488a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2319      	movs	r3, #25
 8004892:	2201      	movs	r2, #1
 8004894:	490f      	ldr	r1, [pc, #60]	@ (80048d4 <HAL_I2C_IsDeviceReady+0x254>)
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f001 ffd2 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e012      	b.n	80048cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	3301      	adds	r3, #1
 80048aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	f4ff af32 	bcc.w	800471a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	00100002 	.word	0x00100002
 80048d8:	ffff0000 	.word	0xffff0000

080048dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004904:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b10      	cmp	r3, #16
 800490a:	d003      	beq.n	8004914 <HAL_I2C_EV_IRQHandler+0x38>
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b40      	cmp	r3, #64	@ 0x40
 8004910:	f040 80c1 	bne.w	8004a96 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10d      	bne.n	800494a <HAL_I2C_EV_IRQHandler+0x6e>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004934:	d003      	beq.n	800493e <HAL_I2C_EV_IRQHandler+0x62>
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800493c:	d101      	bne.n	8004942 <HAL_I2C_EV_IRQHandler+0x66>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_I2C_EV_IRQHandler+0x68>
 8004942:	2300      	movs	r3, #0
 8004944:	2b01      	cmp	r3, #1
 8004946:	f000 8132 	beq.w	8004bae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00c      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x92>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	0a5b      	lsrs	r3, r3, #9
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f002 f977 	bl	8006c54 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fd87 	bl	800547a <I2C_Master_SB>
 800496c:	e092      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	08db      	lsrs	r3, r3, #3
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_I2C_EV_IRQHandler+0xb2>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	0a5b      	lsrs	r3, r3, #9
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fdfc 	bl	8005584 <I2C_Master_ADD10>
 800498c:	e082      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_I2C_EV_IRQHandler+0xd2>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	0a5b      	lsrs	r3, r3, #9
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fe15 	bl	80055d6 <I2C_Master_ADDR>
 80049ac:	e072      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03b      	beq.n	8004a32 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c8:	f000 80f3 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	09db      	lsrs	r3, r3, #7
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00f      	beq.n	80049f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	0a9b      	lsrs	r3, r3, #10
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d009      	beq.n	80049f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	089b      	lsrs	r3, r3, #2
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d103      	bne.n	80049f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f9df 	bl	8004db4 <I2C_MasterTransmit_TXE>
 80049f6:	e04d      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80d6 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	0a5b      	lsrs	r3, r3, #9
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 80cf 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a14:	7bbb      	ldrb	r3, [r7, #14]
 8004a16:	2b21      	cmp	r3, #33	@ 0x21
 8004a18:	d103      	bne.n	8004a22 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa66 	bl	8004eec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a20:	e0c7      	b.n	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b40      	cmp	r3, #64	@ 0x40
 8004a26:	f040 80c4 	bne.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fad4 	bl	8004fd8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a30:	e0bf      	b.n	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a40:	f000 80b7 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00f      	beq.n	8004a70 <HAL_I2C_EV_IRQHandler+0x194>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	0a9b      	lsrs	r3, r3, #10
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <HAL_I2C_EV_IRQHandler+0x194>
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb4d 	bl	8005108 <I2C_MasterReceive_RXNE>
 8004a6e:	e011      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 809a 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	0a5b      	lsrs	r3, r3, #9
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8093 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fc03 	bl	8005298 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a92:	e08e      	b.n	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a94:	e08d      	b.n	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e007      	b.n	8004ab8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d012      	beq.n	8004aea <HAL_I2C_EV_IRQHandler+0x20e>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	0a5b      	lsrs	r3, r3, #9
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004ae0:	69b9      	ldr	r1, [r7, #24]
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 ffce 	bl	8005a84 <I2C_Slave_ADDR>
 8004ae8:	e066      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_I2C_EV_IRQHandler+0x22e>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	0a5b      	lsrs	r3, r3, #9
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f001 f808 	bl	8005b18 <I2C_Slave_STOPF>
 8004b08:	e056      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b0a:	7bbb      	ldrb	r3, [r7, #14]
 8004b0c:	2b21      	cmp	r3, #33	@ 0x21
 8004b0e:	d002      	beq.n	8004b16 <HAL_I2C_EV_IRQHandler+0x23a>
 8004b10:	7bbb      	ldrb	r3, [r7, #14]
 8004b12:	2b29      	cmp	r3, #41	@ 0x29
 8004b14:	d125      	bne.n	8004b62 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	09db      	lsrs	r3, r3, #7
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00f      	beq.n	8004b42 <HAL_I2C_EV_IRQHandler+0x266>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	0a9b      	lsrs	r3, r3, #10
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_I2C_EV_IRQHandler+0x266>
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fee6 	bl	800590c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b40:	e039      	b.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d033      	beq.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2da>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	0a5b      	lsrs	r3, r3, #9
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d02d      	beq.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 ff13 	bl	8005986 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b60:	e029      	b.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00f      	beq.n	8004b8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	0a9b      	lsrs	r3, r3, #10
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 ff1d 	bl	80059c6 <I2C_SlaveReceive_RXNE>
 8004b8c:	e014      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	089b      	lsrs	r3, r3, #2
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00e      	beq.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	0a5b      	lsrs	r3, r3, #9
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 ff4b 	bl	8005a42 <I2C_SlaveReceive_BTF>
 8004bac:	e004      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004bae:	bf00      	nop
 8004bb0:	e002      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bb2:	bf00      	nop
 8004bb4:	e000      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b08a      	sub	sp, #40	@ 0x28
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004be0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	0a1b      	lsrs	r3, r3, #8
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d016      	beq.n	8004c1c <HAL_I2C_ER_IRQHandler+0x5e>
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d010      	beq.n	8004c1c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c0a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c1a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	0a5b      	lsrs	r3, r3, #9
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00e      	beq.n	8004c46 <HAL_I2C_ER_IRQHandler+0x88>
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	f043 0302 	orr.w	r3, r3, #2
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004c44:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	0a9b      	lsrs	r3, r3, #10
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d03f      	beq.n	8004cd2 <HAL_I2C_ER_IRQHandler+0x114>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	0a1b      	lsrs	r3, r3, #8
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d039      	beq.n	8004cd2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004c5e:	7efb      	ldrb	r3, [r7, #27]
 8004c60:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c70:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c76:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004c78:	7ebb      	ldrb	r3, [r7, #26]
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d112      	bne.n	8004ca4 <HAL_I2C_ER_IRQHandler+0xe6>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10f      	bne.n	8004ca4 <HAL_I2C_ER_IRQHandler+0xe6>
 8004c84:	7cfb      	ldrb	r3, [r7, #19]
 8004c86:	2b21      	cmp	r3, #33	@ 0x21
 8004c88:	d008      	beq.n	8004c9c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004c8a:	7cfb      	ldrb	r3, [r7, #19]
 8004c8c:	2b29      	cmp	r3, #41	@ 0x29
 8004c8e:	d005      	beq.n	8004c9c <HAL_I2C_ER_IRQHandler+0xde>
 8004c90:	7cfb      	ldrb	r3, [r7, #19]
 8004c92:	2b28      	cmp	r3, #40	@ 0x28
 8004c94:	d106      	bne.n	8004ca4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b21      	cmp	r3, #33	@ 0x21
 8004c9a:	d103      	bne.n	8004ca4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f001 f86b 	bl	8005d78 <I2C_Slave_AF>
 8004ca2:	e016      	b.n	8004cd2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	f043 0304 	orr.w	r3, r3, #4
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004cb6:	7efb      	ldrb	r3, [r7, #27]
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d002      	beq.n	8004cc2 <HAL_I2C_ER_IRQHandler+0x104>
 8004cbc:	7efb      	ldrb	r3, [r7, #27]
 8004cbe:	2b40      	cmp	r3, #64	@ 0x40
 8004cc0:	d107      	bne.n	8004cd2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cd0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	0adb      	lsrs	r3, r3, #11
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00e      	beq.n	8004cfc <HAL_I2C_ER_IRQHandler+0x13e>
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	0a1b      	lsrs	r3, r3, #8
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	f043 0308 	orr.w	r3, r3, #8
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004cfa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f001 f8a6 	bl	8005e60 <I2C_ITError>
  }
}
 8004d14:	bf00      	nop
 8004d16:	3728      	adds	r7, #40	@ 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr

08004d2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr

08004d40 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	70fb      	strb	r3, [r7, #3]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr

08004d6c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr

08004d7e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d150      	bne.n	8004e7c <I2C_MasterTransmit_TXE+0xc8>
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b21      	cmp	r3, #33	@ 0x21
 8004dde:	d14d      	bne.n	8004e7c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d01d      	beq.n	8004e22 <I2C_MasterTransmit_TXE+0x6e>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d01a      	beq.n	8004e22 <I2C_MasterTransmit_TXE+0x6e>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004df2:	d016      	beq.n	8004e22 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e02:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2211      	movs	r2, #17
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fd fe52 	bl	8002ac4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e20:	e060      	b.n	8004ee4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e30:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e40:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b40      	cmp	r3, #64	@ 0x40
 8004e5a:	d107      	bne.n	8004e6c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff8a 	bl	8004d7e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e6a:	e03b      	b.n	8004ee4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7fd fe25 	bl	8002ac4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e7a:	e033      	b.n	8004ee4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b21      	cmp	r3, #33	@ 0x21
 8004e80:	d005      	beq.n	8004e8e <I2C_MasterTransmit_TXE+0xda>
 8004e82:	7bbb      	ldrb	r3, [r7, #14]
 8004e84:	2b40      	cmp	r3, #64	@ 0x40
 8004e86:	d12d      	bne.n	8004ee4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b22      	cmp	r3, #34	@ 0x22
 8004e8c:	d12a      	bne.n	8004ee4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d108      	bne.n	8004eaa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ea8:	e01c      	b.n	8004ee4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b40      	cmp	r3, #64	@ 0x40
 8004eb4:	d103      	bne.n	8004ebe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f88e 	bl	8004fd8 <I2C_MemoryTransmit_TXE_BTF>
}
 8004ebc:	e012      	b.n	8004ee4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	781a      	ldrb	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004ee2:	e7ff      	b.n	8004ee4 <I2C_MasterTransmit_TXE+0x130>
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b21      	cmp	r3, #33	@ 0x21
 8004f04:	d164      	bne.n	8004fd0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d012      	beq.n	8004f36 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f34:	e04c      	b.n	8004fd0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d01d      	beq.n	8004f78 <I2C_MasterTransmit_BTF+0x8c>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d01a      	beq.n	8004f78 <I2C_MasterTransmit_BTF+0x8c>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f48:	d016      	beq.n	8004f78 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f58:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2211      	movs	r2, #17
 8004f5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7fd fda7 	bl	8002ac4 <HAL_I2C_MasterTxCpltCallback>
}
 8004f76:	e02b      	b.n	8004fd0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f86:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f96:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b40      	cmp	r3, #64	@ 0x40
 8004fb0:	d107      	bne.n	8004fc2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff fedf 	bl	8004d7e <HAL_I2C_MemTxCpltCallback>
}
 8004fc0:	e006      	b.n	8004fd0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fd fd7a 	bl	8002ac4 <HAL_I2C_MasterTxCpltCallback>
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d11d      	bne.n	800502c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d10b      	bne.n	8005010 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005008:	1c9a      	adds	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800500e:	e077      	b.n	8005100 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005014:	b29b      	uxth	r3, r3
 8005016:	121b      	asrs	r3, r3, #8
 8005018:	b2da      	uxtb	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800502a:	e069      	b.n	8005100 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10b      	bne.n	800504c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005038:	b2da      	uxtb	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800504a:	e059      	b.n	8005100 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005050:	2b02      	cmp	r3, #2
 8005052:	d152      	bne.n	80050fa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b22      	cmp	r3, #34	@ 0x22
 8005058:	d10d      	bne.n	8005076 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005068:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005074:	e044      	b.n	8005100 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d015      	beq.n	80050ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b21      	cmp	r3, #33	@ 0x21
 8005084:	d112      	bne.n	80050ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	781a      	ldrb	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80050aa:	e029      	b.n	8005100 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d124      	bne.n	8005100 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	2b21      	cmp	r3, #33	@ 0x21
 80050ba:	d121      	bne.n	8005100 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fe43 	bl	8004d7e <HAL_I2C_MemTxCpltCallback>
}
 80050f8:	e002      	b.n	8005100 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fe fe0a 	bl	8003d14 <I2C_Flush_DR>
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b22      	cmp	r3, #34	@ 0x22
 800511a:	f040 80b9 	bne.w	8005290 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005122:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d921      	bls.n	8005176 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b03      	cmp	r3, #3
 8005160:	f040 8096 	bne.w	8005290 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005172:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005174:	e08c      	b.n	8005290 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	2b02      	cmp	r3, #2
 800517c:	d07f      	beq.n	800527e <I2C_MasterReceive_RXNE+0x176>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d002      	beq.n	800518a <I2C_MasterReceive_RXNE+0x82>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d179      	bne.n	800527e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 fd02 	bl	8006b94 <I2C_WaitOnSTOPRequestThroughIT>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d14c      	bne.n	8005230 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b40      	cmp	r3, #64	@ 0x40
 80051ee:	d10a      	bne.n	8005206 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fd fc4a 	bl	8002a98 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005204:	e044      	b.n	8005290 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d002      	beq.n	800521a <I2C_MasterReceive_RXNE+0x112>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b20      	cmp	r3, #32
 8005218:	d103      	bne.n	8005222 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005220:	e002      	b.n	8005228 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2212      	movs	r2, #18
 8005226:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff fd77 	bl	8004d1c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800522e:	e02f      	b.n	8005290 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800523e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fd8a 	bl	8004d90 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800527c:	e008      	b.n	8005290 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800528c:	605a      	str	r2, [r3, #4]
}
 800528e:	e7ff      	b.n	8005290 <I2C_MasterReceive_RXNE+0x188>
 8005290:	bf00      	nop
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d11b      	bne.n	80052e8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052be:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80052e6:	e0c4      	b.n	8005472 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d129      	bne.n	8005346 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005300:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b04      	cmp	r3, #4
 8005306:	d00a      	beq.n	800531e <I2C_MasterReceive_BTF+0x86>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d007      	beq.n	800531e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800531c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005344:	e095      	b.n	8005472 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d17d      	bne.n	800544c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d002      	beq.n	800535c <I2C_MasterReceive_BTF+0xc4>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b10      	cmp	r3, #16
 800535a:	d108      	bne.n	800536e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e016      	b.n	800539c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b04      	cmp	r3, #4
 8005372:	d002      	beq.n	800537a <I2C_MasterReceive_BTF+0xe2>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d108      	bne.n	800538c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e007      	b.n	800539c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800539a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80053f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b40      	cmp	r3, #64	@ 0x40
 800540a:	d10a      	bne.n	8005422 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fd fb3c 	bl	8002a98 <HAL_I2C_MemRxCpltCallback>
}
 8005420:	e027      	b.n	8005472 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b08      	cmp	r3, #8
 800542e:	d002      	beq.n	8005436 <I2C_MasterReceive_BTF+0x19e>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b20      	cmp	r3, #32
 8005434:	d103      	bne.n	800543e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	631a      	str	r2, [r3, #48]	@ 0x30
 800543c:	e002      	b.n	8005444 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2212      	movs	r2, #18
 8005442:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff fc69 	bl	8004d1c <HAL_I2C_MasterRxCpltCallback>
}
 800544a:	e012      	b.n	8005472 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b40      	cmp	r3, #64	@ 0x40
 800548c:	d117      	bne.n	80054be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80054a8:	e067      	b.n	800557a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	611a      	str	r2, [r3, #16]
}
 80054bc:	e05d      	b.n	800557a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054c6:	d133      	bne.n	8005530 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b21      	cmp	r3, #33	@ 0x21
 80054d2:	d109      	bne.n	80054e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054e4:	611a      	str	r2, [r3, #16]
 80054e6:	e008      	b.n	80054fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d004      	beq.n	800550c <I2C_Master_SB+0x92>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005508:	2b00      	cmp	r3, #0
 800550a:	d108      	bne.n	800551e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	2b00      	cmp	r3, #0
 8005512:	d032      	beq.n	800557a <I2C_Master_SB+0x100>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551a:	2b00      	cmp	r3, #0
 800551c:	d02d      	beq.n	800557a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800552c:	605a      	str	r2, [r3, #4]
}
 800552e:	e024      	b.n	800557a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10e      	bne.n	8005556 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553c:	b29b      	uxth	r3, r3
 800553e:	11db      	asrs	r3, r3, #7
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f003 0306 	and.w	r3, r3, #6
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f063 030f 	orn	r3, r3, #15
 800554c:	b2da      	uxtb	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	611a      	str	r2, [r3, #16]
}
 8005554:	e011      	b.n	800557a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800555a:	2b01      	cmp	r3, #1
 800555c:	d10d      	bne.n	800557a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005562:	b29b      	uxth	r3, r3
 8005564:	11db      	asrs	r3, r3, #7
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 0306 	and.w	r3, r3, #6
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f063 030e 	orn	r3, r3, #14
 8005572:	b2da      	uxtb	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	611a      	str	r2, [r3, #16]
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005590:	b2da      	uxtb	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <I2C_Master_ADD10+0x26>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d108      	bne.n	80055bc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00c      	beq.n	80055cc <I2C_Master_ADD10+0x48>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d007      	beq.n	80055cc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055ca:	605a      	str	r2, [r3, #4]
  }
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bc80      	pop	{r7}
 80055d4:	4770      	bx	lr

080055d6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b091      	sub	sp, #68	@ 0x44
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b22      	cmp	r3, #34	@ 0x22
 80055fe:	f040 8174 	bne.w	80058ea <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <I2C_Master_ADDR+0x54>
 800560a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800560e:	2b40      	cmp	r3, #64	@ 0x40
 8005610:	d10b      	bne.n	800562a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005612:	2300      	movs	r3, #0
 8005614:	633b      	str	r3, [r7, #48]	@ 0x30
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	633b      	str	r3, [r7, #48]	@ 0x30
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	633b      	str	r3, [r7, #48]	@ 0x30
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	e16b      	b.n	8005902 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11d      	bne.n	800566e <I2C_Master_ADDR+0x98>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800563a:	d118      	bne.n	800566e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563c:	2300      	movs	r3, #0
 800563e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005660:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	651a      	str	r2, [r3, #80]	@ 0x50
 800566c:	e149      	b.n	8005902 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d113      	bne.n	80056a0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005678:	2300      	movs	r3, #0
 800567a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e120      	b.n	80058e2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	f040 808a 	bne.w	80057c0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056b2:	d137      	bne.n	8005724 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d2:	d113      	bne.n	80056fc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056e2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e4:	2300      	movs	r3, #0
 80056e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	e0f2      	b.n	80058e2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056fc:	2300      	movs	r3, #0
 80056fe:	623b      	str	r3, [r7, #32]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	623b      	str	r3, [r7, #32]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	623b      	str	r3, [r7, #32]
 8005710:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e0de      	b.n	80058e2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	2b08      	cmp	r3, #8
 8005728:	d02e      	beq.n	8005788 <I2C_Master_ADDR+0x1b2>
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	2b20      	cmp	r3, #32
 800572e:	d02b      	beq.n	8005788 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005732:	2b12      	cmp	r3, #18
 8005734:	d102      	bne.n	800573c <I2C_Master_ADDR+0x166>
 8005736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005738:	2b01      	cmp	r3, #1
 800573a:	d125      	bne.n	8005788 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800573c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573e:	2b04      	cmp	r3, #4
 8005740:	d00e      	beq.n	8005760 <I2C_Master_ADDR+0x18a>
 8005742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005744:	2b02      	cmp	r3, #2
 8005746:	d00b      	beq.n	8005760 <I2C_Master_ADDR+0x18a>
 8005748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574a:	2b10      	cmp	r3, #16
 800574c:	d008      	beq.n	8005760 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e007      	b.n	8005770 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800576e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005770:	2300      	movs	r3, #0
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	e0ac      	b.n	80058e2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005796:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005798:	2300      	movs	r3, #0
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	e090      	b.n	80058e2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d158      	bne.n	800587c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80057ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d021      	beq.n	8005814 <I2C_Master_ADDR+0x23e>
 80057d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d01e      	beq.n	8005814 <I2C_Master_ADDR+0x23e>
 80057d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d01b      	beq.n	8005814 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e012      	b.n	800583a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005822:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005848:	d14b      	bne.n	80058e2 <I2C_Master_ADDR+0x30c>
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005850:	d00b      	beq.n	800586a <I2C_Master_ADDR+0x294>
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	2b01      	cmp	r3, #1
 8005856:	d008      	beq.n	800586a <I2C_Master_ADDR+0x294>
 8005858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585a:	2b08      	cmp	r3, #8
 800585c:	d005      	beq.n	800586a <I2C_Master_ADDR+0x294>
 800585e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005860:	2b10      	cmp	r3, #16
 8005862:	d002      	beq.n	800586a <I2C_Master_ADDR+0x294>
 8005864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005866:	2b20      	cmp	r3, #32
 8005868:	d13b      	bne.n	80058e2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	e032      	b.n	80058e2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800588a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800589a:	d117      	bne.n	80058cc <I2C_Master_ADDR+0x2f6>
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058a2:	d00b      	beq.n	80058bc <I2C_Master_ADDR+0x2e6>
 80058a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d008      	beq.n	80058bc <I2C_Master_ADDR+0x2e6>
 80058aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d005      	beq.n	80058bc <I2C_Master_ADDR+0x2e6>
 80058b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b2:	2b10      	cmp	r3, #16
 80058b4:	d002      	beq.n	80058bc <I2C_Master_ADDR+0x2e6>
 80058b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d107      	bne.n	80058cc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058ca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80058e8:	e00b      	b.n	8005902 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	68bb      	ldr	r3, [r7, #8]
}
 8005900:	e7ff      	b.n	8005902 <I2C_Master_ADDR+0x32c>
 8005902:	bf00      	nop
 8005904:	3744      	adds	r7, #68	@ 0x44
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800591a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d02b      	beq.n	800597e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d114      	bne.n	800597e <I2C_SlaveTransmit_TXE+0x72>
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b29      	cmp	r3, #41	@ 0x29
 8005958:	d111      	bne.n	800597e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005968:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2221      	movs	r2, #33	@ 0x21
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2228      	movs	r2, #40	@ 0x28
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff f9d8 	bl	8004d2e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d011      	beq.n	80059bc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d02c      	beq.n	8005a3a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d114      	bne.n	8005a3a <I2C_SlaveReceive_RXNE+0x74>
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a14:	d111      	bne.n	8005a3a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a24:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2222      	movs	r2, #34	@ 0x22
 8005a2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2228      	movs	r2, #40	@ 0x28
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff f983 	bl	8004d40 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d012      	beq.n	8005a7a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a9e:	2b28      	cmp	r3, #40	@ 0x28
 8005aa0:	d127      	bne.n	8005af2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ab0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	089b      	lsrs	r3, r3, #2
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	09db      	lsrs	r3, r3, #7
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	81bb      	strh	r3, [r7, #12]
 8005ad4:	e002      	b.n	8005adc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005ae4:	89ba      	ldrh	r2, [r7, #12]
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff f931 	bl	8004d52 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005af0:	e00e      	b.n	8005b10 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b26:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b36:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	60bb      	str	r3, [r7, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b64:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b74:	d172      	bne.n	8005c5c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b22      	cmp	r3, #34	@ 0x22
 8005b7a:	d002      	beq.n	8005b82 <I2C_Slave_STOPF+0x6a>
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b80:	d135      	bne.n	8005bee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	f043 0204 	orr.w	r2, r3, #4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fd fc12 	bl	80033e4 <HAL_DMA_GetState>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d049      	beq.n	8005c5a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bca:	4a69      	ldr	r2, [pc, #420]	@ (8005d70 <I2C_Slave_STOPF+0x258>)
 8005bcc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fd fa88 	bl	80030e8 <HAL_DMA_Abort_IT>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d03d      	beq.n	8005c5a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bec:	e035      	b.n	8005c5a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	f043 0204 	orr.w	r2, r3, #4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fd fbdc 	bl	80033e4 <HAL_DMA_GetState>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d014      	beq.n	8005c5c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c36:	4a4e      	ldr	r2, [pc, #312]	@ (8005d70 <I2C_Slave_STOPF+0x258>)
 8005c38:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fd fa52 	bl	80030e8 <HAL_DMA_Abort_IT>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d008      	beq.n	8005c5c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c54:	4610      	mov	r0, r2
 8005c56:	4798      	blx	r3
 8005c58:	e000      	b.n	8005c5c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c5a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d03e      	beq.n	8005ce4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d112      	bne.n	8005c9a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca4:	2b40      	cmp	r3, #64	@ 0x40
 8005ca6:	d112      	bne.n	8005cce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cdc:	f043 0204 	orr.w	r2, r3, #4
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8b7 	bl	8005e60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005cf2:	e039      	b.n	8005d68 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cf8:	d109      	bne.n	8005d0e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2228      	movs	r2, #40	@ 0x28
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff f819 	bl	8004d40 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b28      	cmp	r3, #40	@ 0x28
 8005d18:	d111      	bne.n	8005d3e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a15      	ldr	r2, [pc, #84]	@ (8005d74 <I2C_Slave_STOPF+0x25c>)
 8005d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff f818 	bl	8004d6c <HAL_I2C_ListenCpltCallback>
}
 8005d3c:	e014      	b.n	8005d68 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d42:	2b22      	cmp	r3, #34	@ 0x22
 8005d44:	d002      	beq.n	8005d4c <I2C_Slave_STOPF+0x234>
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2b22      	cmp	r3, #34	@ 0x22
 8005d4a:	d10d      	bne.n	8005d68 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fe ffec 	bl	8004d40 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	080066f1 	.word	0x080066f1
 8005d74:	ffff0000 	.word	0xffff0000

08005d78 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d86:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d002      	beq.n	8005d9a <I2C_Slave_AF+0x22>
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d129      	bne.n	8005dee <I2C_Slave_AF+0x76>
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b28      	cmp	r3, #40	@ 0x28
 8005d9e:	d126      	bne.n	8005dee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a2e      	ldr	r2, [pc, #184]	@ (8005e5c <I2C_Slave_AF+0xe4>)
 8005da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005db4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005dbe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fe ffc0 	bl	8004d6c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005dec:	e031      	b.n	8005e52 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	2b21      	cmp	r3, #33	@ 0x21
 8005df2:	d129      	bne.n	8005e48 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a19      	ldr	r2, [pc, #100]	@ (8005e5c <I2C_Slave_AF+0xe4>)
 8005df8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2221      	movs	r2, #33	@ 0x21
 8005dfe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e1e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e28:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e38:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7fd ff6a 	bl	8003d14 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7fe ff74 	bl	8004d2e <HAL_I2C_SlaveTxCpltCallback>
}
 8005e46:	e004      	b.n	8005e52 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e50:	615a      	str	r2, [r3, #20]
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	ffff0000 	.word	0xffff0000

08005e60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e78:	7bbb      	ldrb	r3, [r7, #14]
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d002      	beq.n	8005e84 <I2C_ITError+0x24>
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	2b40      	cmp	r3, #64	@ 0x40
 8005e82:	d10a      	bne.n	8005e9a <I2C_ITError+0x3a>
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	2b22      	cmp	r3, #34	@ 0x22
 8005e88:	d107      	bne.n	8005e9a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ea0:	2b28      	cmp	r3, #40	@ 0x28
 8005ea2:	d107      	bne.n	8005eb4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2228      	movs	r2, #40	@ 0x28
 8005eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005eb2:	e015      	b.n	8005ee0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ebe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ec2:	d00a      	beq.n	8005eda <I2C_ITError+0x7a>
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b60      	cmp	r3, #96	@ 0x60
 8005ec8:	d007      	beq.n	8005eda <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eee:	d162      	bne.n	8005fb6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005efe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f04:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d020      	beq.n	8005f50 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f12:	4a6a      	ldr	r2, [pc, #424]	@ (80060bc <I2C_ITError+0x25c>)
 8005f14:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fd f8e4 	bl	80030e8 <HAL_DMA_Abort_IT>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8089 	beq.w	800603a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0201 	bic.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4798      	blx	r3
 8005f4e:	e074      	b.n	800603a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	4a59      	ldr	r2, [pc, #356]	@ (80060bc <I2C_ITError+0x25c>)
 8005f56:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fd f8c3 	bl	80030e8 <HAL_DMA_Abort_IT>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d068      	beq.n	800603a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f72:	2b40      	cmp	r3, #64	@ 0x40
 8005f74:	d10b      	bne.n	8005f8e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4798      	blx	r3
 8005fb4:	e041      	b.n	800603a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b60      	cmp	r3, #96	@ 0x60
 8005fc0:	d125      	bne.n	800600e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b40      	cmp	r3, #64	@ 0x40
 8005fdc:	d10b      	bne.n	8005ff6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fe fecb 	bl	8004da2 <HAL_I2C_AbortCpltCallback>
 800600c:	e015      	b.n	800603a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b40      	cmp	r3, #64	@ 0x40
 800601a:	d10b      	bne.n	8006034 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fe feab 	bl	8004d90 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10e      	bne.n	8006068 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006050:	2b00      	cmp	r3, #0
 8006052:	d109      	bne.n	8006068 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006076:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800607e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b04      	cmp	r3, #4
 800608a:	d113      	bne.n	80060b4 <I2C_ITError+0x254>
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	2b28      	cmp	r3, #40	@ 0x28
 8006090:	d110      	bne.n	80060b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a0a      	ldr	r2, [pc, #40]	@ (80060c0 <I2C_ITError+0x260>)
 8006096:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fe fe5c 	bl	8004d6c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	080066f1 	.word	0x080066f1
 80060c0:	ffff0000 	.word	0xffff0000

080060c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	460b      	mov	r3, r1
 80060d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d006      	beq.n	80060ee <I2C_MasterRequestWrite+0x2a>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d003      	beq.n	80060ee <I2C_MasterRequestWrite+0x2a>
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060ec:	d108      	bne.n	8006100 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e00b      	b.n	8006118 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006104:	2b12      	cmp	r3, #18
 8006106:	d107      	bne.n	8006118 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006116:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fb8b 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00d      	beq.n	800614c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800613a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800613e:	d103      	bne.n	8006148 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006146:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e035      	b.n	80061b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006154:	d108      	bne.n	8006168 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006156:	897b      	ldrh	r3, [r7, #10]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	461a      	mov	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006164:	611a      	str	r2, [r3, #16]
 8006166:	e01b      	b.n	80061a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006168:	897b      	ldrh	r3, [r7, #10]
 800616a:	11db      	asrs	r3, r3, #7
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0306 	and.w	r3, r3, #6
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f063 030f 	orn	r3, r3, #15
 8006178:	b2da      	uxtb	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	490e      	ldr	r1, [pc, #56]	@ (80061c0 <I2C_MasterRequestWrite+0xfc>)
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fbd4 	bl	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e010      	b.n	80061b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006196:	897b      	ldrh	r3, [r7, #10]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	4907      	ldr	r1, [pc, #28]	@ (80061c4 <I2C_MasterRequestWrite+0x100>)
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fbc4 	bl	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	00010008 	.word	0x00010008
 80061c4:	00010002 	.word	0x00010002

080061c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	4608      	mov	r0, r1
 80061d2:	4611      	mov	r1, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	817b      	strh	r3, [r7, #10]
 80061da:	460b      	mov	r3, r1
 80061dc:	813b      	strh	r3, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 fb1e 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00d      	beq.n	8006226 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006218:	d103      	bne.n	8006222 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006220:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e05f      	b.n	80062e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006226:	897b      	ldrh	r3, [r7, #10]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006234:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	6a3a      	ldr	r2, [r7, #32]
 800623a:	492d      	ldr	r1, [pc, #180]	@ (80062f0 <I2C_RequestMemoryWrite+0x128>)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fb79 	bl	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e04c      	b.n	80062e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006264:	6a39      	ldr	r1, [r7, #32]
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fc04 	bl	8006a74 <I2C_WaitOnTXEFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00d      	beq.n	800628e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	2b04      	cmp	r3, #4
 8006278:	d107      	bne.n	800628a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006288:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e02b      	b.n	80062e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d105      	bne.n	80062a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006294:	893b      	ldrh	r3, [r7, #8]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	611a      	str	r2, [r3, #16]
 800629e:	e021      	b.n	80062e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062a0:	893b      	ldrh	r3, [r7, #8]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b0:	6a39      	ldr	r1, [r7, #32]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fbde 	bl	8006a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00d      	beq.n	80062da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d107      	bne.n	80062d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e005      	b.n	80062e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	00010002 	.word	0x00010002

080062f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	4608      	mov	r0, r1
 80062fe:	4611      	mov	r1, r2
 8006300:	461a      	mov	r2, r3
 8006302:	4603      	mov	r3, r0
 8006304:	817b      	strh	r3, [r7, #10]
 8006306:	460b      	mov	r3, r1
 8006308:	813b      	strh	r3, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800631c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800632c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	2200      	movs	r2, #0
 8006336:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 fa80 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00d      	beq.n	8006362 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006354:	d103      	bne.n	800635e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800635c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e0aa      	b.n	80064b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006362:	897b      	ldrh	r3, [r7, #10]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006370:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	6a3a      	ldr	r2, [r7, #32]
 8006376:	4952      	ldr	r1, [pc, #328]	@ (80064c0 <I2C_RequestMemoryRead+0x1cc>)
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 fadb 	bl	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e097      	b.n	80064b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800639e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a0:	6a39      	ldr	r1, [r7, #32]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fb66 	bl	8006a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00d      	beq.n	80063ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d107      	bne.n	80063c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e076      	b.n	80064b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063ca:	88fb      	ldrh	r3, [r7, #6]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d105      	bne.n	80063dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063d0:	893b      	ldrh	r3, [r7, #8]
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	611a      	str	r2, [r3, #16]
 80063da:	e021      	b.n	8006420 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063dc:	893b      	ldrh	r3, [r7, #8]
 80063de:	0a1b      	lsrs	r3, r3, #8
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ec:	6a39      	ldr	r1, [r7, #32]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fb40 	bl	8006a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00d      	beq.n	8006416 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d107      	bne.n	8006412 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006410:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e050      	b.n	80064b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006416:	893b      	ldrh	r3, [r7, #8]
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006422:	6a39      	ldr	r1, [r7, #32]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fb25 	bl	8006a74 <I2C_WaitOnTXEFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00d      	beq.n	800644c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006434:	2b04      	cmp	r3, #4
 8006436:	d107      	bne.n	8006448 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006446:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e035      	b.n	80064b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800645a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	2200      	movs	r2, #0
 8006464:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f9e9 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00d      	beq.n	8006490 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006482:	d103      	bne.n	800648c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800648a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e013      	b.n	80064b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006490:	897b      	ldrh	r3, [r7, #10]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	b2da      	uxtb	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	6a3a      	ldr	r2, [r7, #32]
 80064a4:	4906      	ldr	r1, [pc, #24]	@ (80064c0 <I2C_RequestMemoryRead+0x1cc>)
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 fa44 	bl	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	00010002 	.word	0x00010002

080064c4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064e0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064f6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006504:	2200      	movs	r2, #0
 8006506:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	2200      	movs	r2, #0
 8006516:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006518:	7cfb      	ldrb	r3, [r7, #19]
 800651a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800651e:	2b21      	cmp	r3, #33	@ 0x21
 8006520:	d007      	beq.n	8006532 <I2C_DMAXferCplt+0x6e>
 8006522:	7cfb      	ldrb	r3, [r7, #19]
 8006524:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006528:	2b22      	cmp	r3, #34	@ 0x22
 800652a:	d131      	bne.n	8006590 <I2C_DMAXferCplt+0xcc>
 800652c:	7cbb      	ldrb	r3, [r7, #18]
 800652e:	2b20      	cmp	r3, #32
 8006530:	d12e      	bne.n	8006590 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006540:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2200      	movs	r2, #0
 8006546:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006548:	7cfb      	ldrb	r3, [r7, #19]
 800654a:	2b29      	cmp	r3, #41	@ 0x29
 800654c:	d10a      	bne.n	8006564 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2221      	movs	r2, #33	@ 0x21
 8006552:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2228      	movs	r2, #40	@ 0x28
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800655c:	6978      	ldr	r0, [r7, #20]
 800655e:	f7fe fbe6 	bl	8004d2e <HAL_I2C_SlaveTxCpltCallback>
 8006562:	e00c      	b.n	800657e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006564:	7cfb      	ldrb	r3, [r7, #19]
 8006566:	2b2a      	cmp	r3, #42	@ 0x2a
 8006568:	d109      	bne.n	800657e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2222      	movs	r2, #34	@ 0x22
 800656e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2228      	movs	r2, #40	@ 0x28
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006578:	6978      	ldr	r0, [r7, #20]
 800657a:	f7fe fbe1 	bl	8004d40 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800658c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800658e:	e074      	b.n	800667a <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d06e      	beq.n	800667a <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d107      	bne.n	80065b6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065b4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80065c4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065cc:	d009      	beq.n	80065e2 <I2C_DMAXferCplt+0x11e>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d006      	beq.n	80065e2 <I2C_DMAXferCplt+0x11e>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80065da:	d002      	beq.n	80065e2 <I2C_DMAXferCplt+0x11e>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d107      	bne.n	80065f2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065f0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006600:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006610:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2200      	movs	r2, #0
 8006616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006620:	6978      	ldr	r0, [r7, #20]
 8006622:	f7fe fbb5 	bl	8004d90 <HAL_I2C_ErrorCallback>
}
 8006626:	e028      	b.n	800667a <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b40      	cmp	r3, #64	@ 0x40
 800663a:	d10a      	bne.n	8006652 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2200      	movs	r2, #0
 8006648:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800664a:	6978      	ldr	r0, [r7, #20]
 800664c:	f7fc fa24 	bl	8002a98 <HAL_I2C_MemRxCpltCallback>
}
 8006650:	e013      	b.n	800667a <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d002      	beq.n	8006666 <I2C_DMAXferCplt+0x1a2>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b20      	cmp	r3, #32
 8006664:	d103      	bne.n	800666e <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2200      	movs	r2, #0
 800666a:	631a      	str	r2, [r3, #48]	@ 0x30
 800666c:	e002      	b.n	8006674 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2212      	movs	r2, #18
 8006672:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006674:	6978      	ldr	r0, [r7, #20]
 8006676:	f7fe fb51 	bl	8004d1c <HAL_I2C_MasterRxCpltCallback>
}
 800667a:	bf00      	nop
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800669c:	2200      	movs	r2, #0
 800669e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	2200      	movs	r2, #0
 80066ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066be:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066da:	f043 0210 	orr.w	r2, r3, #16
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7fe fb54 	bl	8004d90 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006708:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800670a:	4b4b      	ldr	r3, [pc, #300]	@ (8006838 <I2C_DMAAbort+0x148>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	08db      	lsrs	r3, r3, #3
 8006710:	4a4a      	ldr	r2, [pc, #296]	@ (800683c <I2C_DMAAbort+0x14c>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	0a1a      	lsrs	r2, r3, #8
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	00da      	lsls	r2, r3, #3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006736:	e00a      	b.n	800674e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3b01      	subs	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800674c:	d0ea      	beq.n	8006724 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675a:	2200      	movs	r2, #0
 800675c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676a:	2200      	movs	r2, #0
 800676c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800677c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2200      	movs	r2, #0
 8006782:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006790:	2200      	movs	r2, #0
 8006792:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	2200      	movs	r2, #0
 80067a2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0201 	bic.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b60      	cmp	r3, #96	@ 0x60
 80067be:	d10e      	bne.n	80067de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2200      	movs	r2, #0
 80067d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067d6:	6978      	ldr	r0, [r7, #20]
 80067d8:	f7fe fae3 	bl	8004da2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067dc:	e027      	b.n	800682e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067de:	7cfb      	ldrb	r3, [r7, #19]
 80067e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80067e4:	2b28      	cmp	r3, #40	@ 0x28
 80067e6:	d117      	bne.n	8006818 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006806:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2228      	movs	r2, #40	@ 0x28
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006816:	e007      	b.n	8006828 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006828:	6978      	ldr	r0, [r7, #20]
 800682a:	f7fe fab1 	bl	8004d90 <HAL_I2C_ErrorCallback>
}
 800682e:	bf00      	nop
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20000078 	.word	0x20000078
 800683c:	14f8b589 	.word	0x14f8b589

08006840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006850:	e048      	b.n	80068e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d044      	beq.n	80068e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fc fa73 	bl	8002d44 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d139      	bne.n	80068e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b01      	cmp	r3, #1
 8006878:	d10d      	bne.n	8006896 <I2C_WaitOnFlagUntilTimeout+0x56>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	43da      	mvns	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4013      	ands	r3, r2
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	bf0c      	ite	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2300      	movne	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	461a      	mov	r2, r3
 8006894:	e00c      	b.n	80068b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	43da      	mvns	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4013      	ands	r3, r2
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d116      	bne.n	80068e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d0:	f043 0220 	orr.w	r2, r3, #32
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e023      	b.n	800692c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	0c1b      	lsrs	r3, r3, #16
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d10d      	bne.n	800690a <I2C_WaitOnFlagUntilTimeout+0xca>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	43da      	mvns	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bf0c      	ite	eq
 8006900:	2301      	moveq	r3, #1
 8006902:	2300      	movne	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	e00c      	b.n	8006924 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	43da      	mvns	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	4013      	ands	r3, r2
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	bf0c      	ite	eq
 800691c:	2301      	moveq	r3, #1
 800691e:	2300      	movne	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	429a      	cmp	r2, r3
 8006928:	d093      	beq.n	8006852 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006942:	e071      	b.n	8006a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800694e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006952:	d123      	bne.n	800699c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006962:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800696c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	f043 0204 	orr.w	r2, r3, #4
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e067      	b.n	8006a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a2:	d041      	beq.n	8006a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069a4:	f7fc f9ce 	bl	8002d44 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d302      	bcc.n	80069ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d136      	bne.n	8006a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	0c1b      	lsrs	r3, r3, #16
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d10c      	bne.n	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	43da      	mvns	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4013      	ands	r3, r2
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bf14      	ite	ne
 80069d6:	2301      	movne	r3, #1
 80069d8:	2300      	moveq	r3, #0
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	e00b      	b.n	80069f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	43da      	mvns	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	4013      	ands	r3, r2
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bf14      	ite	ne
 80069f0:	2301      	movne	r3, #1
 80069f2:	2300      	moveq	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	f043 0220 	orr.w	r2, r3, #32
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e021      	b.n	8006a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	0c1b      	lsrs	r3, r3, #16
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d10c      	bne.n	8006a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	43da      	mvns	r2, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bf14      	ite	ne
 8006a44:	2301      	movne	r3, #1
 8006a46:	2300      	moveq	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	e00b      	b.n	8006a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	43da      	mvns	r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4013      	ands	r3, r2
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bf14      	ite	ne
 8006a5e:	2301      	movne	r3, #1
 8006a60:	2300      	moveq	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f47f af6d 	bne.w	8006944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a80:	e034      	b.n	8006aec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 f8b8 	bl	8006bf8 <I2C_IsAcknowledgeFailed>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e034      	b.n	8006afc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d028      	beq.n	8006aec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9a:	f7fc f953 	bl	8002d44 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d302      	bcc.n	8006ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d11d      	bne.n	8006aec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aba:	2b80      	cmp	r3, #128	@ 0x80
 8006abc:	d016      	beq.n	8006aec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad8:	f043 0220 	orr.w	r2, r3, #32
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e007      	b.n	8006afc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af6:	2b80      	cmp	r3, #128	@ 0x80
 8006af8:	d1c3      	bne.n	8006a82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b10:	e034      	b.n	8006b7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f870 	bl	8006bf8 <I2C_IsAcknowledgeFailed>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e034      	b.n	8006b8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b28:	d028      	beq.n	8006b7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2a:	f7fc f90b 	bl	8002d44 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d302      	bcc.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11d      	bne.n	8006b7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d016      	beq.n	8006b7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	f043 0220 	orr.w	r2, r3, #32
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e007      	b.n	8006b8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d1c3      	bne.n	8006b12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ba0:	4b13      	ldr	r3, [pc, #76]	@ (8006bf0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	08db      	lsrs	r3, r3, #3
 8006ba6:	4a13      	ldr	r2, [pc, #76]	@ (8006bf4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bac:	0a1a      	lsrs	r2, r3, #8
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d107      	bne.n	8006bd2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc6:	f043 0220 	orr.w	r2, r3, #32
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e008      	b.n	8006be4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be0:	d0e9      	beq.n	8006bb6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	20000078 	.word	0x20000078
 8006bf4:	14f8b589 	.word	0x14f8b589

08006bf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c0e:	d11b      	bne.n	8006c48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c34:	f043 0204 	orr.w	r2, r3, #4
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e000      	b.n	8006c4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c60:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006c64:	d103      	bne.n	8006c6e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c6c:	e007      	b.n	8006c7e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006c76:	d102      	bne.n	8006c7e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2208      	movs	r2, #8
 8006c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr

08006c88 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006c8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006c98:	f000 f808 	bl	8006cac <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006c9c:	4b02      	ldr	r3, [pc, #8]	@ (8006ca8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006c9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006ca2:	615a      	str	r2, [r3, #20]
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40010400 	.word	0x40010400

08006cac <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006cb0:	bf00      	nop
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e272      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8087 	beq.w	8006de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cd8:	4b92      	ldr	r3, [pc, #584]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f003 030c 	and.w	r3, r3, #12
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d00c      	beq.n	8006cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006ce4:	4b8f      	ldr	r3, [pc, #572]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f003 030c 	and.w	r3, r3, #12
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d112      	bne.n	8006d16 <HAL_RCC_OscConfig+0x5e>
 8006cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cfc:	d10b      	bne.n	8006d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cfe:	4b89      	ldr	r3, [pc, #548]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d06c      	beq.n	8006de4 <HAL_RCC_OscConfig+0x12c>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d168      	bne.n	8006de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e24c      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1e:	d106      	bne.n	8006d2e <HAL_RCC_OscConfig+0x76>
 8006d20:	4b80      	ldr	r3, [pc, #512]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a7f      	ldr	r2, [pc, #508]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	e02e      	b.n	8006d8c <HAL_RCC_OscConfig+0xd4>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10c      	bne.n	8006d50 <HAL_RCC_OscConfig+0x98>
 8006d36:	4b7b      	ldr	r3, [pc, #492]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a7a      	ldr	r2, [pc, #488]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	4b78      	ldr	r3, [pc, #480]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a77      	ldr	r2, [pc, #476]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	e01d      	b.n	8006d8c <HAL_RCC_OscConfig+0xd4>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d58:	d10c      	bne.n	8006d74 <HAL_RCC_OscConfig+0xbc>
 8006d5a:	4b72      	ldr	r3, [pc, #456]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a71      	ldr	r2, [pc, #452]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	4b6f      	ldr	r3, [pc, #444]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a6e      	ldr	r2, [pc, #440]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	e00b      	b.n	8006d8c <HAL_RCC_OscConfig+0xd4>
 8006d74:	4b6b      	ldr	r3, [pc, #428]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a6a      	ldr	r2, [pc, #424]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	4b68      	ldr	r3, [pc, #416]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a67      	ldr	r2, [pc, #412]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d013      	beq.n	8006dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d94:	f7fb ffd6 	bl	8002d44 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d9c:	f7fb ffd2 	bl	8002d44 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b64      	cmp	r3, #100	@ 0x64
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e200      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dae:	4b5d      	ldr	r3, [pc, #372]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f0      	beq.n	8006d9c <HAL_RCC_OscConfig+0xe4>
 8006dba:	e014      	b.n	8006de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dbc:	f7fb ffc2 	bl	8002d44 <HAL_GetTick>
 8006dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc2:	e008      	b.n	8006dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dc4:	f7fb ffbe 	bl	8002d44 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	2b64      	cmp	r3, #100	@ 0x64
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e1ec      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dd6:	4b53      	ldr	r3, [pc, #332]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f0      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x10c>
 8006de2:	e000      	b.n	8006de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d063      	beq.n	8006eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006df2:	4b4c      	ldr	r3, [pc, #304]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006dfe:	4b49      	ldr	r3, [pc, #292]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f003 030c 	and.w	r3, r3, #12
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d11c      	bne.n	8006e44 <HAL_RCC_OscConfig+0x18c>
 8006e0a:	4b46      	ldr	r3, [pc, #280]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d116      	bne.n	8006e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e16:	4b43      	ldr	r3, [pc, #268]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <HAL_RCC_OscConfig+0x176>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d001      	beq.n	8006e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e1c0      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	4939      	ldr	r1, [pc, #228]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e42:	e03a      	b.n	8006eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d020      	beq.n	8006e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e4c:	4b36      	ldr	r3, [pc, #216]	@ (8006f28 <HAL_RCC_OscConfig+0x270>)
 8006e4e:	2201      	movs	r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e52:	f7fb ff77 	bl	8002d44 <HAL_GetTick>
 8006e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e58:	e008      	b.n	8006e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e5a:	f7fb ff73 	bl	8002d44 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e1a1      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0f0      	beq.n	8006e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e78:	4b2a      	ldr	r3, [pc, #168]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	4927      	ldr	r1, [pc, #156]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	600b      	str	r3, [r1, #0]
 8006e8c:	e015      	b.n	8006eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e8e:	4b26      	ldr	r3, [pc, #152]	@ (8006f28 <HAL_RCC_OscConfig+0x270>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e94:	f7fb ff56 	bl	8002d44 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e9c:	f7fb ff52 	bl	8002d44 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e180      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eae:	4b1d      	ldr	r3, [pc, #116]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d03a      	beq.n	8006f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d019      	beq.n	8006f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ece:	4b17      	ldr	r3, [pc, #92]	@ (8006f2c <HAL_RCC_OscConfig+0x274>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ed4:	f7fb ff36 	bl	8002d44 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006edc:	f7fb ff32 	bl	8002d44 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e160      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eee:	4b0d      	ldr	r3, [pc, #52]	@ (8006f24 <HAL_RCC_OscConfig+0x26c>)
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f0      	beq.n	8006edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006efa:	2001      	movs	r0, #1
 8006efc:	f000 faba 	bl	8007474 <RCC_Delay>
 8006f00:	e01c      	b.n	8006f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f02:	4b0a      	ldr	r3, [pc, #40]	@ (8006f2c <HAL_RCC_OscConfig+0x274>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f08:	f7fb ff1c 	bl	8002d44 <HAL_GetTick>
 8006f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f0e:	e00f      	b.n	8006f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f10:	f7fb ff18 	bl	8002d44 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d908      	bls.n	8006f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e146      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
 8006f22:	bf00      	nop
 8006f24:	40021000 	.word	0x40021000
 8006f28:	42420000 	.word	0x42420000
 8006f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f30:	4b92      	ldr	r3, [pc, #584]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e9      	bne.n	8006f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 80a6 	beq.w	8007096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f4e:	4b8b      	ldr	r3, [pc, #556]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10d      	bne.n	8006f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f5a:	4b88      	ldr	r3, [pc, #544]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	4a87      	ldr	r2, [pc, #540]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f64:	61d3      	str	r3, [r2, #28]
 8006f66:	4b85      	ldr	r3, [pc, #532]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f76:	4b82      	ldr	r3, [pc, #520]	@ (8007180 <HAL_RCC_OscConfig+0x4c8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d118      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f82:	4b7f      	ldr	r3, [pc, #508]	@ (8007180 <HAL_RCC_OscConfig+0x4c8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a7e      	ldr	r2, [pc, #504]	@ (8007180 <HAL_RCC_OscConfig+0x4c8>)
 8006f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f8e:	f7fb fed9 	bl	8002d44 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f96:	f7fb fed5 	bl	8002d44 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b64      	cmp	r3, #100	@ 0x64
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e103      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa8:	4b75      	ldr	r3, [pc, #468]	@ (8007180 <HAL_RCC_OscConfig+0x4c8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d0f0      	beq.n	8006f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d106      	bne.n	8006fca <HAL_RCC_OscConfig+0x312>
 8006fbc:	4b6f      	ldr	r3, [pc, #444]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006fc2:	f043 0301 	orr.w	r3, r3, #1
 8006fc6:	6213      	str	r3, [r2, #32]
 8006fc8:	e02d      	b.n	8007026 <HAL_RCC_OscConfig+0x36e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10c      	bne.n	8006fec <HAL_RCC_OscConfig+0x334>
 8006fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	4a69      	ldr	r2, [pc, #420]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006fd8:	f023 0301 	bic.w	r3, r3, #1
 8006fdc:	6213      	str	r3, [r2, #32]
 8006fde:	4b67      	ldr	r3, [pc, #412]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	4a66      	ldr	r2, [pc, #408]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006fe4:	f023 0304 	bic.w	r3, r3, #4
 8006fe8:	6213      	str	r3, [r2, #32]
 8006fea:	e01c      	b.n	8007026 <HAL_RCC_OscConfig+0x36e>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	2b05      	cmp	r3, #5
 8006ff2:	d10c      	bne.n	800700e <HAL_RCC_OscConfig+0x356>
 8006ff4:	4b61      	ldr	r3, [pc, #388]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	4a60      	ldr	r2, [pc, #384]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8006ffa:	f043 0304 	orr.w	r3, r3, #4
 8006ffe:	6213      	str	r3, [r2, #32]
 8007000:	4b5e      	ldr	r3, [pc, #376]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	4a5d      	ldr	r2, [pc, #372]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	6213      	str	r3, [r2, #32]
 800700c:	e00b      	b.n	8007026 <HAL_RCC_OscConfig+0x36e>
 800700e:	4b5b      	ldr	r3, [pc, #364]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	4a5a      	ldr	r2, [pc, #360]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8007014:	f023 0301 	bic.w	r3, r3, #1
 8007018:	6213      	str	r3, [r2, #32]
 800701a:	4b58      	ldr	r3, [pc, #352]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	4a57      	ldr	r2, [pc, #348]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8007020:	f023 0304 	bic.w	r3, r3, #4
 8007024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d015      	beq.n	800705a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800702e:	f7fb fe89 	bl	8002d44 <HAL_GetTick>
 8007032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007034:	e00a      	b.n	800704c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007036:	f7fb fe85 	bl	8002d44 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007044:	4293      	cmp	r3, r2
 8007046:	d901      	bls.n	800704c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e0b1      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800704c:	4b4b      	ldr	r3, [pc, #300]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0ee      	beq.n	8007036 <HAL_RCC_OscConfig+0x37e>
 8007058:	e014      	b.n	8007084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800705a:	f7fb fe73 	bl	8002d44 <HAL_GetTick>
 800705e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007060:	e00a      	b.n	8007078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007062:	f7fb fe6f 	bl	8002d44 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007070:	4293      	cmp	r3, r2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e09b      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007078:	4b40      	ldr	r3, [pc, #256]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1ee      	bne.n	8007062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d105      	bne.n	8007096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800708a:	4b3c      	ldr	r3, [pc, #240]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	4a3b      	ldr	r2, [pc, #236]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8007090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 8087 	beq.w	80071ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070a0:	4b36      	ldr	r3, [pc, #216]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d061      	beq.n	8007170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d146      	bne.n	8007142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b4:	4b33      	ldr	r3, [pc, #204]	@ (8007184 <HAL_RCC_OscConfig+0x4cc>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ba:	f7fb fe43 	bl	8002d44 <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070c0:	e008      	b.n	80070d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c2:	f7fb fe3f 	bl	8002d44 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e06d      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070d4:	4b29      	ldr	r3, [pc, #164]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1f0      	bne.n	80070c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070e8:	d108      	bne.n	80070fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80070ea:	4b24      	ldr	r3, [pc, #144]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	4921      	ldr	r1, [pc, #132]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070fc:	4b1f      	ldr	r3, [pc, #124]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a19      	ldr	r1, [r3, #32]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710c:	430b      	orrs	r3, r1
 800710e:	491b      	ldr	r1, [pc, #108]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8007110:	4313      	orrs	r3, r2
 8007112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007114:	4b1b      	ldr	r3, [pc, #108]	@ (8007184 <HAL_RCC_OscConfig+0x4cc>)
 8007116:	2201      	movs	r2, #1
 8007118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711a:	f7fb fe13 	bl	8002d44 <HAL_GetTick>
 800711e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007120:	e008      	b.n	8007134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007122:	f7fb fe0f 	bl	8002d44 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e03d      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007134:	4b11      	ldr	r3, [pc, #68]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0f0      	beq.n	8007122 <HAL_RCC_OscConfig+0x46a>
 8007140:	e035      	b.n	80071ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007142:	4b10      	ldr	r3, [pc, #64]	@ (8007184 <HAL_RCC_OscConfig+0x4cc>)
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007148:	f7fb fdfc 	bl	8002d44 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007150:	f7fb fdf8 	bl	8002d44 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e026      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007162:	4b06      	ldr	r3, [pc, #24]	@ (800717c <HAL_RCC_OscConfig+0x4c4>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x498>
 800716e:	e01e      	b.n	80071ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d107      	bne.n	8007188 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e019      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
 800717c:	40021000 	.word	0x40021000
 8007180:	40007000 	.word	0x40007000
 8007184:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007188:	4b0b      	ldr	r3, [pc, #44]	@ (80071b8 <HAL_RCC_OscConfig+0x500>)
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	429a      	cmp	r2, r3
 800719a:	d106      	bne.n	80071aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d001      	beq.n	80071ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40021000 	.word	0x40021000

080071bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e0d0      	b.n	8007372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071d0:	4b6a      	ldr	r3, [pc, #424]	@ (800737c <HAL_RCC_ClockConfig+0x1c0>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d910      	bls.n	8007200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071de:	4b67      	ldr	r3, [pc, #412]	@ (800737c <HAL_RCC_ClockConfig+0x1c0>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f023 0207 	bic.w	r2, r3, #7
 80071e6:	4965      	ldr	r1, [pc, #404]	@ (800737c <HAL_RCC_ClockConfig+0x1c0>)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ee:	4b63      	ldr	r3, [pc, #396]	@ (800737c <HAL_RCC_ClockConfig+0x1c0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d001      	beq.n	8007200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0b8      	b.n	8007372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d020      	beq.n	800724e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007218:	4b59      	ldr	r3, [pc, #356]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	4a58      	ldr	r2, [pc, #352]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 800721e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007230:	4b53      	ldr	r3, [pc, #332]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	4a52      	ldr	r2, [pc, #328]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 8007236:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800723a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800723c:	4b50      	ldr	r3, [pc, #320]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	494d      	ldr	r1, [pc, #308]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 800724a:	4313      	orrs	r3, r2
 800724c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d040      	beq.n	80072dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d107      	bne.n	8007272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007262:	4b47      	ldr	r3, [pc, #284]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d115      	bne.n	800729a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e07f      	b.n	8007372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b02      	cmp	r3, #2
 8007278:	d107      	bne.n	800728a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800727a:	4b41      	ldr	r3, [pc, #260]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e073      	b.n	8007372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800728a:	4b3d      	ldr	r3, [pc, #244]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e06b      	b.n	8007372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800729a:	4b39      	ldr	r3, [pc, #228]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f023 0203 	bic.w	r2, r3, #3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	4936      	ldr	r1, [pc, #216]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072ac:	f7fb fd4a 	bl	8002d44 <HAL_GetTick>
 80072b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b2:	e00a      	b.n	80072ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072b4:	f7fb fd46 	bl	8002d44 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e053      	b.n	8007372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f003 020c 	and.w	r2, r3, #12
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	429a      	cmp	r2, r3
 80072da:	d1eb      	bne.n	80072b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072dc:	4b27      	ldr	r3, [pc, #156]	@ (800737c <HAL_RCC_ClockConfig+0x1c0>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d210      	bcs.n	800730c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ea:	4b24      	ldr	r3, [pc, #144]	@ (800737c <HAL_RCC_ClockConfig+0x1c0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f023 0207 	bic.w	r2, r3, #7
 80072f2:	4922      	ldr	r1, [pc, #136]	@ (800737c <HAL_RCC_ClockConfig+0x1c0>)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072fa:	4b20      	ldr	r3, [pc, #128]	@ (800737c <HAL_RCC_ClockConfig+0x1c0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	429a      	cmp	r2, r3
 8007306:	d001      	beq.n	800730c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e032      	b.n	8007372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d008      	beq.n	800732a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007318:	4b19      	ldr	r3, [pc, #100]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	4916      	ldr	r1, [pc, #88]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 8007326:	4313      	orrs	r3, r2
 8007328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d009      	beq.n	800734a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007336:	4b12      	ldr	r3, [pc, #72]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	490e      	ldr	r1, [pc, #56]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 8007346:	4313      	orrs	r3, r2
 8007348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800734a:	f000 f821 	bl	8007390 <HAL_RCC_GetSysClockFreq>
 800734e:	4602      	mov	r2, r0
 8007350:	4b0b      	ldr	r3, [pc, #44]	@ (8007380 <HAL_RCC_ClockConfig+0x1c4>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	091b      	lsrs	r3, r3, #4
 8007356:	f003 030f 	and.w	r3, r3, #15
 800735a:	490a      	ldr	r1, [pc, #40]	@ (8007384 <HAL_RCC_ClockConfig+0x1c8>)
 800735c:	5ccb      	ldrb	r3, [r1, r3]
 800735e:	fa22 f303 	lsr.w	r3, r2, r3
 8007362:	4a09      	ldr	r2, [pc, #36]	@ (8007388 <HAL_RCC_ClockConfig+0x1cc>)
 8007364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007366:	4b09      	ldr	r3, [pc, #36]	@ (800738c <HAL_RCC_ClockConfig+0x1d0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f7fb fca8 	bl	8002cc0 <HAL_InitTick>

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40022000 	.word	0x40022000
 8007380:	40021000 	.word	0x40021000
 8007384:	0800bf20 	.word	0x0800bf20
 8007388:	20000078 	.word	0x20000078
 800738c:	2000007c 	.word	0x2000007c

08007390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	2300      	movs	r3, #0
 800739c:	60bb      	str	r3, [r7, #8]
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	2300      	movs	r3, #0
 80073a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80073aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x94>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f003 030c 	and.w	r3, r3, #12
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d002      	beq.n	80073c0 <HAL_RCC_GetSysClockFreq+0x30>
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d003      	beq.n	80073c6 <HAL_RCC_GetSysClockFreq+0x36>
 80073be:	e027      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073c0:	4b19      	ldr	r3, [pc, #100]	@ (8007428 <HAL_RCC_GetSysClockFreq+0x98>)
 80073c2:	613b      	str	r3, [r7, #16]
      break;
 80073c4:	e027      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	0c9b      	lsrs	r3, r3, #18
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	4a17      	ldr	r2, [pc, #92]	@ (800742c <HAL_RCC_GetSysClockFreq+0x9c>)
 80073d0:	5cd3      	ldrb	r3, [r2, r3]
 80073d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d010      	beq.n	8007400 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80073de:	4b11      	ldr	r3, [pc, #68]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x94>)
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	0c5b      	lsrs	r3, r3, #17
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	4a11      	ldr	r2, [pc, #68]	@ (8007430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80073ea:	5cd3      	ldrb	r3, [r2, r3]
 80073ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007428 <HAL_RCC_GetSysClockFreq+0x98>)
 80073f2:	fb03 f202 	mul.w	r2, r3, r2
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	e004      	b.n	800740a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a0c      	ldr	r2, [pc, #48]	@ (8007434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007404:	fb02 f303 	mul.w	r3, r2, r3
 8007408:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	613b      	str	r3, [r7, #16]
      break;
 800740e:	e002      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007410:	4b05      	ldr	r3, [pc, #20]	@ (8007428 <HAL_RCC_GetSysClockFreq+0x98>)
 8007412:	613b      	str	r3, [r7, #16]
      break;
 8007414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007416:	693b      	ldr	r3, [r7, #16]
}
 8007418:	4618      	mov	r0, r3
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	40021000 	.word	0x40021000
 8007428:	007a1200 	.word	0x007a1200
 800742c:	0800bf38 	.word	0x0800bf38
 8007430:	0800bf48 	.word	0x0800bf48
 8007434:	003d0900 	.word	0x003d0900

08007438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800743c:	4b02      	ldr	r3, [pc, #8]	@ (8007448 <HAL_RCC_GetHCLKFreq+0x10>)
 800743e:	681b      	ldr	r3, [r3, #0]
}
 8007440:	4618      	mov	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr
 8007448:	20000078 	.word	0x20000078

0800744c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007450:	f7ff fff2 	bl	8007438 <HAL_RCC_GetHCLKFreq>
 8007454:	4602      	mov	r2, r0
 8007456:	4b05      	ldr	r3, [pc, #20]	@ (800746c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	4903      	ldr	r1, [pc, #12]	@ (8007470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007462:	5ccb      	ldrb	r3, [r1, r3]
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007468:	4618      	mov	r0, r3
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40021000 	.word	0x40021000
 8007470:	0800bf30 	.word	0x0800bf30

08007474 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800747c:	4b0a      	ldr	r3, [pc, #40]	@ (80074a8 <RCC_Delay+0x34>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0a      	ldr	r2, [pc, #40]	@ (80074ac <RCC_Delay+0x38>)
 8007482:	fba2 2303 	umull	r2, r3, r2, r3
 8007486:	0a5b      	lsrs	r3, r3, #9
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	fb02 f303 	mul.w	r3, r2, r3
 800748e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007490:	bf00      	nop
  }
  while (Delay --);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1e5a      	subs	r2, r3, #1
 8007496:	60fa      	str	r2, [r7, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f9      	bne.n	8007490 <RCC_Delay+0x1c>
}
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr
 80074a8:	20000078 	.word	0x20000078
 80074ac:	10624dd3 	.word	0x10624dd3

080074b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e041      	b.n	8007546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fb f9a0 	bl	800281c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f000 fc18 	bl	8007d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b01      	cmp	r3, #1
 8007562:	d001      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e03a      	b.n	80075de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a18      	ldr	r2, [pc, #96]	@ (80075e8 <HAL_TIM_Base_Start_IT+0x98>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00e      	beq.n	80075a8 <HAL_TIM_Base_Start_IT+0x58>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007592:	d009      	beq.n	80075a8 <HAL_TIM_Base_Start_IT+0x58>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a14      	ldr	r2, [pc, #80]	@ (80075ec <HAL_TIM_Base_Start_IT+0x9c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d004      	beq.n	80075a8 <HAL_TIM_Base_Start_IT+0x58>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a13      	ldr	r2, [pc, #76]	@ (80075f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d111      	bne.n	80075cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b06      	cmp	r3, #6
 80075b8:	d010      	beq.n	80075dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0201 	orr.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ca:	e007      	b.n	80075dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0201 	orr.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr
 80075e8:	40012c00 	.word	0x40012c00
 80075ec:	40000400 	.word	0x40000400
 80075f0:	40000800 	.word	0x40000800

080075f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e041      	b.n	800768a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d106      	bne.n	8007620 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f839 	bl	8007692 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3304      	adds	r3, #4
 8007630:	4619      	mov	r1, r3
 8007632:	4610      	mov	r0, r2
 8007634:	f000 fb76 	bl	8007d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <HAL_TIM_PWM_Start+0x24>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	bf14      	ite	ne
 80076c0:	2301      	movne	r3, #1
 80076c2:	2300      	moveq	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	e022      	b.n	800770e <HAL_TIM_PWM_Start+0x6a>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d109      	bne.n	80076e2 <HAL_TIM_PWM_Start+0x3e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	bf14      	ite	ne
 80076da:	2301      	movne	r3, #1
 80076dc:	2300      	moveq	r3, #0
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	e015      	b.n	800770e <HAL_TIM_PWM_Start+0x6a>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d109      	bne.n	80076fc <HAL_TIM_PWM_Start+0x58>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	bf14      	ite	ne
 80076f4:	2301      	movne	r3, #1
 80076f6:	2300      	moveq	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	e008      	b.n	800770e <HAL_TIM_PWM_Start+0x6a>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	bf14      	ite	ne
 8007708:	2301      	movne	r3, #1
 800770a:	2300      	moveq	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e05e      	b.n	80077d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <HAL_TIM_PWM_Start+0x82>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007724:	e013      	b.n	800774e <HAL_TIM_PWM_Start+0xaa>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b04      	cmp	r3, #4
 800772a:	d104      	bne.n	8007736 <HAL_TIM_PWM_Start+0x92>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007734:	e00b      	b.n	800774e <HAL_TIM_PWM_Start+0xaa>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b08      	cmp	r3, #8
 800773a:	d104      	bne.n	8007746 <HAL_TIM_PWM_Start+0xa2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007744:	e003      	b.n	800774e <HAL_TIM_PWM_Start+0xaa>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2201      	movs	r2, #1
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fd70 	bl	800823c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1e      	ldr	r2, [pc, #120]	@ (80077dc <HAL_TIM_PWM_Start+0x138>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d107      	bne.n	8007776 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007774:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a18      	ldr	r2, [pc, #96]	@ (80077dc <HAL_TIM_PWM_Start+0x138>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00e      	beq.n	800779e <HAL_TIM_PWM_Start+0xfa>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007788:	d009      	beq.n	800779e <HAL_TIM_PWM_Start+0xfa>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a14      	ldr	r2, [pc, #80]	@ (80077e0 <HAL_TIM_PWM_Start+0x13c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d004      	beq.n	800779e <HAL_TIM_PWM_Start+0xfa>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a12      	ldr	r2, [pc, #72]	@ (80077e4 <HAL_TIM_PWM_Start+0x140>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d111      	bne.n	80077c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f003 0307 	and.w	r3, r3, #7
 80077a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b06      	cmp	r3, #6
 80077ae:	d010      	beq.n	80077d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c0:	e007      	b.n	80077d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0201 	orr.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40012c00 	.word	0x40012c00
 80077e0:	40000400 	.word	0x40000400
 80077e4:	40000800 	.word	0x40000800

080077e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d020      	beq.n	800784c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01b      	beq.n	800784c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0202 	mvn.w	r2, #2
 800781c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa5a 	bl	8007cec <HAL_TIM_IC_CaptureCallback>
 8007838:	e005      	b.n	8007846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa4d 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fa5c 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d020      	beq.n	8007898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01b      	beq.n	8007898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0204 	mvn.w	r2, #4
 8007868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2202      	movs	r2, #2
 800786e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa34 	bl	8007cec <HAL_TIM_IC_CaptureCallback>
 8007884:	e005      	b.n	8007892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa27 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa36 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d020      	beq.n	80078e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01b      	beq.n	80078e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0208 	mvn.w	r2, #8
 80078b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2204      	movs	r2, #4
 80078ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa0e 	bl	8007cec <HAL_TIM_IC_CaptureCallback>
 80078d0:	e005      	b.n	80078de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa01 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fa10 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d020      	beq.n	8007930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01b      	beq.n	8007930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f06f 0210 	mvn.w	r2, #16
 8007900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2208      	movs	r2, #8
 8007906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f9e8 	bl	8007cec <HAL_TIM_IC_CaptureCallback>
 800791c:	e005      	b.n	800792a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f9db 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f9ea 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00c      	beq.n	8007954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f06f 0201 	mvn.w	r2, #1
 800794c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7fb f864 	bl	8002a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fd3e 	bl	80083f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00c      	beq.n	800799c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d007      	beq.n	800799c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f9ba 	bl	8007d10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00c      	beq.n	80079c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0220 	mvn.w	r2, #32
 80079b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fd11 	bl	80083e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079c0:	bf00      	nop
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079e2:	2302      	movs	r3, #2
 80079e4:	e0ae      	b.n	8007b44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b0c      	cmp	r3, #12
 80079f2:	f200 809f 	bhi.w	8007b34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a31 	.word	0x08007a31
 8007a00:	08007b35 	.word	0x08007b35
 8007a04:	08007b35 	.word	0x08007b35
 8007a08:	08007b35 	.word	0x08007b35
 8007a0c:	08007a71 	.word	0x08007a71
 8007a10:	08007b35 	.word	0x08007b35
 8007a14:	08007b35 	.word	0x08007b35
 8007a18:	08007b35 	.word	0x08007b35
 8007a1c:	08007ab3 	.word	0x08007ab3
 8007a20:	08007b35 	.word	0x08007b35
 8007a24:	08007b35 	.word	0x08007b35
 8007a28:	08007b35 	.word	0x08007b35
 8007a2c:	08007af3 	.word	0x08007af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 f9e2 	bl	8007e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699a      	ldr	r2, [r3, #24]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0208 	orr.w	r2, r2, #8
 8007a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 0204 	bic.w	r2, r2, #4
 8007a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6999      	ldr	r1, [r3, #24]
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	691a      	ldr	r2, [r3, #16]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	619a      	str	r2, [r3, #24]
      break;
 8007a6e:	e064      	b.n	8007b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68b9      	ldr	r1, [r7, #8]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fa28 	bl	8007ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699a      	ldr	r2, [r3, #24]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6999      	ldr	r1, [r3, #24]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	021a      	lsls	r2, r3, #8
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	619a      	str	r2, [r3, #24]
      break;
 8007ab0:	e043      	b.n	8007b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fa71 	bl	8007fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	69da      	ldr	r2, [r3, #28]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0208 	orr.w	r2, r2, #8
 8007acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0204 	bic.w	r2, r2, #4
 8007adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69d9      	ldr	r1, [r3, #28]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	61da      	str	r2, [r3, #28]
      break;
 8007af0:	e023      	b.n	8007b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fabb 	bl	8008074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69d9      	ldr	r1, [r3, #28]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	021a      	lsls	r2, r3, #8
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	61da      	str	r2, [r3, #28]
      break;
 8007b32:	e002      	b.n	8007b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
      break;
 8007b38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_TIM_ConfigClockSource+0x1c>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e0b4      	b.n	8007cd2 <HAL_TIM_ConfigClockSource+0x186>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ba0:	d03e      	beq.n	8007c20 <HAL_TIM_ConfigClockSource+0xd4>
 8007ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ba6:	f200 8087 	bhi.w	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bae:	f000 8086 	beq.w	8007cbe <HAL_TIM_ConfigClockSource+0x172>
 8007bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb6:	d87f      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb8:	2b70      	cmp	r3, #112	@ 0x70
 8007bba:	d01a      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8007bbc:	2b70      	cmp	r3, #112	@ 0x70
 8007bbe:	d87b      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc0:	2b60      	cmp	r3, #96	@ 0x60
 8007bc2:	d050      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x11a>
 8007bc4:	2b60      	cmp	r3, #96	@ 0x60
 8007bc6:	d877      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc8:	2b50      	cmp	r3, #80	@ 0x50
 8007bca:	d03c      	beq.n	8007c46 <HAL_TIM_ConfigClockSource+0xfa>
 8007bcc:	2b50      	cmp	r3, #80	@ 0x50
 8007bce:	d873      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd0:	2b40      	cmp	r3, #64	@ 0x40
 8007bd2:	d058      	beq.n	8007c86 <HAL_TIM_ConfigClockSource+0x13a>
 8007bd4:	2b40      	cmp	r3, #64	@ 0x40
 8007bd6:	d86f      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd8:	2b30      	cmp	r3, #48	@ 0x30
 8007bda:	d064      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8007bdc:	2b30      	cmp	r3, #48	@ 0x30
 8007bde:	d86b      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d060      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d867      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d05c      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8007bec:	2b10      	cmp	r3, #16
 8007bee:	d05a      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8007bf0:	e062      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c02:	f000 fafc 	bl	80081fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	609a      	str	r2, [r3, #8]
      break;
 8007c1e:	e04f      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c30:	f000 fae5 	bl	80081fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689a      	ldr	r2, [r3, #8]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c42:	609a      	str	r2, [r3, #8]
      break;
 8007c44:	e03c      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c52:	461a      	mov	r2, r3
 8007c54:	f000 fa5c 	bl	8008110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2150      	movs	r1, #80	@ 0x50
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fab3 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007c64:	e02c      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c72:	461a      	mov	r2, r3
 8007c74:	f000 fa7a 	bl	800816c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2160      	movs	r1, #96	@ 0x60
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 faa3 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007c84:	e01c      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c92:	461a      	mov	r2, r3
 8007c94:	f000 fa3c 	bl	8008110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2140      	movs	r1, #64	@ 0x40
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fa93 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007ca4:	e00c      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	f000 fa8a 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007cb6:	e003      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbc:	e000      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bc80      	pop	{r7}
 8007cea:	4770      	bx	lr

08007cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr

08007cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr

08007d10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr
	...

08007d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a2f      	ldr	r2, [pc, #188]	@ (8007df4 <TIM_Base_SetConfig+0xd0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00b      	beq.n	8007d54 <TIM_Base_SetConfig+0x30>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d42:	d007      	beq.n	8007d54 <TIM_Base_SetConfig+0x30>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a2c      	ldr	r2, [pc, #176]	@ (8007df8 <TIM_Base_SetConfig+0xd4>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d003      	beq.n	8007d54 <TIM_Base_SetConfig+0x30>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8007dfc <TIM_Base_SetConfig+0xd8>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d108      	bne.n	8007d66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a22      	ldr	r2, [pc, #136]	@ (8007df4 <TIM_Base_SetConfig+0xd0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00b      	beq.n	8007d86 <TIM_Base_SetConfig+0x62>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d74:	d007      	beq.n	8007d86 <TIM_Base_SetConfig+0x62>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a1f      	ldr	r2, [pc, #124]	@ (8007df8 <TIM_Base_SetConfig+0xd4>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d003      	beq.n	8007d86 <TIM_Base_SetConfig+0x62>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a1e      	ldr	r2, [pc, #120]	@ (8007dfc <TIM_Base_SetConfig+0xd8>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d108      	bne.n	8007d98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8007df4 <TIM_Base_SetConfig+0xd0>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d103      	bne.n	8007dcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f023 0201 	bic.w	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	611a      	str	r2, [r3, #16]
  }
}
 8007dea:	bf00      	nop
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bc80      	pop	{r7}
 8007df2:	4770      	bx	lr
 8007df4:	40012c00 	.word	0x40012c00
 8007df8:	40000400 	.word	0x40000400
 8007dfc:	40000800 	.word	0x40000800

08007e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	f023 0201 	bic.w	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f023 0302 	bic.w	r3, r3, #2
 8007e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a1c      	ldr	r2, [pc, #112]	@ (8007ec8 <TIM_OC1_SetConfig+0xc8>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d10c      	bne.n	8007e76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f023 0308 	bic.w	r3, r3, #8
 8007e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f023 0304 	bic.w	r3, r3, #4
 8007e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a13      	ldr	r2, [pc, #76]	@ (8007ec8 <TIM_OC1_SetConfig+0xc8>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d111      	bne.n	8007ea2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	621a      	str	r2, [r3, #32]
}
 8007ebc:	bf00      	nop
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40012c00 	.word	0x40012c00

08007ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	f023 0210 	bic.w	r2, r3, #16
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f023 0320 	bic.w	r3, r3, #32
 8007f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a1d      	ldr	r2, [pc, #116]	@ (8007f9c <TIM_OC2_SetConfig+0xd0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d10d      	bne.n	8007f48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a14      	ldr	r2, [pc, #80]	@ (8007f9c <TIM_OC2_SetConfig+0xd0>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d113      	bne.n	8007f78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	621a      	str	r2, [r3, #32]
}
 8007f92:	bf00      	nop
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr
 8007f9c:	40012c00 	.word	0x40012c00

08007fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f023 0303 	bic.w	r3, r3, #3
 8007fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	021b      	lsls	r3, r3, #8
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8008070 <TIM_OC3_SetConfig+0xd0>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d10d      	bne.n	800801a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	021b      	lsls	r3, r3, #8
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a14      	ldr	r2, [pc, #80]	@ (8008070 <TIM_OC3_SetConfig+0xd0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d113      	bne.n	800804a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4313      	orrs	r3, r2
 8008048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	621a      	str	r2, [r3, #32]
}
 8008064:	bf00      	nop
 8008066:	371c      	adds	r7, #28
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40012c00 	.word	0x40012c00

08008074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	031b      	lsls	r3, r3, #12
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a0f      	ldr	r2, [pc, #60]	@ (800810c <TIM_OC4_SetConfig+0x98>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d109      	bne.n	80080e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	019b      	lsls	r3, r3, #6
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	621a      	str	r2, [r3, #32]
}
 8008102:	bf00      	nop
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	bc80      	pop	{r7}
 800810a:	4770      	bx	lr
 800810c:	40012c00 	.word	0x40012c00

08008110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	f023 0201 	bic.w	r2, r3, #1
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800813a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	011b      	lsls	r3, r3, #4
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	4313      	orrs	r3, r2
 8008144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f023 030a 	bic.w	r3, r3, #10
 800814c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	621a      	str	r2, [r3, #32]
}
 8008162:	bf00      	nop
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	bc80      	pop	{r7}
 800816a:	4770      	bx	lr

0800816c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	f023 0210 	bic.w	r2, r3, #16
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	031b      	lsls	r3, r3, #12
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	4313      	orrs	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80081a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	621a      	str	r2, [r3, #32]
}
 80081c0:	bf00      	nop
 80081c2:	371c      	adds	r7, #28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bc80      	pop	{r7}
 80081c8:	4770      	bx	lr

080081ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f043 0307 	orr.w	r3, r3, #7
 80081ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	609a      	str	r2, [r3, #8]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bc80      	pop	{r7}
 80081fc:	4770      	bx	lr

080081fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081fe:	b480      	push	{r7}
 8008200:	b087      	sub	sp, #28
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	607a      	str	r2, [r7, #4]
 800820a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	021a      	lsls	r2, r3, #8
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	431a      	orrs	r2, r3
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	4313      	orrs	r3, r2
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	609a      	str	r2, [r3, #8]
}
 8008232:	bf00      	nop
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr

0800823c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 031f 	and.w	r3, r3, #31
 800824e:	2201      	movs	r2, #1
 8008250:	fa02 f303 	lsl.w	r3, r2, r3
 8008254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a1a      	ldr	r2, [r3, #32]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	43db      	mvns	r3, r3
 800825e:	401a      	ands	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a1a      	ldr	r2, [r3, #32]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f003 031f 	and.w	r3, r3, #31
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	fa01 f303 	lsl.w	r3, r1, r3
 8008274:	431a      	orrs	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	621a      	str	r2, [r3, #32]
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	bc80      	pop	{r7}
 8008282:	4770      	bx	lr

08008284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008298:	2302      	movs	r3, #2
 800829a:	e046      	b.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a16      	ldr	r2, [pc, #88]	@ (8008334 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00e      	beq.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e8:	d009      	beq.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a12      	ldr	r2, [pc, #72]	@ (8008338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d004      	beq.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a10      	ldr	r2, [pc, #64]	@ (800833c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d10c      	bne.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	4313      	orrs	r3, r2
 800830e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr
 8008334:	40012c00 	.word	0x40012c00
 8008338:	40000400 	.word	0x40000400
 800833c:	40000800 	.word	0x40000800

08008340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d101      	bne.n	800835c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008358:	2302      	movs	r3, #2
 800835a:	e03d      	b.n	80083d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr

080083e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bc80      	pop	{r7}
 80083f2:	4770      	bx	lr

080083f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr

08008406 <__cvt>:
 8008406:	2b00      	cmp	r3, #0
 8008408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800840c:	461d      	mov	r5, r3
 800840e:	bfbb      	ittet	lt
 8008410:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008414:	461d      	movlt	r5, r3
 8008416:	2300      	movge	r3, #0
 8008418:	232d      	movlt	r3, #45	@ 0x2d
 800841a:	b088      	sub	sp, #32
 800841c:	4614      	mov	r4, r2
 800841e:	bfb8      	it	lt
 8008420:	4614      	movlt	r4, r2
 8008422:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008424:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008426:	7013      	strb	r3, [r2, #0]
 8008428:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800842a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800842e:	f023 0820 	bic.w	r8, r3, #32
 8008432:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008436:	d005      	beq.n	8008444 <__cvt+0x3e>
 8008438:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800843c:	d100      	bne.n	8008440 <__cvt+0x3a>
 800843e:	3601      	adds	r6, #1
 8008440:	2302      	movs	r3, #2
 8008442:	e000      	b.n	8008446 <__cvt+0x40>
 8008444:	2303      	movs	r3, #3
 8008446:	aa07      	add	r2, sp, #28
 8008448:	9204      	str	r2, [sp, #16]
 800844a:	aa06      	add	r2, sp, #24
 800844c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008450:	e9cd 3600 	strd	r3, r6, [sp]
 8008454:	4622      	mov	r2, r4
 8008456:	462b      	mov	r3, r5
 8008458:	f000 fe7e 	bl	8009158 <_dtoa_r>
 800845c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008460:	4607      	mov	r7, r0
 8008462:	d119      	bne.n	8008498 <__cvt+0x92>
 8008464:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008466:	07db      	lsls	r3, r3, #31
 8008468:	d50e      	bpl.n	8008488 <__cvt+0x82>
 800846a:	eb00 0906 	add.w	r9, r0, r6
 800846e:	2200      	movs	r2, #0
 8008470:	2300      	movs	r3, #0
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	f7f8 fa97 	bl	80009a8 <__aeabi_dcmpeq>
 800847a:	b108      	cbz	r0, 8008480 <__cvt+0x7a>
 800847c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008480:	2230      	movs	r2, #48	@ 0x30
 8008482:	9b07      	ldr	r3, [sp, #28]
 8008484:	454b      	cmp	r3, r9
 8008486:	d31e      	bcc.n	80084c6 <__cvt+0xc0>
 8008488:	4638      	mov	r0, r7
 800848a:	9b07      	ldr	r3, [sp, #28]
 800848c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800848e:	1bdb      	subs	r3, r3, r7
 8008490:	6013      	str	r3, [r2, #0]
 8008492:	b008      	add	sp, #32
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800849c:	eb00 0906 	add.w	r9, r0, r6
 80084a0:	d1e5      	bne.n	800846e <__cvt+0x68>
 80084a2:	7803      	ldrb	r3, [r0, #0]
 80084a4:	2b30      	cmp	r3, #48	@ 0x30
 80084a6:	d10a      	bne.n	80084be <__cvt+0xb8>
 80084a8:	2200      	movs	r2, #0
 80084aa:	2300      	movs	r3, #0
 80084ac:	4620      	mov	r0, r4
 80084ae:	4629      	mov	r1, r5
 80084b0:	f7f8 fa7a 	bl	80009a8 <__aeabi_dcmpeq>
 80084b4:	b918      	cbnz	r0, 80084be <__cvt+0xb8>
 80084b6:	f1c6 0601 	rsb	r6, r6, #1
 80084ba:	f8ca 6000 	str.w	r6, [sl]
 80084be:	f8da 3000 	ldr.w	r3, [sl]
 80084c2:	4499      	add	r9, r3
 80084c4:	e7d3      	b.n	800846e <__cvt+0x68>
 80084c6:	1c59      	adds	r1, r3, #1
 80084c8:	9107      	str	r1, [sp, #28]
 80084ca:	701a      	strb	r2, [r3, #0]
 80084cc:	e7d9      	b.n	8008482 <__cvt+0x7c>

080084ce <__exponent>:
 80084ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084d0:	2900      	cmp	r1, #0
 80084d2:	bfb6      	itet	lt
 80084d4:	232d      	movlt	r3, #45	@ 0x2d
 80084d6:	232b      	movge	r3, #43	@ 0x2b
 80084d8:	4249      	neglt	r1, r1
 80084da:	2909      	cmp	r1, #9
 80084dc:	7002      	strb	r2, [r0, #0]
 80084de:	7043      	strb	r3, [r0, #1]
 80084e0:	dd29      	ble.n	8008536 <__exponent+0x68>
 80084e2:	f10d 0307 	add.w	r3, sp, #7
 80084e6:	461d      	mov	r5, r3
 80084e8:	270a      	movs	r7, #10
 80084ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80084ee:	461a      	mov	r2, r3
 80084f0:	fb07 1416 	mls	r4, r7, r6, r1
 80084f4:	3430      	adds	r4, #48	@ 0x30
 80084f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80084fa:	460c      	mov	r4, r1
 80084fc:	2c63      	cmp	r4, #99	@ 0x63
 80084fe:	4631      	mov	r1, r6
 8008500:	f103 33ff 	add.w	r3, r3, #4294967295
 8008504:	dcf1      	bgt.n	80084ea <__exponent+0x1c>
 8008506:	3130      	adds	r1, #48	@ 0x30
 8008508:	1e94      	subs	r4, r2, #2
 800850a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800850e:	4623      	mov	r3, r4
 8008510:	1c41      	adds	r1, r0, #1
 8008512:	42ab      	cmp	r3, r5
 8008514:	d30a      	bcc.n	800852c <__exponent+0x5e>
 8008516:	f10d 0309 	add.w	r3, sp, #9
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	42ac      	cmp	r4, r5
 800851e:	bf88      	it	hi
 8008520:	2300      	movhi	r3, #0
 8008522:	3302      	adds	r3, #2
 8008524:	4403      	add	r3, r0
 8008526:	1a18      	subs	r0, r3, r0
 8008528:	b003      	add	sp, #12
 800852a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800852c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008530:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008534:	e7ed      	b.n	8008512 <__exponent+0x44>
 8008536:	2330      	movs	r3, #48	@ 0x30
 8008538:	3130      	adds	r1, #48	@ 0x30
 800853a:	7083      	strb	r3, [r0, #2]
 800853c:	70c1      	strb	r1, [r0, #3]
 800853e:	1d03      	adds	r3, r0, #4
 8008540:	e7f1      	b.n	8008526 <__exponent+0x58>
	...

08008544 <_printf_float>:
 8008544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	b091      	sub	sp, #68	@ 0x44
 800854a:	460c      	mov	r4, r1
 800854c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008550:	4616      	mov	r6, r2
 8008552:	461f      	mov	r7, r3
 8008554:	4605      	mov	r5, r0
 8008556:	f000 fce1 	bl	8008f1c <_localeconv_r>
 800855a:	6803      	ldr	r3, [r0, #0]
 800855c:	4618      	mov	r0, r3
 800855e:	9308      	str	r3, [sp, #32]
 8008560:	f7f7 fdf6 	bl	8000150 <strlen>
 8008564:	2300      	movs	r3, #0
 8008566:	930e      	str	r3, [sp, #56]	@ 0x38
 8008568:	f8d8 3000 	ldr.w	r3, [r8]
 800856c:	9009      	str	r0, [sp, #36]	@ 0x24
 800856e:	3307      	adds	r3, #7
 8008570:	f023 0307 	bic.w	r3, r3, #7
 8008574:	f103 0208 	add.w	r2, r3, #8
 8008578:	f894 a018 	ldrb.w	sl, [r4, #24]
 800857c:	f8d4 b000 	ldr.w	fp, [r4]
 8008580:	f8c8 2000 	str.w	r2, [r8]
 8008584:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008588:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800858c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800858e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008592:	f04f 32ff 	mov.w	r2, #4294967295
 8008596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800859a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800859e:	4b9c      	ldr	r3, [pc, #624]	@ (8008810 <_printf_float+0x2cc>)
 80085a0:	f7f8 fa34 	bl	8000a0c <__aeabi_dcmpun>
 80085a4:	bb70      	cbnz	r0, 8008604 <_printf_float+0xc0>
 80085a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085aa:	f04f 32ff 	mov.w	r2, #4294967295
 80085ae:	4b98      	ldr	r3, [pc, #608]	@ (8008810 <_printf_float+0x2cc>)
 80085b0:	f7f8 fa0e 	bl	80009d0 <__aeabi_dcmple>
 80085b4:	bb30      	cbnz	r0, 8008604 <_printf_float+0xc0>
 80085b6:	2200      	movs	r2, #0
 80085b8:	2300      	movs	r3, #0
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f8 f9fd 	bl	80009bc <__aeabi_dcmplt>
 80085c2:	b110      	cbz	r0, 80085ca <_printf_float+0x86>
 80085c4:	232d      	movs	r3, #45	@ 0x2d
 80085c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ca:	4a92      	ldr	r2, [pc, #584]	@ (8008814 <_printf_float+0x2d0>)
 80085cc:	4b92      	ldr	r3, [pc, #584]	@ (8008818 <_printf_float+0x2d4>)
 80085ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80085d2:	bf8c      	ite	hi
 80085d4:	4690      	movhi	r8, r2
 80085d6:	4698      	movls	r8, r3
 80085d8:	2303      	movs	r3, #3
 80085da:	f04f 0900 	mov.w	r9, #0
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	f02b 0304 	bic.w	r3, fp, #4
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	4633      	mov	r3, r6
 80085e8:	4621      	mov	r1, r4
 80085ea:	4628      	mov	r0, r5
 80085ec:	9700      	str	r7, [sp, #0]
 80085ee:	aa0f      	add	r2, sp, #60	@ 0x3c
 80085f0:	f000 f9d4 	bl	800899c <_printf_common>
 80085f4:	3001      	adds	r0, #1
 80085f6:	f040 8090 	bne.w	800871a <_printf_float+0x1d6>
 80085fa:	f04f 30ff 	mov.w	r0, #4294967295
 80085fe:	b011      	add	sp, #68	@ 0x44
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	4642      	mov	r2, r8
 8008606:	464b      	mov	r3, r9
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f8 f9fe 	bl	8000a0c <__aeabi_dcmpun>
 8008610:	b148      	cbz	r0, 8008626 <_printf_float+0xe2>
 8008612:	464b      	mov	r3, r9
 8008614:	2b00      	cmp	r3, #0
 8008616:	bfb8      	it	lt
 8008618:	232d      	movlt	r3, #45	@ 0x2d
 800861a:	4a80      	ldr	r2, [pc, #512]	@ (800881c <_printf_float+0x2d8>)
 800861c:	bfb8      	it	lt
 800861e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008622:	4b7f      	ldr	r3, [pc, #508]	@ (8008820 <_printf_float+0x2dc>)
 8008624:	e7d3      	b.n	80085ce <_printf_float+0x8a>
 8008626:	6863      	ldr	r3, [r4, #4]
 8008628:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	d13f      	bne.n	80086b0 <_printf_float+0x16c>
 8008630:	2306      	movs	r3, #6
 8008632:	6063      	str	r3, [r4, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	9206      	str	r2, [sp, #24]
 800863e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008640:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008644:	aa0d      	add	r2, sp, #52	@ 0x34
 8008646:	9203      	str	r2, [sp, #12]
 8008648:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800864c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008650:	6863      	ldr	r3, [r4, #4]
 8008652:	4642      	mov	r2, r8
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	4628      	mov	r0, r5
 8008658:	464b      	mov	r3, r9
 800865a:	910a      	str	r1, [sp, #40]	@ 0x28
 800865c:	f7ff fed3 	bl	8008406 <__cvt>
 8008660:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008662:	4680      	mov	r8, r0
 8008664:	2947      	cmp	r1, #71	@ 0x47
 8008666:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008668:	d128      	bne.n	80086bc <_printf_float+0x178>
 800866a:	1cc8      	adds	r0, r1, #3
 800866c:	db02      	blt.n	8008674 <_printf_float+0x130>
 800866e:	6863      	ldr	r3, [r4, #4]
 8008670:	4299      	cmp	r1, r3
 8008672:	dd40      	ble.n	80086f6 <_printf_float+0x1b2>
 8008674:	f1aa 0a02 	sub.w	sl, sl, #2
 8008678:	fa5f fa8a 	uxtb.w	sl, sl
 800867c:	4652      	mov	r2, sl
 800867e:	3901      	subs	r1, #1
 8008680:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008684:	910d      	str	r1, [sp, #52]	@ 0x34
 8008686:	f7ff ff22 	bl	80084ce <__exponent>
 800868a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800868c:	4681      	mov	r9, r0
 800868e:	1813      	adds	r3, r2, r0
 8008690:	2a01      	cmp	r2, #1
 8008692:	6123      	str	r3, [r4, #16]
 8008694:	dc02      	bgt.n	800869c <_printf_float+0x158>
 8008696:	6822      	ldr	r2, [r4, #0]
 8008698:	07d2      	lsls	r2, r2, #31
 800869a:	d501      	bpl.n	80086a0 <_printf_float+0x15c>
 800869c:	3301      	adds	r3, #1
 800869e:	6123      	str	r3, [r4, #16]
 80086a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d09e      	beq.n	80085e6 <_printf_float+0xa2>
 80086a8:	232d      	movs	r3, #45	@ 0x2d
 80086aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ae:	e79a      	b.n	80085e6 <_printf_float+0xa2>
 80086b0:	2947      	cmp	r1, #71	@ 0x47
 80086b2:	d1bf      	bne.n	8008634 <_printf_float+0xf0>
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1bd      	bne.n	8008634 <_printf_float+0xf0>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e7ba      	b.n	8008632 <_printf_float+0xee>
 80086bc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086c0:	d9dc      	bls.n	800867c <_printf_float+0x138>
 80086c2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086c6:	d118      	bne.n	80086fa <_printf_float+0x1b6>
 80086c8:	2900      	cmp	r1, #0
 80086ca:	6863      	ldr	r3, [r4, #4]
 80086cc:	dd0b      	ble.n	80086e6 <_printf_float+0x1a2>
 80086ce:	6121      	str	r1, [r4, #16]
 80086d0:	b913      	cbnz	r3, 80086d8 <_printf_float+0x194>
 80086d2:	6822      	ldr	r2, [r4, #0]
 80086d4:	07d0      	lsls	r0, r2, #31
 80086d6:	d502      	bpl.n	80086de <_printf_float+0x19a>
 80086d8:	3301      	adds	r3, #1
 80086da:	440b      	add	r3, r1
 80086dc:	6123      	str	r3, [r4, #16]
 80086de:	f04f 0900 	mov.w	r9, #0
 80086e2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80086e4:	e7dc      	b.n	80086a0 <_printf_float+0x15c>
 80086e6:	b913      	cbnz	r3, 80086ee <_printf_float+0x1aa>
 80086e8:	6822      	ldr	r2, [r4, #0]
 80086ea:	07d2      	lsls	r2, r2, #31
 80086ec:	d501      	bpl.n	80086f2 <_printf_float+0x1ae>
 80086ee:	3302      	adds	r3, #2
 80086f0:	e7f4      	b.n	80086dc <_printf_float+0x198>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e7f2      	b.n	80086dc <_printf_float+0x198>
 80086f6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80086fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086fc:	4299      	cmp	r1, r3
 80086fe:	db05      	blt.n	800870c <_printf_float+0x1c8>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	6121      	str	r1, [r4, #16]
 8008704:	07d8      	lsls	r0, r3, #31
 8008706:	d5ea      	bpl.n	80086de <_printf_float+0x19a>
 8008708:	1c4b      	adds	r3, r1, #1
 800870a:	e7e7      	b.n	80086dc <_printf_float+0x198>
 800870c:	2900      	cmp	r1, #0
 800870e:	bfcc      	ite	gt
 8008710:	2201      	movgt	r2, #1
 8008712:	f1c1 0202 	rsble	r2, r1, #2
 8008716:	4413      	add	r3, r2
 8008718:	e7e0      	b.n	80086dc <_printf_float+0x198>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	055a      	lsls	r2, r3, #21
 800871e:	d407      	bmi.n	8008730 <_printf_float+0x1ec>
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	4642      	mov	r2, r8
 8008724:	4631      	mov	r1, r6
 8008726:	4628      	mov	r0, r5
 8008728:	47b8      	blx	r7
 800872a:	3001      	adds	r0, #1
 800872c:	d12b      	bne.n	8008786 <_printf_float+0x242>
 800872e:	e764      	b.n	80085fa <_printf_float+0xb6>
 8008730:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008734:	f240 80dc 	bls.w	80088f0 <_printf_float+0x3ac>
 8008738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800873c:	2200      	movs	r2, #0
 800873e:	2300      	movs	r3, #0
 8008740:	f7f8 f932 	bl	80009a8 <__aeabi_dcmpeq>
 8008744:	2800      	cmp	r0, #0
 8008746:	d033      	beq.n	80087b0 <_printf_float+0x26c>
 8008748:	2301      	movs	r3, #1
 800874a:	4631      	mov	r1, r6
 800874c:	4628      	mov	r0, r5
 800874e:	4a35      	ldr	r2, [pc, #212]	@ (8008824 <_printf_float+0x2e0>)
 8008750:	47b8      	blx	r7
 8008752:	3001      	adds	r0, #1
 8008754:	f43f af51 	beq.w	80085fa <_printf_float+0xb6>
 8008758:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800875c:	4543      	cmp	r3, r8
 800875e:	db02      	blt.n	8008766 <_printf_float+0x222>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	07d8      	lsls	r0, r3, #31
 8008764:	d50f      	bpl.n	8008786 <_printf_float+0x242>
 8008766:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800876a:	4631      	mov	r1, r6
 800876c:	4628      	mov	r0, r5
 800876e:	47b8      	blx	r7
 8008770:	3001      	adds	r0, #1
 8008772:	f43f af42 	beq.w	80085fa <_printf_float+0xb6>
 8008776:	f04f 0900 	mov.w	r9, #0
 800877a:	f108 38ff 	add.w	r8, r8, #4294967295
 800877e:	f104 0a1a 	add.w	sl, r4, #26
 8008782:	45c8      	cmp	r8, r9
 8008784:	dc09      	bgt.n	800879a <_printf_float+0x256>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	079b      	lsls	r3, r3, #30
 800878a:	f100 8102 	bmi.w	8008992 <_printf_float+0x44e>
 800878e:	68e0      	ldr	r0, [r4, #12]
 8008790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008792:	4298      	cmp	r0, r3
 8008794:	bfb8      	it	lt
 8008796:	4618      	movlt	r0, r3
 8008798:	e731      	b.n	80085fe <_printf_float+0xba>
 800879a:	2301      	movs	r3, #1
 800879c:	4652      	mov	r2, sl
 800879e:	4631      	mov	r1, r6
 80087a0:	4628      	mov	r0, r5
 80087a2:	47b8      	blx	r7
 80087a4:	3001      	adds	r0, #1
 80087a6:	f43f af28 	beq.w	80085fa <_printf_float+0xb6>
 80087aa:	f109 0901 	add.w	r9, r9, #1
 80087ae:	e7e8      	b.n	8008782 <_printf_float+0x23e>
 80087b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dc38      	bgt.n	8008828 <_printf_float+0x2e4>
 80087b6:	2301      	movs	r3, #1
 80087b8:	4631      	mov	r1, r6
 80087ba:	4628      	mov	r0, r5
 80087bc:	4a19      	ldr	r2, [pc, #100]	@ (8008824 <_printf_float+0x2e0>)
 80087be:	47b8      	blx	r7
 80087c0:	3001      	adds	r0, #1
 80087c2:	f43f af1a 	beq.w	80085fa <_printf_float+0xb6>
 80087c6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80087ca:	ea59 0303 	orrs.w	r3, r9, r3
 80087ce:	d102      	bne.n	80087d6 <_printf_float+0x292>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	07d9      	lsls	r1, r3, #31
 80087d4:	d5d7      	bpl.n	8008786 <_printf_float+0x242>
 80087d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087da:	4631      	mov	r1, r6
 80087dc:	4628      	mov	r0, r5
 80087de:	47b8      	blx	r7
 80087e0:	3001      	adds	r0, #1
 80087e2:	f43f af0a 	beq.w	80085fa <_printf_float+0xb6>
 80087e6:	f04f 0a00 	mov.w	sl, #0
 80087ea:	f104 0b1a 	add.w	fp, r4, #26
 80087ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087f0:	425b      	negs	r3, r3
 80087f2:	4553      	cmp	r3, sl
 80087f4:	dc01      	bgt.n	80087fa <_printf_float+0x2b6>
 80087f6:	464b      	mov	r3, r9
 80087f8:	e793      	b.n	8008722 <_printf_float+0x1de>
 80087fa:	2301      	movs	r3, #1
 80087fc:	465a      	mov	r2, fp
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	f43f aef8 	beq.w	80085fa <_printf_float+0xb6>
 800880a:	f10a 0a01 	add.w	sl, sl, #1
 800880e:	e7ee      	b.n	80087ee <_printf_float+0x2aa>
 8008810:	7fefffff 	.word	0x7fefffff
 8008814:	0800bf4e 	.word	0x0800bf4e
 8008818:	0800bf4a 	.word	0x0800bf4a
 800881c:	0800bf56 	.word	0x0800bf56
 8008820:	0800bf52 	.word	0x0800bf52
 8008824:	0800bf5a 	.word	0x0800bf5a
 8008828:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800882a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800882e:	4553      	cmp	r3, sl
 8008830:	bfa8      	it	ge
 8008832:	4653      	movge	r3, sl
 8008834:	2b00      	cmp	r3, #0
 8008836:	4699      	mov	r9, r3
 8008838:	dc36      	bgt.n	80088a8 <_printf_float+0x364>
 800883a:	f04f 0b00 	mov.w	fp, #0
 800883e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008842:	f104 021a 	add.w	r2, r4, #26
 8008846:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008848:	930a      	str	r3, [sp, #40]	@ 0x28
 800884a:	eba3 0309 	sub.w	r3, r3, r9
 800884e:	455b      	cmp	r3, fp
 8008850:	dc31      	bgt.n	80088b6 <_printf_float+0x372>
 8008852:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008854:	459a      	cmp	sl, r3
 8008856:	dc3a      	bgt.n	80088ce <_printf_float+0x38a>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	07da      	lsls	r2, r3, #31
 800885c:	d437      	bmi.n	80088ce <_printf_float+0x38a>
 800885e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008860:	ebaa 0903 	sub.w	r9, sl, r3
 8008864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008866:	ebaa 0303 	sub.w	r3, sl, r3
 800886a:	4599      	cmp	r9, r3
 800886c:	bfa8      	it	ge
 800886e:	4699      	movge	r9, r3
 8008870:	f1b9 0f00 	cmp.w	r9, #0
 8008874:	dc33      	bgt.n	80088de <_printf_float+0x39a>
 8008876:	f04f 0800 	mov.w	r8, #0
 800887a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800887e:	f104 0b1a 	add.w	fp, r4, #26
 8008882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008884:	ebaa 0303 	sub.w	r3, sl, r3
 8008888:	eba3 0309 	sub.w	r3, r3, r9
 800888c:	4543      	cmp	r3, r8
 800888e:	f77f af7a 	ble.w	8008786 <_printf_float+0x242>
 8008892:	2301      	movs	r3, #1
 8008894:	465a      	mov	r2, fp
 8008896:	4631      	mov	r1, r6
 8008898:	4628      	mov	r0, r5
 800889a:	47b8      	blx	r7
 800889c:	3001      	adds	r0, #1
 800889e:	f43f aeac 	beq.w	80085fa <_printf_float+0xb6>
 80088a2:	f108 0801 	add.w	r8, r8, #1
 80088a6:	e7ec      	b.n	8008882 <_printf_float+0x33e>
 80088a8:	4642      	mov	r2, r8
 80088aa:	4631      	mov	r1, r6
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	d1c2      	bne.n	800883a <_printf_float+0x2f6>
 80088b4:	e6a1      	b.n	80085fa <_printf_float+0xb6>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	f43f ae9a 	beq.w	80085fa <_printf_float+0xb6>
 80088c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088c8:	f10b 0b01 	add.w	fp, fp, #1
 80088cc:	e7bb      	b.n	8008846 <_printf_float+0x302>
 80088ce:	4631      	mov	r1, r6
 80088d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088d4:	4628      	mov	r0, r5
 80088d6:	47b8      	blx	r7
 80088d8:	3001      	adds	r0, #1
 80088da:	d1c0      	bne.n	800885e <_printf_float+0x31a>
 80088dc:	e68d      	b.n	80085fa <_printf_float+0xb6>
 80088de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088e0:	464b      	mov	r3, r9
 80088e2:	4631      	mov	r1, r6
 80088e4:	4628      	mov	r0, r5
 80088e6:	4442      	add	r2, r8
 80088e8:	47b8      	blx	r7
 80088ea:	3001      	adds	r0, #1
 80088ec:	d1c3      	bne.n	8008876 <_printf_float+0x332>
 80088ee:	e684      	b.n	80085fa <_printf_float+0xb6>
 80088f0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80088f4:	f1ba 0f01 	cmp.w	sl, #1
 80088f8:	dc01      	bgt.n	80088fe <_printf_float+0x3ba>
 80088fa:	07db      	lsls	r3, r3, #31
 80088fc:	d536      	bpl.n	800896c <_printf_float+0x428>
 80088fe:	2301      	movs	r3, #1
 8008900:	4642      	mov	r2, r8
 8008902:	4631      	mov	r1, r6
 8008904:	4628      	mov	r0, r5
 8008906:	47b8      	blx	r7
 8008908:	3001      	adds	r0, #1
 800890a:	f43f ae76 	beq.w	80085fa <_printf_float+0xb6>
 800890e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	f43f ae6e 	beq.w	80085fa <_printf_float+0xb6>
 800891e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008922:	2200      	movs	r2, #0
 8008924:	2300      	movs	r3, #0
 8008926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800892a:	f7f8 f83d 	bl	80009a8 <__aeabi_dcmpeq>
 800892e:	b9c0      	cbnz	r0, 8008962 <_printf_float+0x41e>
 8008930:	4653      	mov	r3, sl
 8008932:	f108 0201 	add.w	r2, r8, #1
 8008936:	4631      	mov	r1, r6
 8008938:	4628      	mov	r0, r5
 800893a:	47b8      	blx	r7
 800893c:	3001      	adds	r0, #1
 800893e:	d10c      	bne.n	800895a <_printf_float+0x416>
 8008940:	e65b      	b.n	80085fa <_printf_float+0xb6>
 8008942:	2301      	movs	r3, #1
 8008944:	465a      	mov	r2, fp
 8008946:	4631      	mov	r1, r6
 8008948:	4628      	mov	r0, r5
 800894a:	47b8      	blx	r7
 800894c:	3001      	adds	r0, #1
 800894e:	f43f ae54 	beq.w	80085fa <_printf_float+0xb6>
 8008952:	f108 0801 	add.w	r8, r8, #1
 8008956:	45d0      	cmp	r8, sl
 8008958:	dbf3      	blt.n	8008942 <_printf_float+0x3fe>
 800895a:	464b      	mov	r3, r9
 800895c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008960:	e6e0      	b.n	8008724 <_printf_float+0x1e0>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	f104 0b1a 	add.w	fp, r4, #26
 800896a:	e7f4      	b.n	8008956 <_printf_float+0x412>
 800896c:	2301      	movs	r3, #1
 800896e:	4642      	mov	r2, r8
 8008970:	e7e1      	b.n	8008936 <_printf_float+0x3f2>
 8008972:	2301      	movs	r3, #1
 8008974:	464a      	mov	r2, r9
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f ae3c 	beq.w	80085fa <_printf_float+0xb6>
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	68e3      	ldr	r3, [r4, #12]
 8008988:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800898a:	1a5b      	subs	r3, r3, r1
 800898c:	4543      	cmp	r3, r8
 800898e:	dcf0      	bgt.n	8008972 <_printf_float+0x42e>
 8008990:	e6fd      	b.n	800878e <_printf_float+0x24a>
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f104 0919 	add.w	r9, r4, #25
 800899a:	e7f4      	b.n	8008986 <_printf_float+0x442>

0800899c <_printf_common>:
 800899c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a0:	4616      	mov	r6, r2
 80089a2:	4698      	mov	r8, r3
 80089a4:	688a      	ldr	r2, [r1, #8]
 80089a6:	690b      	ldr	r3, [r1, #16]
 80089a8:	4607      	mov	r7, r0
 80089aa:	4293      	cmp	r3, r2
 80089ac:	bfb8      	it	lt
 80089ae:	4613      	movlt	r3, r2
 80089b0:	6033      	str	r3, [r6, #0]
 80089b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089b6:	460c      	mov	r4, r1
 80089b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089bc:	b10a      	cbz	r2, 80089c2 <_printf_common+0x26>
 80089be:	3301      	adds	r3, #1
 80089c0:	6033      	str	r3, [r6, #0]
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	0699      	lsls	r1, r3, #26
 80089c6:	bf42      	ittt	mi
 80089c8:	6833      	ldrmi	r3, [r6, #0]
 80089ca:	3302      	addmi	r3, #2
 80089cc:	6033      	strmi	r3, [r6, #0]
 80089ce:	6825      	ldr	r5, [r4, #0]
 80089d0:	f015 0506 	ands.w	r5, r5, #6
 80089d4:	d106      	bne.n	80089e4 <_printf_common+0x48>
 80089d6:	f104 0a19 	add.w	sl, r4, #25
 80089da:	68e3      	ldr	r3, [r4, #12]
 80089dc:	6832      	ldr	r2, [r6, #0]
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	42ab      	cmp	r3, r5
 80089e2:	dc2b      	bgt.n	8008a3c <_printf_common+0xa0>
 80089e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	3b00      	subs	r3, #0
 80089ec:	bf18      	it	ne
 80089ee:	2301      	movne	r3, #1
 80089f0:	0692      	lsls	r2, r2, #26
 80089f2:	d430      	bmi.n	8008a56 <_printf_common+0xba>
 80089f4:	4641      	mov	r1, r8
 80089f6:	4638      	mov	r0, r7
 80089f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089fc:	47c8      	blx	r9
 80089fe:	3001      	adds	r0, #1
 8008a00:	d023      	beq.n	8008a4a <_printf_common+0xae>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	6922      	ldr	r2, [r4, #16]
 8008a06:	f003 0306 	and.w	r3, r3, #6
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	bf14      	ite	ne
 8008a0e:	2500      	movne	r5, #0
 8008a10:	6833      	ldreq	r3, [r6, #0]
 8008a12:	f04f 0600 	mov.w	r6, #0
 8008a16:	bf08      	it	eq
 8008a18:	68e5      	ldreq	r5, [r4, #12]
 8008a1a:	f104 041a 	add.w	r4, r4, #26
 8008a1e:	bf08      	it	eq
 8008a20:	1aed      	subeq	r5, r5, r3
 8008a22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008a26:	bf08      	it	eq
 8008a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	bfc4      	itt	gt
 8008a30:	1a9b      	subgt	r3, r3, r2
 8008a32:	18ed      	addgt	r5, r5, r3
 8008a34:	42b5      	cmp	r5, r6
 8008a36:	d11a      	bne.n	8008a6e <_printf_common+0xd2>
 8008a38:	2000      	movs	r0, #0
 8008a3a:	e008      	b.n	8008a4e <_printf_common+0xb2>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	4652      	mov	r2, sl
 8008a40:	4641      	mov	r1, r8
 8008a42:	4638      	mov	r0, r7
 8008a44:	47c8      	blx	r9
 8008a46:	3001      	adds	r0, #1
 8008a48:	d103      	bne.n	8008a52 <_printf_common+0xb6>
 8008a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a52:	3501      	adds	r5, #1
 8008a54:	e7c1      	b.n	80089da <_printf_common+0x3e>
 8008a56:	2030      	movs	r0, #48	@ 0x30
 8008a58:	18e1      	adds	r1, r4, r3
 8008a5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a64:	4422      	add	r2, r4
 8008a66:	3302      	adds	r3, #2
 8008a68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a6c:	e7c2      	b.n	80089f4 <_printf_common+0x58>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	4622      	mov	r2, r4
 8008a72:	4641      	mov	r1, r8
 8008a74:	4638      	mov	r0, r7
 8008a76:	47c8      	blx	r9
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d0e6      	beq.n	8008a4a <_printf_common+0xae>
 8008a7c:	3601      	adds	r6, #1
 8008a7e:	e7d9      	b.n	8008a34 <_printf_common+0x98>

08008a80 <_printf_i>:
 8008a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	7e0f      	ldrb	r7, [r1, #24]
 8008a86:	4691      	mov	r9, r2
 8008a88:	2f78      	cmp	r7, #120	@ 0x78
 8008a8a:	4680      	mov	r8, r0
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	469a      	mov	sl, r3
 8008a90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a96:	d807      	bhi.n	8008aa8 <_printf_i+0x28>
 8008a98:	2f62      	cmp	r7, #98	@ 0x62
 8008a9a:	d80a      	bhi.n	8008ab2 <_printf_i+0x32>
 8008a9c:	2f00      	cmp	r7, #0
 8008a9e:	f000 80d1 	beq.w	8008c44 <_printf_i+0x1c4>
 8008aa2:	2f58      	cmp	r7, #88	@ 0x58
 8008aa4:	f000 80b8 	beq.w	8008c18 <_printf_i+0x198>
 8008aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008aac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ab0:	e03a      	b.n	8008b28 <_printf_i+0xa8>
 8008ab2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ab6:	2b15      	cmp	r3, #21
 8008ab8:	d8f6      	bhi.n	8008aa8 <_printf_i+0x28>
 8008aba:	a101      	add	r1, pc, #4	@ (adr r1, 8008ac0 <_printf_i+0x40>)
 8008abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ac0:	08008b19 	.word	0x08008b19
 8008ac4:	08008b2d 	.word	0x08008b2d
 8008ac8:	08008aa9 	.word	0x08008aa9
 8008acc:	08008aa9 	.word	0x08008aa9
 8008ad0:	08008aa9 	.word	0x08008aa9
 8008ad4:	08008aa9 	.word	0x08008aa9
 8008ad8:	08008b2d 	.word	0x08008b2d
 8008adc:	08008aa9 	.word	0x08008aa9
 8008ae0:	08008aa9 	.word	0x08008aa9
 8008ae4:	08008aa9 	.word	0x08008aa9
 8008ae8:	08008aa9 	.word	0x08008aa9
 8008aec:	08008c2b 	.word	0x08008c2b
 8008af0:	08008b57 	.word	0x08008b57
 8008af4:	08008be5 	.word	0x08008be5
 8008af8:	08008aa9 	.word	0x08008aa9
 8008afc:	08008aa9 	.word	0x08008aa9
 8008b00:	08008c4d 	.word	0x08008c4d
 8008b04:	08008aa9 	.word	0x08008aa9
 8008b08:	08008b57 	.word	0x08008b57
 8008b0c:	08008aa9 	.word	0x08008aa9
 8008b10:	08008aa9 	.word	0x08008aa9
 8008b14:	08008bed 	.word	0x08008bed
 8008b18:	6833      	ldr	r3, [r6, #0]
 8008b1a:	1d1a      	adds	r2, r3, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6032      	str	r2, [r6, #0]
 8008b20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e09c      	b.n	8008c66 <_printf_i+0x1e6>
 8008b2c:	6833      	ldr	r3, [r6, #0]
 8008b2e:	6820      	ldr	r0, [r4, #0]
 8008b30:	1d19      	adds	r1, r3, #4
 8008b32:	6031      	str	r1, [r6, #0]
 8008b34:	0606      	lsls	r6, r0, #24
 8008b36:	d501      	bpl.n	8008b3c <_printf_i+0xbc>
 8008b38:	681d      	ldr	r5, [r3, #0]
 8008b3a:	e003      	b.n	8008b44 <_printf_i+0xc4>
 8008b3c:	0645      	lsls	r5, r0, #25
 8008b3e:	d5fb      	bpl.n	8008b38 <_printf_i+0xb8>
 8008b40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b44:	2d00      	cmp	r5, #0
 8008b46:	da03      	bge.n	8008b50 <_printf_i+0xd0>
 8008b48:	232d      	movs	r3, #45	@ 0x2d
 8008b4a:	426d      	negs	r5, r5
 8008b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b50:	230a      	movs	r3, #10
 8008b52:	4858      	ldr	r0, [pc, #352]	@ (8008cb4 <_printf_i+0x234>)
 8008b54:	e011      	b.n	8008b7a <_printf_i+0xfa>
 8008b56:	6821      	ldr	r1, [r4, #0]
 8008b58:	6833      	ldr	r3, [r6, #0]
 8008b5a:	0608      	lsls	r0, r1, #24
 8008b5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b60:	d402      	bmi.n	8008b68 <_printf_i+0xe8>
 8008b62:	0649      	lsls	r1, r1, #25
 8008b64:	bf48      	it	mi
 8008b66:	b2ad      	uxthmi	r5, r5
 8008b68:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b6a:	6033      	str	r3, [r6, #0]
 8008b6c:	bf14      	ite	ne
 8008b6e:	230a      	movne	r3, #10
 8008b70:	2308      	moveq	r3, #8
 8008b72:	4850      	ldr	r0, [pc, #320]	@ (8008cb4 <_printf_i+0x234>)
 8008b74:	2100      	movs	r1, #0
 8008b76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b7a:	6866      	ldr	r6, [r4, #4]
 8008b7c:	2e00      	cmp	r6, #0
 8008b7e:	60a6      	str	r6, [r4, #8]
 8008b80:	db05      	blt.n	8008b8e <_printf_i+0x10e>
 8008b82:	6821      	ldr	r1, [r4, #0]
 8008b84:	432e      	orrs	r6, r5
 8008b86:	f021 0104 	bic.w	r1, r1, #4
 8008b8a:	6021      	str	r1, [r4, #0]
 8008b8c:	d04b      	beq.n	8008c26 <_printf_i+0x1a6>
 8008b8e:	4616      	mov	r6, r2
 8008b90:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b94:	fb03 5711 	mls	r7, r3, r1, r5
 8008b98:	5dc7      	ldrb	r7, [r0, r7]
 8008b9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b9e:	462f      	mov	r7, r5
 8008ba0:	42bb      	cmp	r3, r7
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	d9f4      	bls.n	8008b90 <_printf_i+0x110>
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	d10b      	bne.n	8008bc2 <_printf_i+0x142>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	07df      	lsls	r7, r3, #31
 8008bae:	d508      	bpl.n	8008bc2 <_printf_i+0x142>
 8008bb0:	6923      	ldr	r3, [r4, #16]
 8008bb2:	6861      	ldr	r1, [r4, #4]
 8008bb4:	4299      	cmp	r1, r3
 8008bb6:	bfde      	ittt	le
 8008bb8:	2330      	movle	r3, #48	@ 0x30
 8008bba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bc2:	1b92      	subs	r2, r2, r6
 8008bc4:	6122      	str	r2, [r4, #16]
 8008bc6:	464b      	mov	r3, r9
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4640      	mov	r0, r8
 8008bcc:	f8cd a000 	str.w	sl, [sp]
 8008bd0:	aa03      	add	r2, sp, #12
 8008bd2:	f7ff fee3 	bl	800899c <_printf_common>
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d14a      	bne.n	8008c70 <_printf_i+0x1f0>
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295
 8008bde:	b004      	add	sp, #16
 8008be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	f043 0320 	orr.w	r3, r3, #32
 8008bea:	6023      	str	r3, [r4, #0]
 8008bec:	2778      	movs	r7, #120	@ 0x78
 8008bee:	4832      	ldr	r0, [pc, #200]	@ (8008cb8 <_printf_i+0x238>)
 8008bf0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	6831      	ldr	r1, [r6, #0]
 8008bf8:	061f      	lsls	r7, r3, #24
 8008bfa:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bfe:	d402      	bmi.n	8008c06 <_printf_i+0x186>
 8008c00:	065f      	lsls	r7, r3, #25
 8008c02:	bf48      	it	mi
 8008c04:	b2ad      	uxthmi	r5, r5
 8008c06:	6031      	str	r1, [r6, #0]
 8008c08:	07d9      	lsls	r1, r3, #31
 8008c0a:	bf44      	itt	mi
 8008c0c:	f043 0320 	orrmi.w	r3, r3, #32
 8008c10:	6023      	strmi	r3, [r4, #0]
 8008c12:	b11d      	cbz	r5, 8008c1c <_printf_i+0x19c>
 8008c14:	2310      	movs	r3, #16
 8008c16:	e7ad      	b.n	8008b74 <_printf_i+0xf4>
 8008c18:	4826      	ldr	r0, [pc, #152]	@ (8008cb4 <_printf_i+0x234>)
 8008c1a:	e7e9      	b.n	8008bf0 <_printf_i+0x170>
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	f023 0320 	bic.w	r3, r3, #32
 8008c22:	6023      	str	r3, [r4, #0]
 8008c24:	e7f6      	b.n	8008c14 <_printf_i+0x194>
 8008c26:	4616      	mov	r6, r2
 8008c28:	e7bd      	b.n	8008ba6 <_printf_i+0x126>
 8008c2a:	6833      	ldr	r3, [r6, #0]
 8008c2c:	6825      	ldr	r5, [r4, #0]
 8008c2e:	1d18      	adds	r0, r3, #4
 8008c30:	6961      	ldr	r1, [r4, #20]
 8008c32:	6030      	str	r0, [r6, #0]
 8008c34:	062e      	lsls	r6, r5, #24
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	d501      	bpl.n	8008c3e <_printf_i+0x1be>
 8008c3a:	6019      	str	r1, [r3, #0]
 8008c3c:	e002      	b.n	8008c44 <_printf_i+0x1c4>
 8008c3e:	0668      	lsls	r0, r5, #25
 8008c40:	d5fb      	bpl.n	8008c3a <_printf_i+0x1ba>
 8008c42:	8019      	strh	r1, [r3, #0]
 8008c44:	2300      	movs	r3, #0
 8008c46:	4616      	mov	r6, r2
 8008c48:	6123      	str	r3, [r4, #16]
 8008c4a:	e7bc      	b.n	8008bc6 <_printf_i+0x146>
 8008c4c:	6833      	ldr	r3, [r6, #0]
 8008c4e:	2100      	movs	r1, #0
 8008c50:	1d1a      	adds	r2, r3, #4
 8008c52:	6032      	str	r2, [r6, #0]
 8008c54:	681e      	ldr	r6, [r3, #0]
 8008c56:	6862      	ldr	r2, [r4, #4]
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f000 f9d6 	bl	800900a <memchr>
 8008c5e:	b108      	cbz	r0, 8008c64 <_printf_i+0x1e4>
 8008c60:	1b80      	subs	r0, r0, r6
 8008c62:	6060      	str	r0, [r4, #4]
 8008c64:	6863      	ldr	r3, [r4, #4]
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c6e:	e7aa      	b.n	8008bc6 <_printf_i+0x146>
 8008c70:	4632      	mov	r2, r6
 8008c72:	4649      	mov	r1, r9
 8008c74:	4640      	mov	r0, r8
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	47d0      	blx	sl
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d0ad      	beq.n	8008bda <_printf_i+0x15a>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	079b      	lsls	r3, r3, #30
 8008c82:	d413      	bmi.n	8008cac <_printf_i+0x22c>
 8008c84:	68e0      	ldr	r0, [r4, #12]
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	4298      	cmp	r0, r3
 8008c8a:	bfb8      	it	lt
 8008c8c:	4618      	movlt	r0, r3
 8008c8e:	e7a6      	b.n	8008bde <_printf_i+0x15e>
 8008c90:	2301      	movs	r3, #1
 8008c92:	4632      	mov	r2, r6
 8008c94:	4649      	mov	r1, r9
 8008c96:	4640      	mov	r0, r8
 8008c98:	47d0      	blx	sl
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	d09d      	beq.n	8008bda <_printf_i+0x15a>
 8008c9e:	3501      	adds	r5, #1
 8008ca0:	68e3      	ldr	r3, [r4, #12]
 8008ca2:	9903      	ldr	r1, [sp, #12]
 8008ca4:	1a5b      	subs	r3, r3, r1
 8008ca6:	42ab      	cmp	r3, r5
 8008ca8:	dcf2      	bgt.n	8008c90 <_printf_i+0x210>
 8008caa:	e7eb      	b.n	8008c84 <_printf_i+0x204>
 8008cac:	2500      	movs	r5, #0
 8008cae:	f104 0619 	add.w	r6, r4, #25
 8008cb2:	e7f5      	b.n	8008ca0 <_printf_i+0x220>
 8008cb4:	0800bf5c 	.word	0x0800bf5c
 8008cb8:	0800bf6d 	.word	0x0800bf6d

08008cbc <std>:
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	b510      	push	{r4, lr}
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8008cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cca:	6083      	str	r3, [r0, #8]
 8008ccc:	8181      	strh	r1, [r0, #12]
 8008cce:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cd0:	81c2      	strh	r2, [r0, #14]
 8008cd2:	6183      	str	r3, [r0, #24]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	2208      	movs	r2, #8
 8008cd8:	305c      	adds	r0, #92	@ 0x5c
 8008cda:	f000 f916 	bl	8008f0a <memset>
 8008cde:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <std+0x58>)
 8008ce0:	6224      	str	r4, [r4, #32]
 8008ce2:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8008d18 <std+0x5c>)
 8008ce6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8008d1c <std+0x60>)
 8008cea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008cec:	4b0c      	ldr	r3, [pc, #48]	@ (8008d20 <std+0x64>)
 8008cee:	6323      	str	r3, [r4, #48]	@ 0x30
 8008cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8008d24 <std+0x68>)
 8008cf2:	429c      	cmp	r4, r3
 8008cf4:	d006      	beq.n	8008d04 <std+0x48>
 8008cf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cfa:	4294      	cmp	r4, r2
 8008cfc:	d002      	beq.n	8008d04 <std+0x48>
 8008cfe:	33d0      	adds	r3, #208	@ 0xd0
 8008d00:	429c      	cmp	r4, r3
 8008d02:	d105      	bne.n	8008d10 <std+0x54>
 8008d04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d0c:	f000 b97a 	b.w	8009004 <__retarget_lock_init_recursive>
 8008d10:	bd10      	pop	{r4, pc}
 8008d12:	bf00      	nop
 8008d14:	08008e85 	.word	0x08008e85
 8008d18:	08008ea7 	.word	0x08008ea7
 8008d1c:	08008edf 	.word	0x08008edf
 8008d20:	08008f03 	.word	0x08008f03
 8008d24:	20000c50 	.word	0x20000c50

08008d28 <stdio_exit_handler>:
 8008d28:	4a02      	ldr	r2, [pc, #8]	@ (8008d34 <stdio_exit_handler+0xc>)
 8008d2a:	4903      	ldr	r1, [pc, #12]	@ (8008d38 <stdio_exit_handler+0x10>)
 8008d2c:	4803      	ldr	r0, [pc, #12]	@ (8008d3c <stdio_exit_handler+0x14>)
 8008d2e:	f000 b869 	b.w	8008e04 <_fwalk_sglue>
 8008d32:	bf00      	nop
 8008d34:	20000084 	.word	0x20000084
 8008d38:	0800a9a1 	.word	0x0800a9a1
 8008d3c:	20000094 	.word	0x20000094

08008d40 <cleanup_stdio>:
 8008d40:	6841      	ldr	r1, [r0, #4]
 8008d42:	4b0c      	ldr	r3, [pc, #48]	@ (8008d74 <cleanup_stdio+0x34>)
 8008d44:	b510      	push	{r4, lr}
 8008d46:	4299      	cmp	r1, r3
 8008d48:	4604      	mov	r4, r0
 8008d4a:	d001      	beq.n	8008d50 <cleanup_stdio+0x10>
 8008d4c:	f001 fe28 	bl	800a9a0 <_fflush_r>
 8008d50:	68a1      	ldr	r1, [r4, #8]
 8008d52:	4b09      	ldr	r3, [pc, #36]	@ (8008d78 <cleanup_stdio+0x38>)
 8008d54:	4299      	cmp	r1, r3
 8008d56:	d002      	beq.n	8008d5e <cleanup_stdio+0x1e>
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f001 fe21 	bl	800a9a0 <_fflush_r>
 8008d5e:	68e1      	ldr	r1, [r4, #12]
 8008d60:	4b06      	ldr	r3, [pc, #24]	@ (8008d7c <cleanup_stdio+0x3c>)
 8008d62:	4299      	cmp	r1, r3
 8008d64:	d004      	beq.n	8008d70 <cleanup_stdio+0x30>
 8008d66:	4620      	mov	r0, r4
 8008d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d6c:	f001 be18 	b.w	800a9a0 <_fflush_r>
 8008d70:	bd10      	pop	{r4, pc}
 8008d72:	bf00      	nop
 8008d74:	20000c50 	.word	0x20000c50
 8008d78:	20000cb8 	.word	0x20000cb8
 8008d7c:	20000d20 	.word	0x20000d20

08008d80 <global_stdio_init.part.0>:
 8008d80:	b510      	push	{r4, lr}
 8008d82:	4b0b      	ldr	r3, [pc, #44]	@ (8008db0 <global_stdio_init.part.0+0x30>)
 8008d84:	4c0b      	ldr	r4, [pc, #44]	@ (8008db4 <global_stdio_init.part.0+0x34>)
 8008d86:	4a0c      	ldr	r2, [pc, #48]	@ (8008db8 <global_stdio_init.part.0+0x38>)
 8008d88:	4620      	mov	r0, r4
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	2104      	movs	r1, #4
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f7ff ff94 	bl	8008cbc <std>
 8008d94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d98:	2201      	movs	r2, #1
 8008d9a:	2109      	movs	r1, #9
 8008d9c:	f7ff ff8e 	bl	8008cbc <std>
 8008da0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008da4:	2202      	movs	r2, #2
 8008da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008daa:	2112      	movs	r1, #18
 8008dac:	f7ff bf86 	b.w	8008cbc <std>
 8008db0:	20000d88 	.word	0x20000d88
 8008db4:	20000c50 	.word	0x20000c50
 8008db8:	08008d29 	.word	0x08008d29

08008dbc <__sfp_lock_acquire>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	@ (8008dc4 <__sfp_lock_acquire+0x8>)
 8008dbe:	f000 b922 	b.w	8009006 <__retarget_lock_acquire_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20000d91 	.word	0x20000d91

08008dc8 <__sfp_lock_release>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	@ (8008dd0 <__sfp_lock_release+0x8>)
 8008dca:	f000 b91d 	b.w	8009008 <__retarget_lock_release_recursive>
 8008dce:	bf00      	nop
 8008dd0:	20000d91 	.word	0x20000d91

08008dd4 <__sinit>:
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	f7ff fff0 	bl	8008dbc <__sfp_lock_acquire>
 8008ddc:	6a23      	ldr	r3, [r4, #32]
 8008dde:	b11b      	cbz	r3, 8008de8 <__sinit+0x14>
 8008de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de4:	f7ff bff0 	b.w	8008dc8 <__sfp_lock_release>
 8008de8:	4b04      	ldr	r3, [pc, #16]	@ (8008dfc <__sinit+0x28>)
 8008dea:	6223      	str	r3, [r4, #32]
 8008dec:	4b04      	ldr	r3, [pc, #16]	@ (8008e00 <__sinit+0x2c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1f5      	bne.n	8008de0 <__sinit+0xc>
 8008df4:	f7ff ffc4 	bl	8008d80 <global_stdio_init.part.0>
 8008df8:	e7f2      	b.n	8008de0 <__sinit+0xc>
 8008dfa:	bf00      	nop
 8008dfc:	08008d41 	.word	0x08008d41
 8008e00:	20000d88 	.word	0x20000d88

08008e04 <_fwalk_sglue>:
 8008e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e08:	4607      	mov	r7, r0
 8008e0a:	4688      	mov	r8, r1
 8008e0c:	4614      	mov	r4, r2
 8008e0e:	2600      	movs	r6, #0
 8008e10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e14:	f1b9 0901 	subs.w	r9, r9, #1
 8008e18:	d505      	bpl.n	8008e26 <_fwalk_sglue+0x22>
 8008e1a:	6824      	ldr	r4, [r4, #0]
 8008e1c:	2c00      	cmp	r4, #0
 8008e1e:	d1f7      	bne.n	8008e10 <_fwalk_sglue+0xc>
 8008e20:	4630      	mov	r0, r6
 8008e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e26:	89ab      	ldrh	r3, [r5, #12]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d907      	bls.n	8008e3c <_fwalk_sglue+0x38>
 8008e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e30:	3301      	adds	r3, #1
 8008e32:	d003      	beq.n	8008e3c <_fwalk_sglue+0x38>
 8008e34:	4629      	mov	r1, r5
 8008e36:	4638      	mov	r0, r7
 8008e38:	47c0      	blx	r8
 8008e3a:	4306      	orrs	r6, r0
 8008e3c:	3568      	adds	r5, #104	@ 0x68
 8008e3e:	e7e9      	b.n	8008e14 <_fwalk_sglue+0x10>

08008e40 <siprintf>:
 8008e40:	b40e      	push	{r1, r2, r3}
 8008e42:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e46:	b510      	push	{r4, lr}
 8008e48:	2400      	movs	r4, #0
 8008e4a:	b09d      	sub	sp, #116	@ 0x74
 8008e4c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008e4e:	9002      	str	r0, [sp, #8]
 8008e50:	9006      	str	r0, [sp, #24]
 8008e52:	9107      	str	r1, [sp, #28]
 8008e54:	9104      	str	r1, [sp, #16]
 8008e56:	4809      	ldr	r0, [pc, #36]	@ (8008e7c <siprintf+0x3c>)
 8008e58:	4909      	ldr	r1, [pc, #36]	@ (8008e80 <siprintf+0x40>)
 8008e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e5e:	9105      	str	r1, [sp, #20]
 8008e60:	6800      	ldr	r0, [r0, #0]
 8008e62:	a902      	add	r1, sp, #8
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008e68:	f001 fc1e 	bl	800a6a8 <_svfiprintf_r>
 8008e6c:	9b02      	ldr	r3, [sp, #8]
 8008e6e:	701c      	strb	r4, [r3, #0]
 8008e70:	b01d      	add	sp, #116	@ 0x74
 8008e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e76:	b003      	add	sp, #12
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	20000090 	.word	0x20000090
 8008e80:	ffff0208 	.word	0xffff0208

08008e84 <__sread>:
 8008e84:	b510      	push	{r4, lr}
 8008e86:	460c      	mov	r4, r1
 8008e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8c:	f000 f86c 	bl	8008f68 <_read_r>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	bfab      	itete	ge
 8008e94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e96:	89a3      	ldrhlt	r3, [r4, #12]
 8008e98:	181b      	addge	r3, r3, r0
 8008e9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e9e:	bfac      	ite	ge
 8008ea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008ea2:	81a3      	strhlt	r3, [r4, #12]
 8008ea4:	bd10      	pop	{r4, pc}

08008ea6 <__swrite>:
 8008ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eaa:	461f      	mov	r7, r3
 8008eac:	898b      	ldrh	r3, [r1, #12]
 8008eae:	4605      	mov	r5, r0
 8008eb0:	05db      	lsls	r3, r3, #23
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	4616      	mov	r6, r2
 8008eb6:	d505      	bpl.n	8008ec4 <__swrite+0x1e>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec0:	f000 f840 	bl	8008f44 <_lseek_r>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	4632      	mov	r2, r6
 8008ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	4628      	mov	r0, r5
 8008ed0:	463b      	mov	r3, r7
 8008ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	f000 b857 	b.w	8008f8c <_write_r>

08008ede <__sseek>:
 8008ede:	b510      	push	{r4, lr}
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee6:	f000 f82d 	bl	8008f44 <_lseek_r>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	bf15      	itete	ne
 8008ef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008efa:	81a3      	strheq	r3, [r4, #12]
 8008efc:	bf18      	it	ne
 8008efe:	81a3      	strhne	r3, [r4, #12]
 8008f00:	bd10      	pop	{r4, pc}

08008f02 <__sclose>:
 8008f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f06:	f000 b80d 	b.w	8008f24 <_close_r>

08008f0a <memset>:
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4402      	add	r2, r0
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d100      	bne.n	8008f14 <memset+0xa>
 8008f12:	4770      	bx	lr
 8008f14:	f803 1b01 	strb.w	r1, [r3], #1
 8008f18:	e7f9      	b.n	8008f0e <memset+0x4>
	...

08008f1c <_localeconv_r>:
 8008f1c:	4800      	ldr	r0, [pc, #0]	@ (8008f20 <_localeconv_r+0x4>)
 8008f1e:	4770      	bx	lr
 8008f20:	200001d0 	.word	0x200001d0

08008f24 <_close_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	2300      	movs	r3, #0
 8008f28:	4d05      	ldr	r5, [pc, #20]	@ (8008f40 <_close_r+0x1c>)
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	f7f9 fe1d 	bl	8002b6e <_close>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_close_r+0x1a>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_close_r+0x1a>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	20000d8c 	.word	0x20000d8c

08008f44 <_lseek_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4604      	mov	r4, r0
 8008f48:	4608      	mov	r0, r1
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	4d05      	ldr	r5, [pc, #20]	@ (8008f64 <_lseek_r+0x20>)
 8008f50:	602a      	str	r2, [r5, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f7f9 fe2f 	bl	8002bb6 <_lseek>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_lseek_r+0x1e>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_lseek_r+0x1e>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	20000d8c 	.word	0x20000d8c

08008f68 <_read_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	4611      	mov	r1, r2
 8008f70:	2200      	movs	r2, #0
 8008f72:	4d05      	ldr	r5, [pc, #20]	@ (8008f88 <_read_r+0x20>)
 8008f74:	602a      	str	r2, [r5, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	f7f9 fddc 	bl	8002b34 <_read>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_read_r+0x1e>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_read_r+0x1e>
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	20000d8c 	.word	0x20000d8c

08008f8c <_write_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4604      	mov	r4, r0
 8008f90:	4608      	mov	r0, r1
 8008f92:	4611      	mov	r1, r2
 8008f94:	2200      	movs	r2, #0
 8008f96:	4d05      	ldr	r5, [pc, #20]	@ (8008fac <_write_r+0x20>)
 8008f98:	602a      	str	r2, [r5, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	f7f8 fd92 	bl	8001ac4 <_write>
 8008fa0:	1c43      	adds	r3, r0, #1
 8008fa2:	d102      	bne.n	8008faa <_write_r+0x1e>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	b103      	cbz	r3, 8008faa <_write_r+0x1e>
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	20000d8c 	.word	0x20000d8c

08008fb0 <__errno>:
 8008fb0:	4b01      	ldr	r3, [pc, #4]	@ (8008fb8 <__errno+0x8>)
 8008fb2:	6818      	ldr	r0, [r3, #0]
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	20000090 	.word	0x20000090

08008fbc <__libc_init_array>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	2600      	movs	r6, #0
 8008fc0:	4d0c      	ldr	r5, [pc, #48]	@ (8008ff4 <__libc_init_array+0x38>)
 8008fc2:	4c0d      	ldr	r4, [pc, #52]	@ (8008ff8 <__libc_init_array+0x3c>)
 8008fc4:	1b64      	subs	r4, r4, r5
 8008fc6:	10a4      	asrs	r4, r4, #2
 8008fc8:	42a6      	cmp	r6, r4
 8008fca:	d109      	bne.n	8008fe0 <__libc_init_array+0x24>
 8008fcc:	f002 fbd8 	bl	800b780 <_init>
 8008fd0:	2600      	movs	r6, #0
 8008fd2:	4d0a      	ldr	r5, [pc, #40]	@ (8008ffc <__libc_init_array+0x40>)
 8008fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8009000 <__libc_init_array+0x44>)
 8008fd6:	1b64      	subs	r4, r4, r5
 8008fd8:	10a4      	asrs	r4, r4, #2
 8008fda:	42a6      	cmp	r6, r4
 8008fdc:	d105      	bne.n	8008fea <__libc_init_array+0x2e>
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe4:	4798      	blx	r3
 8008fe6:	3601      	adds	r6, #1
 8008fe8:	e7ee      	b.n	8008fc8 <__libc_init_array+0xc>
 8008fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fee:	4798      	blx	r3
 8008ff0:	3601      	adds	r6, #1
 8008ff2:	e7f2      	b.n	8008fda <__libc_init_array+0x1e>
 8008ff4:	0800c348 	.word	0x0800c348
 8008ff8:	0800c348 	.word	0x0800c348
 8008ffc:	0800c348 	.word	0x0800c348
 8009000:	0800c34c 	.word	0x0800c34c

08009004 <__retarget_lock_init_recursive>:
 8009004:	4770      	bx	lr

08009006 <__retarget_lock_acquire_recursive>:
 8009006:	4770      	bx	lr

08009008 <__retarget_lock_release_recursive>:
 8009008:	4770      	bx	lr

0800900a <memchr>:
 800900a:	4603      	mov	r3, r0
 800900c:	b510      	push	{r4, lr}
 800900e:	b2c9      	uxtb	r1, r1
 8009010:	4402      	add	r2, r0
 8009012:	4293      	cmp	r3, r2
 8009014:	4618      	mov	r0, r3
 8009016:	d101      	bne.n	800901c <memchr+0x12>
 8009018:	2000      	movs	r0, #0
 800901a:	e003      	b.n	8009024 <memchr+0x1a>
 800901c:	7804      	ldrb	r4, [r0, #0]
 800901e:	3301      	adds	r3, #1
 8009020:	428c      	cmp	r4, r1
 8009022:	d1f6      	bne.n	8009012 <memchr+0x8>
 8009024:	bd10      	pop	{r4, pc}

08009026 <memcpy>:
 8009026:	440a      	add	r2, r1
 8009028:	4291      	cmp	r1, r2
 800902a:	f100 33ff 	add.w	r3, r0, #4294967295
 800902e:	d100      	bne.n	8009032 <memcpy+0xc>
 8009030:	4770      	bx	lr
 8009032:	b510      	push	{r4, lr}
 8009034:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009038:	4291      	cmp	r1, r2
 800903a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800903e:	d1f9      	bne.n	8009034 <memcpy+0xe>
 8009040:	bd10      	pop	{r4, pc}

08009042 <quorem>:
 8009042:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009046:	6903      	ldr	r3, [r0, #16]
 8009048:	690c      	ldr	r4, [r1, #16]
 800904a:	4607      	mov	r7, r0
 800904c:	42a3      	cmp	r3, r4
 800904e:	db7e      	blt.n	800914e <quorem+0x10c>
 8009050:	3c01      	subs	r4, #1
 8009052:	00a3      	lsls	r3, r4, #2
 8009054:	f100 0514 	add.w	r5, r0, #20
 8009058:	f101 0814 	add.w	r8, r1, #20
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800906c:	3301      	adds	r3, #1
 800906e:	429a      	cmp	r2, r3
 8009070:	fbb2 f6f3 	udiv	r6, r2, r3
 8009074:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009078:	d32e      	bcc.n	80090d8 <quorem+0x96>
 800907a:	f04f 0a00 	mov.w	sl, #0
 800907e:	46c4      	mov	ip, r8
 8009080:	46ae      	mov	lr, r5
 8009082:	46d3      	mov	fp, sl
 8009084:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009088:	b298      	uxth	r0, r3
 800908a:	fb06 a000 	mla	r0, r6, r0, sl
 800908e:	0c1b      	lsrs	r3, r3, #16
 8009090:	0c02      	lsrs	r2, r0, #16
 8009092:	fb06 2303 	mla	r3, r6, r3, r2
 8009096:	f8de 2000 	ldr.w	r2, [lr]
 800909a:	b280      	uxth	r0, r0
 800909c:	b292      	uxth	r2, r2
 800909e:	1a12      	subs	r2, r2, r0
 80090a0:	445a      	add	r2, fp
 80090a2:	f8de 0000 	ldr.w	r0, [lr]
 80090a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80090b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80090b4:	b292      	uxth	r2, r2
 80090b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090ba:	45e1      	cmp	r9, ip
 80090bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80090c0:	f84e 2b04 	str.w	r2, [lr], #4
 80090c4:	d2de      	bcs.n	8009084 <quorem+0x42>
 80090c6:	9b00      	ldr	r3, [sp, #0]
 80090c8:	58eb      	ldr	r3, [r5, r3]
 80090ca:	b92b      	cbnz	r3, 80090d8 <quorem+0x96>
 80090cc:	9b01      	ldr	r3, [sp, #4]
 80090ce:	3b04      	subs	r3, #4
 80090d0:	429d      	cmp	r5, r3
 80090d2:	461a      	mov	r2, r3
 80090d4:	d32f      	bcc.n	8009136 <quorem+0xf4>
 80090d6:	613c      	str	r4, [r7, #16]
 80090d8:	4638      	mov	r0, r7
 80090da:	f001 f981 	bl	800a3e0 <__mcmp>
 80090de:	2800      	cmp	r0, #0
 80090e0:	db25      	blt.n	800912e <quorem+0xec>
 80090e2:	4629      	mov	r1, r5
 80090e4:	2000      	movs	r0, #0
 80090e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80090ea:	f8d1 c000 	ldr.w	ip, [r1]
 80090ee:	fa1f fe82 	uxth.w	lr, r2
 80090f2:	fa1f f38c 	uxth.w	r3, ip
 80090f6:	eba3 030e 	sub.w	r3, r3, lr
 80090fa:	4403      	add	r3, r0
 80090fc:	0c12      	lsrs	r2, r2, #16
 80090fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009102:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009106:	b29b      	uxth	r3, r3
 8009108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800910c:	45c1      	cmp	r9, r8
 800910e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009112:	f841 3b04 	str.w	r3, [r1], #4
 8009116:	d2e6      	bcs.n	80090e6 <quorem+0xa4>
 8009118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800911c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009120:	b922      	cbnz	r2, 800912c <quorem+0xea>
 8009122:	3b04      	subs	r3, #4
 8009124:	429d      	cmp	r5, r3
 8009126:	461a      	mov	r2, r3
 8009128:	d30b      	bcc.n	8009142 <quorem+0x100>
 800912a:	613c      	str	r4, [r7, #16]
 800912c:	3601      	adds	r6, #1
 800912e:	4630      	mov	r0, r6
 8009130:	b003      	add	sp, #12
 8009132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009136:	6812      	ldr	r2, [r2, #0]
 8009138:	3b04      	subs	r3, #4
 800913a:	2a00      	cmp	r2, #0
 800913c:	d1cb      	bne.n	80090d6 <quorem+0x94>
 800913e:	3c01      	subs	r4, #1
 8009140:	e7c6      	b.n	80090d0 <quorem+0x8e>
 8009142:	6812      	ldr	r2, [r2, #0]
 8009144:	3b04      	subs	r3, #4
 8009146:	2a00      	cmp	r2, #0
 8009148:	d1ef      	bne.n	800912a <quorem+0xe8>
 800914a:	3c01      	subs	r4, #1
 800914c:	e7ea      	b.n	8009124 <quorem+0xe2>
 800914e:	2000      	movs	r0, #0
 8009150:	e7ee      	b.n	8009130 <quorem+0xee>
 8009152:	0000      	movs	r0, r0
 8009154:	0000      	movs	r0, r0
	...

08009158 <_dtoa_r>:
 8009158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	4614      	mov	r4, r2
 800915e:	461d      	mov	r5, r3
 8009160:	69c7      	ldr	r7, [r0, #28]
 8009162:	b097      	sub	sp, #92	@ 0x5c
 8009164:	4681      	mov	r9, r0
 8009166:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800916a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800916c:	b97f      	cbnz	r7, 800918e <_dtoa_r+0x36>
 800916e:	2010      	movs	r0, #16
 8009170:	f000 fe0e 	bl	8009d90 <malloc>
 8009174:	4602      	mov	r2, r0
 8009176:	f8c9 001c 	str.w	r0, [r9, #28]
 800917a:	b920      	cbnz	r0, 8009186 <_dtoa_r+0x2e>
 800917c:	21ef      	movs	r1, #239	@ 0xef
 800917e:	4bac      	ldr	r3, [pc, #688]	@ (8009430 <_dtoa_r+0x2d8>)
 8009180:	48ac      	ldr	r0, [pc, #688]	@ (8009434 <_dtoa_r+0x2dc>)
 8009182:	f001 fc5f 	bl	800aa44 <__assert_func>
 8009186:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800918a:	6007      	str	r7, [r0, #0]
 800918c:	60c7      	str	r7, [r0, #12]
 800918e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009192:	6819      	ldr	r1, [r3, #0]
 8009194:	b159      	cbz	r1, 80091ae <_dtoa_r+0x56>
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	2301      	movs	r3, #1
 800919a:	4093      	lsls	r3, r2
 800919c:	604a      	str	r2, [r1, #4]
 800919e:	608b      	str	r3, [r1, #8]
 80091a0:	4648      	mov	r0, r9
 80091a2:	f000 feeb 	bl	8009f7c <_Bfree>
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	1e2b      	subs	r3, r5, #0
 80091b0:	bfaf      	iteee	ge
 80091b2:	2300      	movge	r3, #0
 80091b4:	2201      	movlt	r2, #1
 80091b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80091ba:	9307      	strlt	r3, [sp, #28]
 80091bc:	bfa8      	it	ge
 80091be:	6033      	strge	r3, [r6, #0]
 80091c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80091c4:	4b9c      	ldr	r3, [pc, #624]	@ (8009438 <_dtoa_r+0x2e0>)
 80091c6:	bfb8      	it	lt
 80091c8:	6032      	strlt	r2, [r6, #0]
 80091ca:	ea33 0308 	bics.w	r3, r3, r8
 80091ce:	d112      	bne.n	80091f6 <_dtoa_r+0x9e>
 80091d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80091d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80091dc:	4323      	orrs	r3, r4
 80091de:	f000 855e 	beq.w	8009c9e <_dtoa_r+0xb46>
 80091e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80091e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800943c <_dtoa_r+0x2e4>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8560 	beq.w	8009cae <_dtoa_r+0xb56>
 80091ee:	f10a 0303 	add.w	r3, sl, #3
 80091f2:	f000 bd5a 	b.w	8009caa <_dtoa_r+0xb52>
 80091f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80091fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009202:	2200      	movs	r2, #0
 8009204:	2300      	movs	r3, #0
 8009206:	f7f7 fbcf 	bl	80009a8 <__aeabi_dcmpeq>
 800920a:	4607      	mov	r7, r0
 800920c:	b158      	cbz	r0, 8009226 <_dtoa_r+0xce>
 800920e:	2301      	movs	r3, #1
 8009210:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009216:	b113      	cbz	r3, 800921e <_dtoa_r+0xc6>
 8009218:	4b89      	ldr	r3, [pc, #548]	@ (8009440 <_dtoa_r+0x2e8>)
 800921a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009444 <_dtoa_r+0x2ec>
 8009222:	f000 bd44 	b.w	8009cae <_dtoa_r+0xb56>
 8009226:	ab14      	add	r3, sp, #80	@ 0x50
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	ab15      	add	r3, sp, #84	@ 0x54
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	4648      	mov	r0, r9
 8009230:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009234:	f001 f984 	bl	800a540 <__d2b>
 8009238:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800923c:	9003      	str	r0, [sp, #12]
 800923e:	2e00      	cmp	r6, #0
 8009240:	d078      	beq.n	8009334 <_dtoa_r+0x1dc>
 8009242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009248:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800924c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009250:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009254:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009258:	9712      	str	r7, [sp, #72]	@ 0x48
 800925a:	4619      	mov	r1, r3
 800925c:	2200      	movs	r2, #0
 800925e:	4b7a      	ldr	r3, [pc, #488]	@ (8009448 <_dtoa_r+0x2f0>)
 8009260:	f7f6 ff82 	bl	8000168 <__aeabi_dsub>
 8009264:	a36c      	add	r3, pc, #432	@ (adr r3, 8009418 <_dtoa_r+0x2c0>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	f7f7 f935 	bl	80004d8 <__aeabi_dmul>
 800926e:	a36c      	add	r3, pc, #432	@ (adr r3, 8009420 <_dtoa_r+0x2c8>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f6 ff7a 	bl	800016c <__adddf3>
 8009278:	4604      	mov	r4, r0
 800927a:	4630      	mov	r0, r6
 800927c:	460d      	mov	r5, r1
 800927e:	f7f7 f8c1 	bl	8000404 <__aeabi_i2d>
 8009282:	a369      	add	r3, pc, #420	@ (adr r3, 8009428 <_dtoa_r+0x2d0>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7f7 f926 	bl	80004d8 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	f7f6 ff6a 	bl	800016c <__adddf3>
 8009298:	4604      	mov	r4, r0
 800929a:	460d      	mov	r5, r1
 800929c:	f7f7 fbcc 	bl	8000a38 <__aeabi_d2iz>
 80092a0:	2200      	movs	r2, #0
 80092a2:	4607      	mov	r7, r0
 80092a4:	2300      	movs	r3, #0
 80092a6:	4620      	mov	r0, r4
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7f7 fb87 	bl	80009bc <__aeabi_dcmplt>
 80092ae:	b140      	cbz	r0, 80092c2 <_dtoa_r+0x16a>
 80092b0:	4638      	mov	r0, r7
 80092b2:	f7f7 f8a7 	bl	8000404 <__aeabi_i2d>
 80092b6:	4622      	mov	r2, r4
 80092b8:	462b      	mov	r3, r5
 80092ba:	f7f7 fb75 	bl	80009a8 <__aeabi_dcmpeq>
 80092be:	b900      	cbnz	r0, 80092c2 <_dtoa_r+0x16a>
 80092c0:	3f01      	subs	r7, #1
 80092c2:	2f16      	cmp	r7, #22
 80092c4:	d854      	bhi.n	8009370 <_dtoa_r+0x218>
 80092c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ca:	4b60      	ldr	r3, [pc, #384]	@ (800944c <_dtoa_r+0x2f4>)
 80092cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	f7f7 fb72 	bl	80009bc <__aeabi_dcmplt>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d04b      	beq.n	8009374 <_dtoa_r+0x21c>
 80092dc:	2300      	movs	r3, #0
 80092de:	3f01      	subs	r7, #1
 80092e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80092e4:	1b9b      	subs	r3, r3, r6
 80092e6:	1e5a      	subs	r2, r3, #1
 80092e8:	bf49      	itett	mi
 80092ea:	f1c3 0301 	rsbmi	r3, r3, #1
 80092ee:	2300      	movpl	r3, #0
 80092f0:	9304      	strmi	r3, [sp, #16]
 80092f2:	2300      	movmi	r3, #0
 80092f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80092f6:	bf54      	ite	pl
 80092f8:	9304      	strpl	r3, [sp, #16]
 80092fa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80092fc:	2f00      	cmp	r7, #0
 80092fe:	db3b      	blt.n	8009378 <_dtoa_r+0x220>
 8009300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009302:	970e      	str	r7, [sp, #56]	@ 0x38
 8009304:	443b      	add	r3, r7
 8009306:	9309      	str	r3, [sp, #36]	@ 0x24
 8009308:	2300      	movs	r3, #0
 800930a:	930a      	str	r3, [sp, #40]	@ 0x28
 800930c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800930e:	2b09      	cmp	r3, #9
 8009310:	d865      	bhi.n	80093de <_dtoa_r+0x286>
 8009312:	2b05      	cmp	r3, #5
 8009314:	bfc4      	itt	gt
 8009316:	3b04      	subgt	r3, #4
 8009318:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800931a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800931c:	bfc8      	it	gt
 800931e:	2400      	movgt	r4, #0
 8009320:	f1a3 0302 	sub.w	r3, r3, #2
 8009324:	bfd8      	it	le
 8009326:	2401      	movle	r4, #1
 8009328:	2b03      	cmp	r3, #3
 800932a:	d864      	bhi.n	80093f6 <_dtoa_r+0x29e>
 800932c:	e8df f003 	tbb	[pc, r3]
 8009330:	2c385553 	.word	0x2c385553
 8009334:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009338:	441e      	add	r6, r3
 800933a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800933e:	2b20      	cmp	r3, #32
 8009340:	bfc1      	itttt	gt
 8009342:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009346:	fa08 f803 	lslgt.w	r8, r8, r3
 800934a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800934e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009352:	bfd6      	itet	le
 8009354:	f1c3 0320 	rsble	r3, r3, #32
 8009358:	ea48 0003 	orrgt.w	r0, r8, r3
 800935c:	fa04 f003 	lslle.w	r0, r4, r3
 8009360:	f7f7 f840 	bl	80003e4 <__aeabi_ui2d>
 8009364:	2201      	movs	r2, #1
 8009366:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800936a:	3e01      	subs	r6, #1
 800936c:	9212      	str	r2, [sp, #72]	@ 0x48
 800936e:	e774      	b.n	800925a <_dtoa_r+0x102>
 8009370:	2301      	movs	r3, #1
 8009372:	e7b5      	b.n	80092e0 <_dtoa_r+0x188>
 8009374:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009376:	e7b4      	b.n	80092e2 <_dtoa_r+0x18a>
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	1bdb      	subs	r3, r3, r7
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	427b      	negs	r3, r7
 8009380:	930a      	str	r3, [sp, #40]	@ 0x28
 8009382:	2300      	movs	r3, #0
 8009384:	930e      	str	r3, [sp, #56]	@ 0x38
 8009386:	e7c1      	b.n	800930c <_dtoa_r+0x1b4>
 8009388:	2301      	movs	r3, #1
 800938a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800938c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800938e:	eb07 0b03 	add.w	fp, r7, r3
 8009392:	f10b 0301 	add.w	r3, fp, #1
 8009396:	2b01      	cmp	r3, #1
 8009398:	9308      	str	r3, [sp, #32]
 800939a:	bfb8      	it	lt
 800939c:	2301      	movlt	r3, #1
 800939e:	e006      	b.n	80093ae <_dtoa_r+0x256>
 80093a0:	2301      	movs	r3, #1
 80093a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	dd28      	ble.n	80093fc <_dtoa_r+0x2a4>
 80093aa:	469b      	mov	fp, r3
 80093ac:	9308      	str	r3, [sp, #32]
 80093ae:	2100      	movs	r1, #0
 80093b0:	2204      	movs	r2, #4
 80093b2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80093b6:	f102 0514 	add.w	r5, r2, #20
 80093ba:	429d      	cmp	r5, r3
 80093bc:	d926      	bls.n	800940c <_dtoa_r+0x2b4>
 80093be:	6041      	str	r1, [r0, #4]
 80093c0:	4648      	mov	r0, r9
 80093c2:	f000 fd9b 	bl	8009efc <_Balloc>
 80093c6:	4682      	mov	sl, r0
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d143      	bne.n	8009454 <_dtoa_r+0x2fc>
 80093cc:	4602      	mov	r2, r0
 80093ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80093d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009450 <_dtoa_r+0x2f8>)
 80093d4:	e6d4      	b.n	8009180 <_dtoa_r+0x28>
 80093d6:	2300      	movs	r3, #0
 80093d8:	e7e3      	b.n	80093a2 <_dtoa_r+0x24a>
 80093da:	2300      	movs	r3, #0
 80093dc:	e7d5      	b.n	800938a <_dtoa_r+0x232>
 80093de:	2401      	movs	r4, #1
 80093e0:	2300      	movs	r3, #0
 80093e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80093e6:	f04f 3bff 	mov.w	fp, #4294967295
 80093ea:	2200      	movs	r2, #0
 80093ec:	2312      	movs	r3, #18
 80093ee:	f8cd b020 	str.w	fp, [sp, #32]
 80093f2:	9221      	str	r2, [sp, #132]	@ 0x84
 80093f4:	e7db      	b.n	80093ae <_dtoa_r+0x256>
 80093f6:	2301      	movs	r3, #1
 80093f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093fa:	e7f4      	b.n	80093e6 <_dtoa_r+0x28e>
 80093fc:	f04f 0b01 	mov.w	fp, #1
 8009400:	465b      	mov	r3, fp
 8009402:	f8cd b020 	str.w	fp, [sp, #32]
 8009406:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800940a:	e7d0      	b.n	80093ae <_dtoa_r+0x256>
 800940c:	3101      	adds	r1, #1
 800940e:	0052      	lsls	r2, r2, #1
 8009410:	e7d1      	b.n	80093b6 <_dtoa_r+0x25e>
 8009412:	bf00      	nop
 8009414:	f3af 8000 	nop.w
 8009418:	636f4361 	.word	0x636f4361
 800941c:	3fd287a7 	.word	0x3fd287a7
 8009420:	8b60c8b3 	.word	0x8b60c8b3
 8009424:	3fc68a28 	.word	0x3fc68a28
 8009428:	509f79fb 	.word	0x509f79fb
 800942c:	3fd34413 	.word	0x3fd34413
 8009430:	0800bf8b 	.word	0x0800bf8b
 8009434:	0800bfa2 	.word	0x0800bfa2
 8009438:	7ff00000 	.word	0x7ff00000
 800943c:	0800bf87 	.word	0x0800bf87
 8009440:	0800bf5b 	.word	0x0800bf5b
 8009444:	0800bf5a 	.word	0x0800bf5a
 8009448:	3ff80000 	.word	0x3ff80000
 800944c:	0800c0f0 	.word	0x0800c0f0
 8009450:	0800bffa 	.word	0x0800bffa
 8009454:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009458:	6018      	str	r0, [r3, #0]
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	2b0e      	cmp	r3, #14
 800945e:	f200 80a1 	bhi.w	80095a4 <_dtoa_r+0x44c>
 8009462:	2c00      	cmp	r4, #0
 8009464:	f000 809e 	beq.w	80095a4 <_dtoa_r+0x44c>
 8009468:	2f00      	cmp	r7, #0
 800946a:	dd33      	ble.n	80094d4 <_dtoa_r+0x37c>
 800946c:	4b9c      	ldr	r3, [pc, #624]	@ (80096e0 <_dtoa_r+0x588>)
 800946e:	f007 020f 	and.w	r2, r7, #15
 8009472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009476:	05f8      	lsls	r0, r7, #23
 8009478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800947c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009480:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009484:	d516      	bpl.n	80094b4 <_dtoa_r+0x35c>
 8009486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800948a:	4b96      	ldr	r3, [pc, #600]	@ (80096e4 <_dtoa_r+0x58c>)
 800948c:	2603      	movs	r6, #3
 800948e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009492:	f7f7 f94b 	bl	800072c <__aeabi_ddiv>
 8009496:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800949a:	f004 040f 	and.w	r4, r4, #15
 800949e:	4d91      	ldr	r5, [pc, #580]	@ (80096e4 <_dtoa_r+0x58c>)
 80094a0:	b954      	cbnz	r4, 80094b8 <_dtoa_r+0x360>
 80094a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094aa:	f7f7 f93f 	bl	800072c <__aeabi_ddiv>
 80094ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80094b2:	e028      	b.n	8009506 <_dtoa_r+0x3ae>
 80094b4:	2602      	movs	r6, #2
 80094b6:	e7f2      	b.n	800949e <_dtoa_r+0x346>
 80094b8:	07e1      	lsls	r1, r4, #31
 80094ba:	d508      	bpl.n	80094ce <_dtoa_r+0x376>
 80094bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80094c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094c4:	f7f7 f808 	bl	80004d8 <__aeabi_dmul>
 80094c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094cc:	3601      	adds	r6, #1
 80094ce:	1064      	asrs	r4, r4, #1
 80094d0:	3508      	adds	r5, #8
 80094d2:	e7e5      	b.n	80094a0 <_dtoa_r+0x348>
 80094d4:	f000 80af 	beq.w	8009636 <_dtoa_r+0x4de>
 80094d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094dc:	427c      	negs	r4, r7
 80094de:	4b80      	ldr	r3, [pc, #512]	@ (80096e0 <_dtoa_r+0x588>)
 80094e0:	f004 020f 	and.w	r2, r4, #15
 80094e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ec:	f7f6 fff4 	bl	80004d8 <__aeabi_dmul>
 80094f0:	2602      	movs	r6, #2
 80094f2:	2300      	movs	r3, #0
 80094f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80094f8:	4d7a      	ldr	r5, [pc, #488]	@ (80096e4 <_dtoa_r+0x58c>)
 80094fa:	1124      	asrs	r4, r4, #4
 80094fc:	2c00      	cmp	r4, #0
 80094fe:	f040 808f 	bne.w	8009620 <_dtoa_r+0x4c8>
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1d3      	bne.n	80094ae <_dtoa_r+0x356>
 8009506:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800950a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 8094 	beq.w	800963a <_dtoa_r+0x4e2>
 8009512:	2200      	movs	r2, #0
 8009514:	4620      	mov	r0, r4
 8009516:	4629      	mov	r1, r5
 8009518:	4b73      	ldr	r3, [pc, #460]	@ (80096e8 <_dtoa_r+0x590>)
 800951a:	f7f7 fa4f 	bl	80009bc <__aeabi_dcmplt>
 800951e:	2800      	cmp	r0, #0
 8009520:	f000 808b 	beq.w	800963a <_dtoa_r+0x4e2>
 8009524:	9b08      	ldr	r3, [sp, #32]
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 8087 	beq.w	800963a <_dtoa_r+0x4e2>
 800952c:	f1bb 0f00 	cmp.w	fp, #0
 8009530:	dd34      	ble.n	800959c <_dtoa_r+0x444>
 8009532:	4620      	mov	r0, r4
 8009534:	2200      	movs	r2, #0
 8009536:	4629      	mov	r1, r5
 8009538:	4b6c      	ldr	r3, [pc, #432]	@ (80096ec <_dtoa_r+0x594>)
 800953a:	f7f6 ffcd 	bl	80004d8 <__aeabi_dmul>
 800953e:	465c      	mov	r4, fp
 8009540:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009544:	f107 38ff 	add.w	r8, r7, #4294967295
 8009548:	3601      	adds	r6, #1
 800954a:	4630      	mov	r0, r6
 800954c:	f7f6 ff5a 	bl	8000404 <__aeabi_i2d>
 8009550:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009554:	f7f6 ffc0 	bl	80004d8 <__aeabi_dmul>
 8009558:	2200      	movs	r2, #0
 800955a:	4b65      	ldr	r3, [pc, #404]	@ (80096f0 <_dtoa_r+0x598>)
 800955c:	f7f6 fe06 	bl	800016c <__adddf3>
 8009560:	4605      	mov	r5, r0
 8009562:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009566:	2c00      	cmp	r4, #0
 8009568:	d16a      	bne.n	8009640 <_dtoa_r+0x4e8>
 800956a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800956e:	2200      	movs	r2, #0
 8009570:	4b60      	ldr	r3, [pc, #384]	@ (80096f4 <_dtoa_r+0x59c>)
 8009572:	f7f6 fdf9 	bl	8000168 <__aeabi_dsub>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800957e:	462a      	mov	r2, r5
 8009580:	4633      	mov	r3, r6
 8009582:	f7f7 fa39 	bl	80009f8 <__aeabi_dcmpgt>
 8009586:	2800      	cmp	r0, #0
 8009588:	f040 8298 	bne.w	8009abc <_dtoa_r+0x964>
 800958c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009590:	462a      	mov	r2, r5
 8009592:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009596:	f7f7 fa11 	bl	80009bc <__aeabi_dcmplt>
 800959a:	bb38      	cbnz	r0, 80095ec <_dtoa_r+0x494>
 800959c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80095a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80095a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f2c0 8157 	blt.w	800985a <_dtoa_r+0x702>
 80095ac:	2f0e      	cmp	r7, #14
 80095ae:	f300 8154 	bgt.w	800985a <_dtoa_r+0x702>
 80095b2:	4b4b      	ldr	r3, [pc, #300]	@ (80096e0 <_dtoa_r+0x588>)
 80095b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80095c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f280 80e5 	bge.w	8009792 <_dtoa_r+0x63a>
 80095c8:	9b08      	ldr	r3, [sp, #32]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f300 80e1 	bgt.w	8009792 <_dtoa_r+0x63a>
 80095d0:	d10c      	bne.n	80095ec <_dtoa_r+0x494>
 80095d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095d6:	2200      	movs	r2, #0
 80095d8:	4b46      	ldr	r3, [pc, #280]	@ (80096f4 <_dtoa_r+0x59c>)
 80095da:	f7f6 ff7d 	bl	80004d8 <__aeabi_dmul>
 80095de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095e2:	f7f7 f9ff 	bl	80009e4 <__aeabi_dcmpge>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f000 8266 	beq.w	8009ab8 <_dtoa_r+0x960>
 80095ec:	2400      	movs	r4, #0
 80095ee:	4625      	mov	r5, r4
 80095f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095f2:	4656      	mov	r6, sl
 80095f4:	ea6f 0803 	mvn.w	r8, r3
 80095f8:	2700      	movs	r7, #0
 80095fa:	4621      	mov	r1, r4
 80095fc:	4648      	mov	r0, r9
 80095fe:	f000 fcbd 	bl	8009f7c <_Bfree>
 8009602:	2d00      	cmp	r5, #0
 8009604:	f000 80bd 	beq.w	8009782 <_dtoa_r+0x62a>
 8009608:	b12f      	cbz	r7, 8009616 <_dtoa_r+0x4be>
 800960a:	42af      	cmp	r7, r5
 800960c:	d003      	beq.n	8009616 <_dtoa_r+0x4be>
 800960e:	4639      	mov	r1, r7
 8009610:	4648      	mov	r0, r9
 8009612:	f000 fcb3 	bl	8009f7c <_Bfree>
 8009616:	4629      	mov	r1, r5
 8009618:	4648      	mov	r0, r9
 800961a:	f000 fcaf 	bl	8009f7c <_Bfree>
 800961e:	e0b0      	b.n	8009782 <_dtoa_r+0x62a>
 8009620:	07e2      	lsls	r2, r4, #31
 8009622:	d505      	bpl.n	8009630 <_dtoa_r+0x4d8>
 8009624:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009628:	f7f6 ff56 	bl	80004d8 <__aeabi_dmul>
 800962c:	2301      	movs	r3, #1
 800962e:	3601      	adds	r6, #1
 8009630:	1064      	asrs	r4, r4, #1
 8009632:	3508      	adds	r5, #8
 8009634:	e762      	b.n	80094fc <_dtoa_r+0x3a4>
 8009636:	2602      	movs	r6, #2
 8009638:	e765      	b.n	8009506 <_dtoa_r+0x3ae>
 800963a:	46b8      	mov	r8, r7
 800963c:	9c08      	ldr	r4, [sp, #32]
 800963e:	e784      	b.n	800954a <_dtoa_r+0x3f2>
 8009640:	4b27      	ldr	r3, [pc, #156]	@ (80096e0 <_dtoa_r+0x588>)
 8009642:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009644:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009648:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800964c:	4454      	add	r4, sl
 800964e:	2900      	cmp	r1, #0
 8009650:	d054      	beq.n	80096fc <_dtoa_r+0x5a4>
 8009652:	2000      	movs	r0, #0
 8009654:	4928      	ldr	r1, [pc, #160]	@ (80096f8 <_dtoa_r+0x5a0>)
 8009656:	f7f7 f869 	bl	800072c <__aeabi_ddiv>
 800965a:	4633      	mov	r3, r6
 800965c:	462a      	mov	r2, r5
 800965e:	f7f6 fd83 	bl	8000168 <__aeabi_dsub>
 8009662:	4656      	mov	r6, sl
 8009664:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800966c:	f7f7 f9e4 	bl	8000a38 <__aeabi_d2iz>
 8009670:	4605      	mov	r5, r0
 8009672:	f7f6 fec7 	bl	8000404 <__aeabi_i2d>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800967e:	f7f6 fd73 	bl	8000168 <__aeabi_dsub>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	3530      	adds	r5, #48	@ 0x30
 8009688:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800968c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009690:	f806 5b01 	strb.w	r5, [r6], #1
 8009694:	f7f7 f992 	bl	80009bc <__aeabi_dcmplt>
 8009698:	2800      	cmp	r0, #0
 800969a:	d172      	bne.n	8009782 <_dtoa_r+0x62a>
 800969c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096a0:	2000      	movs	r0, #0
 80096a2:	4911      	ldr	r1, [pc, #68]	@ (80096e8 <_dtoa_r+0x590>)
 80096a4:	f7f6 fd60 	bl	8000168 <__aeabi_dsub>
 80096a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096ac:	f7f7 f986 	bl	80009bc <__aeabi_dcmplt>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	f040 80b4 	bne.w	800981e <_dtoa_r+0x6c6>
 80096b6:	42a6      	cmp	r6, r4
 80096b8:	f43f af70 	beq.w	800959c <_dtoa_r+0x444>
 80096bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096c0:	2200      	movs	r2, #0
 80096c2:	4b0a      	ldr	r3, [pc, #40]	@ (80096ec <_dtoa_r+0x594>)
 80096c4:	f7f6 ff08 	bl	80004d8 <__aeabi_dmul>
 80096c8:	2200      	movs	r2, #0
 80096ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096d2:	4b06      	ldr	r3, [pc, #24]	@ (80096ec <_dtoa_r+0x594>)
 80096d4:	f7f6 ff00 	bl	80004d8 <__aeabi_dmul>
 80096d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80096dc:	e7c4      	b.n	8009668 <_dtoa_r+0x510>
 80096de:	bf00      	nop
 80096e0:	0800c0f0 	.word	0x0800c0f0
 80096e4:	0800c0c8 	.word	0x0800c0c8
 80096e8:	3ff00000 	.word	0x3ff00000
 80096ec:	40240000 	.word	0x40240000
 80096f0:	401c0000 	.word	0x401c0000
 80096f4:	40140000 	.word	0x40140000
 80096f8:	3fe00000 	.word	0x3fe00000
 80096fc:	4631      	mov	r1, r6
 80096fe:	4628      	mov	r0, r5
 8009700:	f7f6 feea 	bl	80004d8 <__aeabi_dmul>
 8009704:	4656      	mov	r6, sl
 8009706:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800970a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800970c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009710:	f7f7 f992 	bl	8000a38 <__aeabi_d2iz>
 8009714:	4605      	mov	r5, r0
 8009716:	f7f6 fe75 	bl	8000404 <__aeabi_i2d>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009722:	f7f6 fd21 	bl	8000168 <__aeabi_dsub>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	3530      	adds	r5, #48	@ 0x30
 800972c:	f806 5b01 	strb.w	r5, [r6], #1
 8009730:	42a6      	cmp	r6, r4
 8009732:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009736:	f04f 0200 	mov.w	r2, #0
 800973a:	d124      	bne.n	8009786 <_dtoa_r+0x62e>
 800973c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009740:	4bae      	ldr	r3, [pc, #696]	@ (80099fc <_dtoa_r+0x8a4>)
 8009742:	f7f6 fd13 	bl	800016c <__adddf3>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800974e:	f7f7 f953 	bl	80009f8 <__aeabi_dcmpgt>
 8009752:	2800      	cmp	r0, #0
 8009754:	d163      	bne.n	800981e <_dtoa_r+0x6c6>
 8009756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800975a:	2000      	movs	r0, #0
 800975c:	49a7      	ldr	r1, [pc, #668]	@ (80099fc <_dtoa_r+0x8a4>)
 800975e:	f7f6 fd03 	bl	8000168 <__aeabi_dsub>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800976a:	f7f7 f927 	bl	80009bc <__aeabi_dcmplt>
 800976e:	2800      	cmp	r0, #0
 8009770:	f43f af14 	beq.w	800959c <_dtoa_r+0x444>
 8009774:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009776:	1e73      	subs	r3, r6, #1
 8009778:	9313      	str	r3, [sp, #76]	@ 0x4c
 800977a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800977e:	2b30      	cmp	r3, #48	@ 0x30
 8009780:	d0f8      	beq.n	8009774 <_dtoa_r+0x61c>
 8009782:	4647      	mov	r7, r8
 8009784:	e03b      	b.n	80097fe <_dtoa_r+0x6a6>
 8009786:	4b9e      	ldr	r3, [pc, #632]	@ (8009a00 <_dtoa_r+0x8a8>)
 8009788:	f7f6 fea6 	bl	80004d8 <__aeabi_dmul>
 800978c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009790:	e7bc      	b.n	800970c <_dtoa_r+0x5b4>
 8009792:	4656      	mov	r6, sl
 8009794:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800979c:	4620      	mov	r0, r4
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f6 ffc4 	bl	800072c <__aeabi_ddiv>
 80097a4:	f7f7 f948 	bl	8000a38 <__aeabi_d2iz>
 80097a8:	4680      	mov	r8, r0
 80097aa:	f7f6 fe2b 	bl	8000404 <__aeabi_i2d>
 80097ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097b2:	f7f6 fe91 	bl	80004d8 <__aeabi_dmul>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4620      	mov	r0, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	f7f6 fcd3 	bl	8000168 <__aeabi_dsub>
 80097c2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80097c6:	9d08      	ldr	r5, [sp, #32]
 80097c8:	f806 4b01 	strb.w	r4, [r6], #1
 80097cc:	eba6 040a 	sub.w	r4, r6, sl
 80097d0:	42a5      	cmp	r5, r4
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	d133      	bne.n	8009840 <_dtoa_r+0x6e8>
 80097d8:	f7f6 fcc8 	bl	800016c <__adddf3>
 80097dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097e0:	4604      	mov	r4, r0
 80097e2:	460d      	mov	r5, r1
 80097e4:	f7f7 f908 	bl	80009f8 <__aeabi_dcmpgt>
 80097e8:	b9c0      	cbnz	r0, 800981c <_dtoa_r+0x6c4>
 80097ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097ee:	4620      	mov	r0, r4
 80097f0:	4629      	mov	r1, r5
 80097f2:	f7f7 f8d9 	bl	80009a8 <__aeabi_dcmpeq>
 80097f6:	b110      	cbz	r0, 80097fe <_dtoa_r+0x6a6>
 80097f8:	f018 0f01 	tst.w	r8, #1
 80097fc:	d10e      	bne.n	800981c <_dtoa_r+0x6c4>
 80097fe:	4648      	mov	r0, r9
 8009800:	9903      	ldr	r1, [sp, #12]
 8009802:	f000 fbbb 	bl	8009f7c <_Bfree>
 8009806:	2300      	movs	r3, #0
 8009808:	7033      	strb	r3, [r6, #0]
 800980a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800980c:	3701      	adds	r7, #1
 800980e:	601f      	str	r7, [r3, #0]
 8009810:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 824b 	beq.w	8009cae <_dtoa_r+0xb56>
 8009818:	601e      	str	r6, [r3, #0]
 800981a:	e248      	b.n	8009cae <_dtoa_r+0xb56>
 800981c:	46b8      	mov	r8, r7
 800981e:	4633      	mov	r3, r6
 8009820:	461e      	mov	r6, r3
 8009822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009826:	2a39      	cmp	r2, #57	@ 0x39
 8009828:	d106      	bne.n	8009838 <_dtoa_r+0x6e0>
 800982a:	459a      	cmp	sl, r3
 800982c:	d1f8      	bne.n	8009820 <_dtoa_r+0x6c8>
 800982e:	2230      	movs	r2, #48	@ 0x30
 8009830:	f108 0801 	add.w	r8, r8, #1
 8009834:	f88a 2000 	strb.w	r2, [sl]
 8009838:	781a      	ldrb	r2, [r3, #0]
 800983a:	3201      	adds	r2, #1
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	e7a0      	b.n	8009782 <_dtoa_r+0x62a>
 8009840:	2200      	movs	r2, #0
 8009842:	4b6f      	ldr	r3, [pc, #444]	@ (8009a00 <_dtoa_r+0x8a8>)
 8009844:	f7f6 fe48 	bl	80004d8 <__aeabi_dmul>
 8009848:	2200      	movs	r2, #0
 800984a:	2300      	movs	r3, #0
 800984c:	4604      	mov	r4, r0
 800984e:	460d      	mov	r5, r1
 8009850:	f7f7 f8aa 	bl	80009a8 <__aeabi_dcmpeq>
 8009854:	2800      	cmp	r0, #0
 8009856:	d09f      	beq.n	8009798 <_dtoa_r+0x640>
 8009858:	e7d1      	b.n	80097fe <_dtoa_r+0x6a6>
 800985a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800985c:	2a00      	cmp	r2, #0
 800985e:	f000 80ea 	beq.w	8009a36 <_dtoa_r+0x8de>
 8009862:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009864:	2a01      	cmp	r2, #1
 8009866:	f300 80cd 	bgt.w	8009a04 <_dtoa_r+0x8ac>
 800986a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800986c:	2a00      	cmp	r2, #0
 800986e:	f000 80c1 	beq.w	80099f4 <_dtoa_r+0x89c>
 8009872:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009876:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009878:	9e04      	ldr	r6, [sp, #16]
 800987a:	9a04      	ldr	r2, [sp, #16]
 800987c:	2101      	movs	r1, #1
 800987e:	441a      	add	r2, r3
 8009880:	9204      	str	r2, [sp, #16]
 8009882:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009884:	4648      	mov	r0, r9
 8009886:	441a      	add	r2, r3
 8009888:	9209      	str	r2, [sp, #36]	@ 0x24
 800988a:	f000 fc2b 	bl	800a0e4 <__i2b>
 800988e:	4605      	mov	r5, r0
 8009890:	b166      	cbz	r6, 80098ac <_dtoa_r+0x754>
 8009892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009894:	2b00      	cmp	r3, #0
 8009896:	dd09      	ble.n	80098ac <_dtoa_r+0x754>
 8009898:	42b3      	cmp	r3, r6
 800989a:	bfa8      	it	ge
 800989c:	4633      	movge	r3, r6
 800989e:	9a04      	ldr	r2, [sp, #16]
 80098a0:	1af6      	subs	r6, r6, r3
 80098a2:	1ad2      	subs	r2, r2, r3
 80098a4:	9204      	str	r2, [sp, #16]
 80098a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ae:	b30b      	cbz	r3, 80098f4 <_dtoa_r+0x79c>
 80098b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 80c6 	beq.w	8009a44 <_dtoa_r+0x8ec>
 80098b8:	2c00      	cmp	r4, #0
 80098ba:	f000 80c0 	beq.w	8009a3e <_dtoa_r+0x8e6>
 80098be:	4629      	mov	r1, r5
 80098c0:	4622      	mov	r2, r4
 80098c2:	4648      	mov	r0, r9
 80098c4:	f000 fcc6 	bl	800a254 <__pow5mult>
 80098c8:	9a03      	ldr	r2, [sp, #12]
 80098ca:	4601      	mov	r1, r0
 80098cc:	4605      	mov	r5, r0
 80098ce:	4648      	mov	r0, r9
 80098d0:	f000 fc1e 	bl	800a110 <__multiply>
 80098d4:	9903      	ldr	r1, [sp, #12]
 80098d6:	4680      	mov	r8, r0
 80098d8:	4648      	mov	r0, r9
 80098da:	f000 fb4f 	bl	8009f7c <_Bfree>
 80098de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098e0:	1b1b      	subs	r3, r3, r4
 80098e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80098e4:	f000 80b1 	beq.w	8009a4a <_dtoa_r+0x8f2>
 80098e8:	4641      	mov	r1, r8
 80098ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098ec:	4648      	mov	r0, r9
 80098ee:	f000 fcb1 	bl	800a254 <__pow5mult>
 80098f2:	9003      	str	r0, [sp, #12]
 80098f4:	2101      	movs	r1, #1
 80098f6:	4648      	mov	r0, r9
 80098f8:	f000 fbf4 	bl	800a0e4 <__i2b>
 80098fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098fe:	4604      	mov	r4, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 81d8 	beq.w	8009cb6 <_dtoa_r+0xb5e>
 8009906:	461a      	mov	r2, r3
 8009908:	4601      	mov	r1, r0
 800990a:	4648      	mov	r0, r9
 800990c:	f000 fca2 	bl	800a254 <__pow5mult>
 8009910:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009912:	4604      	mov	r4, r0
 8009914:	2b01      	cmp	r3, #1
 8009916:	f300 809f 	bgt.w	8009a58 <_dtoa_r+0x900>
 800991a:	9b06      	ldr	r3, [sp, #24]
 800991c:	2b00      	cmp	r3, #0
 800991e:	f040 8097 	bne.w	8009a50 <_dtoa_r+0x8f8>
 8009922:	9b07      	ldr	r3, [sp, #28]
 8009924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009928:	2b00      	cmp	r3, #0
 800992a:	f040 8093 	bne.w	8009a54 <_dtoa_r+0x8fc>
 800992e:	9b07      	ldr	r3, [sp, #28]
 8009930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009934:	0d1b      	lsrs	r3, r3, #20
 8009936:	051b      	lsls	r3, r3, #20
 8009938:	b133      	cbz	r3, 8009948 <_dtoa_r+0x7f0>
 800993a:	9b04      	ldr	r3, [sp, #16]
 800993c:	3301      	adds	r3, #1
 800993e:	9304      	str	r3, [sp, #16]
 8009940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009942:	3301      	adds	r3, #1
 8009944:	9309      	str	r3, [sp, #36]	@ 0x24
 8009946:	2301      	movs	r3, #1
 8009948:	930a      	str	r3, [sp, #40]	@ 0x28
 800994a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 81b8 	beq.w	8009cc2 <_dtoa_r+0xb6a>
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009958:	6918      	ldr	r0, [r3, #16]
 800995a:	f000 fb77 	bl	800a04c <__hi0bits>
 800995e:	f1c0 0020 	rsb	r0, r0, #32
 8009962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009964:	4418      	add	r0, r3
 8009966:	f010 001f 	ands.w	r0, r0, #31
 800996a:	f000 8082 	beq.w	8009a72 <_dtoa_r+0x91a>
 800996e:	f1c0 0320 	rsb	r3, r0, #32
 8009972:	2b04      	cmp	r3, #4
 8009974:	dd73      	ble.n	8009a5e <_dtoa_r+0x906>
 8009976:	9b04      	ldr	r3, [sp, #16]
 8009978:	f1c0 001c 	rsb	r0, r0, #28
 800997c:	4403      	add	r3, r0
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009982:	4406      	add	r6, r0
 8009984:	4403      	add	r3, r0
 8009986:	9309      	str	r3, [sp, #36]	@ 0x24
 8009988:	9b04      	ldr	r3, [sp, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	dd05      	ble.n	800999a <_dtoa_r+0x842>
 800998e:	461a      	mov	r2, r3
 8009990:	4648      	mov	r0, r9
 8009992:	9903      	ldr	r1, [sp, #12]
 8009994:	f000 fcb8 	bl	800a308 <__lshift>
 8009998:	9003      	str	r0, [sp, #12]
 800999a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800999c:	2b00      	cmp	r3, #0
 800999e:	dd05      	ble.n	80099ac <_dtoa_r+0x854>
 80099a0:	4621      	mov	r1, r4
 80099a2:	461a      	mov	r2, r3
 80099a4:	4648      	mov	r0, r9
 80099a6:	f000 fcaf 	bl	800a308 <__lshift>
 80099aa:	4604      	mov	r4, r0
 80099ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d061      	beq.n	8009a76 <_dtoa_r+0x91e>
 80099b2:	4621      	mov	r1, r4
 80099b4:	9803      	ldr	r0, [sp, #12]
 80099b6:	f000 fd13 	bl	800a3e0 <__mcmp>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	da5b      	bge.n	8009a76 <_dtoa_r+0x91e>
 80099be:	2300      	movs	r3, #0
 80099c0:	220a      	movs	r2, #10
 80099c2:	4648      	mov	r0, r9
 80099c4:	9903      	ldr	r1, [sp, #12]
 80099c6:	f000 fafb 	bl	8009fc0 <__multadd>
 80099ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099cc:	f107 38ff 	add.w	r8, r7, #4294967295
 80099d0:	9003      	str	r0, [sp, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 8177 	beq.w	8009cc6 <_dtoa_r+0xb6e>
 80099d8:	4629      	mov	r1, r5
 80099da:	2300      	movs	r3, #0
 80099dc:	220a      	movs	r2, #10
 80099de:	4648      	mov	r0, r9
 80099e0:	f000 faee 	bl	8009fc0 <__multadd>
 80099e4:	f1bb 0f00 	cmp.w	fp, #0
 80099e8:	4605      	mov	r5, r0
 80099ea:	dc6f      	bgt.n	8009acc <_dtoa_r+0x974>
 80099ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	dc49      	bgt.n	8009a86 <_dtoa_r+0x92e>
 80099f2:	e06b      	b.n	8009acc <_dtoa_r+0x974>
 80099f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099fa:	e73c      	b.n	8009876 <_dtoa_r+0x71e>
 80099fc:	3fe00000 	.word	0x3fe00000
 8009a00:	40240000 	.word	0x40240000
 8009a04:	9b08      	ldr	r3, [sp, #32]
 8009a06:	1e5c      	subs	r4, r3, #1
 8009a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a0a:	42a3      	cmp	r3, r4
 8009a0c:	db09      	blt.n	8009a22 <_dtoa_r+0x8ca>
 8009a0e:	1b1c      	subs	r4, r3, r4
 8009a10:	9b08      	ldr	r3, [sp, #32]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f6bf af30 	bge.w	8009878 <_dtoa_r+0x720>
 8009a18:	9b04      	ldr	r3, [sp, #16]
 8009a1a:	9a08      	ldr	r2, [sp, #32]
 8009a1c:	1a9e      	subs	r6, r3, r2
 8009a1e:	2300      	movs	r3, #0
 8009a20:	e72b      	b.n	800987a <_dtoa_r+0x722>
 8009a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a26:	1ae3      	subs	r3, r4, r3
 8009a28:	441a      	add	r2, r3
 8009a2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009a2c:	9e04      	ldr	r6, [sp, #16]
 8009a2e:	2400      	movs	r4, #0
 8009a30:	9b08      	ldr	r3, [sp, #32]
 8009a32:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a34:	e721      	b.n	800987a <_dtoa_r+0x722>
 8009a36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a38:	9e04      	ldr	r6, [sp, #16]
 8009a3a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009a3c:	e728      	b.n	8009890 <_dtoa_r+0x738>
 8009a3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a42:	e751      	b.n	80098e8 <_dtoa_r+0x790>
 8009a44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a46:	9903      	ldr	r1, [sp, #12]
 8009a48:	e750      	b.n	80098ec <_dtoa_r+0x794>
 8009a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a4e:	e751      	b.n	80098f4 <_dtoa_r+0x79c>
 8009a50:	2300      	movs	r3, #0
 8009a52:	e779      	b.n	8009948 <_dtoa_r+0x7f0>
 8009a54:	9b06      	ldr	r3, [sp, #24]
 8009a56:	e777      	b.n	8009948 <_dtoa_r+0x7f0>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a5c:	e779      	b.n	8009952 <_dtoa_r+0x7fa>
 8009a5e:	d093      	beq.n	8009988 <_dtoa_r+0x830>
 8009a60:	9a04      	ldr	r2, [sp, #16]
 8009a62:	331c      	adds	r3, #28
 8009a64:	441a      	add	r2, r3
 8009a66:	9204      	str	r2, [sp, #16]
 8009a68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a6a:	441e      	add	r6, r3
 8009a6c:	441a      	add	r2, r3
 8009a6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a70:	e78a      	b.n	8009988 <_dtoa_r+0x830>
 8009a72:	4603      	mov	r3, r0
 8009a74:	e7f4      	b.n	8009a60 <_dtoa_r+0x908>
 8009a76:	9b08      	ldr	r3, [sp, #32]
 8009a78:	46b8      	mov	r8, r7
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	dc20      	bgt.n	8009ac0 <_dtoa_r+0x968>
 8009a7e:	469b      	mov	fp, r3
 8009a80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	dd1e      	ble.n	8009ac4 <_dtoa_r+0x96c>
 8009a86:	f1bb 0f00 	cmp.w	fp, #0
 8009a8a:	f47f adb1 	bne.w	80095f0 <_dtoa_r+0x498>
 8009a8e:	4621      	mov	r1, r4
 8009a90:	465b      	mov	r3, fp
 8009a92:	2205      	movs	r2, #5
 8009a94:	4648      	mov	r0, r9
 8009a96:	f000 fa93 	bl	8009fc0 <__multadd>
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	9803      	ldr	r0, [sp, #12]
 8009aa0:	f000 fc9e 	bl	800a3e0 <__mcmp>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	f77f ada3 	ble.w	80095f0 <_dtoa_r+0x498>
 8009aaa:	4656      	mov	r6, sl
 8009aac:	2331      	movs	r3, #49	@ 0x31
 8009aae:	f108 0801 	add.w	r8, r8, #1
 8009ab2:	f806 3b01 	strb.w	r3, [r6], #1
 8009ab6:	e59f      	b.n	80095f8 <_dtoa_r+0x4a0>
 8009ab8:	46b8      	mov	r8, r7
 8009aba:	9c08      	ldr	r4, [sp, #32]
 8009abc:	4625      	mov	r5, r4
 8009abe:	e7f4      	b.n	8009aaa <_dtoa_r+0x952>
 8009ac0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009ac4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 8101 	beq.w	8009cce <_dtoa_r+0xb76>
 8009acc:	2e00      	cmp	r6, #0
 8009ace:	dd05      	ble.n	8009adc <_dtoa_r+0x984>
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4632      	mov	r2, r6
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	f000 fc17 	bl	800a308 <__lshift>
 8009ada:	4605      	mov	r5, r0
 8009adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d05c      	beq.n	8009b9c <_dtoa_r+0xa44>
 8009ae2:	4648      	mov	r0, r9
 8009ae4:	6869      	ldr	r1, [r5, #4]
 8009ae6:	f000 fa09 	bl	8009efc <_Balloc>
 8009aea:	4606      	mov	r6, r0
 8009aec:	b928      	cbnz	r0, 8009afa <_dtoa_r+0x9a2>
 8009aee:	4602      	mov	r2, r0
 8009af0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009af4:	4b80      	ldr	r3, [pc, #512]	@ (8009cf8 <_dtoa_r+0xba0>)
 8009af6:	f7ff bb43 	b.w	8009180 <_dtoa_r+0x28>
 8009afa:	692a      	ldr	r2, [r5, #16]
 8009afc:	f105 010c 	add.w	r1, r5, #12
 8009b00:	3202      	adds	r2, #2
 8009b02:	0092      	lsls	r2, r2, #2
 8009b04:	300c      	adds	r0, #12
 8009b06:	f7ff fa8e 	bl	8009026 <memcpy>
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4648      	mov	r0, r9
 8009b10:	f000 fbfa 	bl	800a308 <__lshift>
 8009b14:	462f      	mov	r7, r5
 8009b16:	4605      	mov	r5, r0
 8009b18:	f10a 0301 	add.w	r3, sl, #1
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	eb0a 030b 	add.w	r3, sl, fp
 8009b22:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b24:	9b06      	ldr	r3, [sp, #24]
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b2c:	9b04      	ldr	r3, [sp, #16]
 8009b2e:	4621      	mov	r1, r4
 8009b30:	9803      	ldr	r0, [sp, #12]
 8009b32:	f103 3bff 	add.w	fp, r3, #4294967295
 8009b36:	f7ff fa84 	bl	8009042 <quorem>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	3330      	adds	r3, #48	@ 0x30
 8009b40:	9006      	str	r0, [sp, #24]
 8009b42:	9803      	ldr	r0, [sp, #12]
 8009b44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b46:	f000 fc4b 	bl	800a3e0 <__mcmp>
 8009b4a:	462a      	mov	r2, r5
 8009b4c:	9008      	str	r0, [sp, #32]
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4648      	mov	r0, r9
 8009b52:	f000 fc61 	bl	800a418 <__mdiff>
 8009b56:	68c2      	ldr	r2, [r0, #12]
 8009b58:	4606      	mov	r6, r0
 8009b5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b5c:	bb02      	cbnz	r2, 8009ba0 <_dtoa_r+0xa48>
 8009b5e:	4601      	mov	r1, r0
 8009b60:	9803      	ldr	r0, [sp, #12]
 8009b62:	f000 fc3d 	bl	800a3e0 <__mcmp>
 8009b66:	4602      	mov	r2, r0
 8009b68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	4648      	mov	r0, r9
 8009b6e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8009b72:	f000 fa03 	bl	8009f7c <_Bfree>
 8009b76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009b7a:	9e04      	ldr	r6, [sp, #16]
 8009b7c:	ea42 0103 	orr.w	r1, r2, r3
 8009b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b82:	4319      	orrs	r1, r3
 8009b84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b86:	d10d      	bne.n	8009ba4 <_dtoa_r+0xa4c>
 8009b88:	2b39      	cmp	r3, #57	@ 0x39
 8009b8a:	d027      	beq.n	8009bdc <_dtoa_r+0xa84>
 8009b8c:	9a08      	ldr	r2, [sp, #32]
 8009b8e:	2a00      	cmp	r2, #0
 8009b90:	dd01      	ble.n	8009b96 <_dtoa_r+0xa3e>
 8009b92:	9b06      	ldr	r3, [sp, #24]
 8009b94:	3331      	adds	r3, #49	@ 0x31
 8009b96:	f88b 3000 	strb.w	r3, [fp]
 8009b9a:	e52e      	b.n	80095fa <_dtoa_r+0x4a2>
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	e7b9      	b.n	8009b14 <_dtoa_r+0x9bc>
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	e7e2      	b.n	8009b6a <_dtoa_r+0xa12>
 8009ba4:	9908      	ldr	r1, [sp, #32]
 8009ba6:	2900      	cmp	r1, #0
 8009ba8:	db04      	blt.n	8009bb4 <_dtoa_r+0xa5c>
 8009baa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8009bac:	4301      	orrs	r1, r0
 8009bae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bb0:	4301      	orrs	r1, r0
 8009bb2:	d120      	bne.n	8009bf6 <_dtoa_r+0xa9e>
 8009bb4:	2a00      	cmp	r2, #0
 8009bb6:	ddee      	ble.n	8009b96 <_dtoa_r+0xa3e>
 8009bb8:	2201      	movs	r2, #1
 8009bba:	9903      	ldr	r1, [sp, #12]
 8009bbc:	4648      	mov	r0, r9
 8009bbe:	9304      	str	r3, [sp, #16]
 8009bc0:	f000 fba2 	bl	800a308 <__lshift>
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	9003      	str	r0, [sp, #12]
 8009bc8:	f000 fc0a 	bl	800a3e0 <__mcmp>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	9b04      	ldr	r3, [sp, #16]
 8009bd0:	dc02      	bgt.n	8009bd8 <_dtoa_r+0xa80>
 8009bd2:	d1e0      	bne.n	8009b96 <_dtoa_r+0xa3e>
 8009bd4:	07da      	lsls	r2, r3, #31
 8009bd6:	d5de      	bpl.n	8009b96 <_dtoa_r+0xa3e>
 8009bd8:	2b39      	cmp	r3, #57	@ 0x39
 8009bda:	d1da      	bne.n	8009b92 <_dtoa_r+0xa3a>
 8009bdc:	2339      	movs	r3, #57	@ 0x39
 8009bde:	f88b 3000 	strb.w	r3, [fp]
 8009be2:	4633      	mov	r3, r6
 8009be4:	461e      	mov	r6, r3
 8009be6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	2a39      	cmp	r2, #57	@ 0x39
 8009bee:	d04e      	beq.n	8009c8e <_dtoa_r+0xb36>
 8009bf0:	3201      	adds	r2, #1
 8009bf2:	701a      	strb	r2, [r3, #0]
 8009bf4:	e501      	b.n	80095fa <_dtoa_r+0x4a2>
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	dd03      	ble.n	8009c02 <_dtoa_r+0xaaa>
 8009bfa:	2b39      	cmp	r3, #57	@ 0x39
 8009bfc:	d0ee      	beq.n	8009bdc <_dtoa_r+0xa84>
 8009bfe:	3301      	adds	r3, #1
 8009c00:	e7c9      	b.n	8009b96 <_dtoa_r+0xa3e>
 8009c02:	9a04      	ldr	r2, [sp, #16]
 8009c04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009c0a:	428a      	cmp	r2, r1
 8009c0c:	d028      	beq.n	8009c60 <_dtoa_r+0xb08>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	220a      	movs	r2, #10
 8009c12:	9903      	ldr	r1, [sp, #12]
 8009c14:	4648      	mov	r0, r9
 8009c16:	f000 f9d3 	bl	8009fc0 <__multadd>
 8009c1a:	42af      	cmp	r7, r5
 8009c1c:	9003      	str	r0, [sp, #12]
 8009c1e:	f04f 0300 	mov.w	r3, #0
 8009c22:	f04f 020a 	mov.w	r2, #10
 8009c26:	4639      	mov	r1, r7
 8009c28:	4648      	mov	r0, r9
 8009c2a:	d107      	bne.n	8009c3c <_dtoa_r+0xae4>
 8009c2c:	f000 f9c8 	bl	8009fc0 <__multadd>
 8009c30:	4607      	mov	r7, r0
 8009c32:	4605      	mov	r5, r0
 8009c34:	9b04      	ldr	r3, [sp, #16]
 8009c36:	3301      	adds	r3, #1
 8009c38:	9304      	str	r3, [sp, #16]
 8009c3a:	e777      	b.n	8009b2c <_dtoa_r+0x9d4>
 8009c3c:	f000 f9c0 	bl	8009fc0 <__multadd>
 8009c40:	4629      	mov	r1, r5
 8009c42:	4607      	mov	r7, r0
 8009c44:	2300      	movs	r3, #0
 8009c46:	220a      	movs	r2, #10
 8009c48:	4648      	mov	r0, r9
 8009c4a:	f000 f9b9 	bl	8009fc0 <__multadd>
 8009c4e:	4605      	mov	r5, r0
 8009c50:	e7f0      	b.n	8009c34 <_dtoa_r+0xadc>
 8009c52:	f1bb 0f00 	cmp.w	fp, #0
 8009c56:	bfcc      	ite	gt
 8009c58:	465e      	movgt	r6, fp
 8009c5a:	2601      	movle	r6, #1
 8009c5c:	2700      	movs	r7, #0
 8009c5e:	4456      	add	r6, sl
 8009c60:	2201      	movs	r2, #1
 8009c62:	9903      	ldr	r1, [sp, #12]
 8009c64:	4648      	mov	r0, r9
 8009c66:	9304      	str	r3, [sp, #16]
 8009c68:	f000 fb4e 	bl	800a308 <__lshift>
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	9003      	str	r0, [sp, #12]
 8009c70:	f000 fbb6 	bl	800a3e0 <__mcmp>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	dcb4      	bgt.n	8009be2 <_dtoa_r+0xa8a>
 8009c78:	d102      	bne.n	8009c80 <_dtoa_r+0xb28>
 8009c7a:	9b04      	ldr	r3, [sp, #16]
 8009c7c:	07db      	lsls	r3, r3, #31
 8009c7e:	d4b0      	bmi.n	8009be2 <_dtoa_r+0xa8a>
 8009c80:	4633      	mov	r3, r6
 8009c82:	461e      	mov	r6, r3
 8009c84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c88:	2a30      	cmp	r2, #48	@ 0x30
 8009c8a:	d0fa      	beq.n	8009c82 <_dtoa_r+0xb2a>
 8009c8c:	e4b5      	b.n	80095fa <_dtoa_r+0x4a2>
 8009c8e:	459a      	cmp	sl, r3
 8009c90:	d1a8      	bne.n	8009be4 <_dtoa_r+0xa8c>
 8009c92:	2331      	movs	r3, #49	@ 0x31
 8009c94:	f108 0801 	add.w	r8, r8, #1
 8009c98:	f88a 3000 	strb.w	r3, [sl]
 8009c9c:	e4ad      	b.n	80095fa <_dtoa_r+0x4a2>
 8009c9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009ca0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009cfc <_dtoa_r+0xba4>
 8009ca4:	b11b      	cbz	r3, 8009cae <_dtoa_r+0xb56>
 8009ca6:	f10a 0308 	add.w	r3, sl, #8
 8009caa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	4650      	mov	r0, sl
 8009cb0:	b017      	add	sp, #92	@ 0x5c
 8009cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	f77f ae2e 	ble.w	800991a <_dtoa_r+0x7c2>
 8009cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	e64d      	b.n	8009962 <_dtoa_r+0x80a>
 8009cc6:	f1bb 0f00 	cmp.w	fp, #0
 8009cca:	f77f aed9 	ble.w	8009a80 <_dtoa_r+0x928>
 8009cce:	4656      	mov	r6, sl
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	9803      	ldr	r0, [sp, #12]
 8009cd4:	f7ff f9b5 	bl	8009042 <quorem>
 8009cd8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009cdc:	f806 3b01 	strb.w	r3, [r6], #1
 8009ce0:	eba6 020a 	sub.w	r2, r6, sl
 8009ce4:	4593      	cmp	fp, r2
 8009ce6:	ddb4      	ble.n	8009c52 <_dtoa_r+0xafa>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	220a      	movs	r2, #10
 8009cec:	4648      	mov	r0, r9
 8009cee:	9903      	ldr	r1, [sp, #12]
 8009cf0:	f000 f966 	bl	8009fc0 <__multadd>
 8009cf4:	9003      	str	r0, [sp, #12]
 8009cf6:	e7eb      	b.n	8009cd0 <_dtoa_r+0xb78>
 8009cf8:	0800bffa 	.word	0x0800bffa
 8009cfc:	0800bf7e 	.word	0x0800bf7e

08009d00 <_free_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4605      	mov	r5, r0
 8009d04:	2900      	cmp	r1, #0
 8009d06:	d040      	beq.n	8009d8a <_free_r+0x8a>
 8009d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d0c:	1f0c      	subs	r4, r1, #4
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	bfb8      	it	lt
 8009d12:	18e4      	addlt	r4, r4, r3
 8009d14:	f000 f8e6 	bl	8009ee4 <__malloc_lock>
 8009d18:	4a1c      	ldr	r2, [pc, #112]	@ (8009d8c <_free_r+0x8c>)
 8009d1a:	6813      	ldr	r3, [r2, #0]
 8009d1c:	b933      	cbnz	r3, 8009d2c <_free_r+0x2c>
 8009d1e:	6063      	str	r3, [r4, #4]
 8009d20:	6014      	str	r4, [r2, #0]
 8009d22:	4628      	mov	r0, r5
 8009d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d28:	f000 b8e2 	b.w	8009ef0 <__malloc_unlock>
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	d908      	bls.n	8009d42 <_free_r+0x42>
 8009d30:	6820      	ldr	r0, [r4, #0]
 8009d32:	1821      	adds	r1, r4, r0
 8009d34:	428b      	cmp	r3, r1
 8009d36:	bf01      	itttt	eq
 8009d38:	6819      	ldreq	r1, [r3, #0]
 8009d3a:	685b      	ldreq	r3, [r3, #4]
 8009d3c:	1809      	addeq	r1, r1, r0
 8009d3e:	6021      	streq	r1, [r4, #0]
 8009d40:	e7ed      	b.n	8009d1e <_free_r+0x1e>
 8009d42:	461a      	mov	r2, r3
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	b10b      	cbz	r3, 8009d4c <_free_r+0x4c>
 8009d48:	42a3      	cmp	r3, r4
 8009d4a:	d9fa      	bls.n	8009d42 <_free_r+0x42>
 8009d4c:	6811      	ldr	r1, [r2, #0]
 8009d4e:	1850      	adds	r0, r2, r1
 8009d50:	42a0      	cmp	r0, r4
 8009d52:	d10b      	bne.n	8009d6c <_free_r+0x6c>
 8009d54:	6820      	ldr	r0, [r4, #0]
 8009d56:	4401      	add	r1, r0
 8009d58:	1850      	adds	r0, r2, r1
 8009d5a:	4283      	cmp	r3, r0
 8009d5c:	6011      	str	r1, [r2, #0]
 8009d5e:	d1e0      	bne.n	8009d22 <_free_r+0x22>
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	4408      	add	r0, r1
 8009d66:	6010      	str	r0, [r2, #0]
 8009d68:	6053      	str	r3, [r2, #4]
 8009d6a:	e7da      	b.n	8009d22 <_free_r+0x22>
 8009d6c:	d902      	bls.n	8009d74 <_free_r+0x74>
 8009d6e:	230c      	movs	r3, #12
 8009d70:	602b      	str	r3, [r5, #0]
 8009d72:	e7d6      	b.n	8009d22 <_free_r+0x22>
 8009d74:	6820      	ldr	r0, [r4, #0]
 8009d76:	1821      	adds	r1, r4, r0
 8009d78:	428b      	cmp	r3, r1
 8009d7a:	bf01      	itttt	eq
 8009d7c:	6819      	ldreq	r1, [r3, #0]
 8009d7e:	685b      	ldreq	r3, [r3, #4]
 8009d80:	1809      	addeq	r1, r1, r0
 8009d82:	6021      	streq	r1, [r4, #0]
 8009d84:	6063      	str	r3, [r4, #4]
 8009d86:	6054      	str	r4, [r2, #4]
 8009d88:	e7cb      	b.n	8009d22 <_free_r+0x22>
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
 8009d8c:	20000d98 	.word	0x20000d98

08009d90 <malloc>:
 8009d90:	4b02      	ldr	r3, [pc, #8]	@ (8009d9c <malloc+0xc>)
 8009d92:	4601      	mov	r1, r0
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	f000 b825 	b.w	8009de4 <_malloc_r>
 8009d9a:	bf00      	nop
 8009d9c:	20000090 	.word	0x20000090

08009da0 <sbrk_aligned>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	4e0f      	ldr	r6, [pc, #60]	@ (8009de0 <sbrk_aligned+0x40>)
 8009da4:	460c      	mov	r4, r1
 8009da6:	6831      	ldr	r1, [r6, #0]
 8009da8:	4605      	mov	r5, r0
 8009daa:	b911      	cbnz	r1, 8009db2 <sbrk_aligned+0x12>
 8009dac:	f000 fe3a 	bl	800aa24 <_sbrk_r>
 8009db0:	6030      	str	r0, [r6, #0]
 8009db2:	4621      	mov	r1, r4
 8009db4:	4628      	mov	r0, r5
 8009db6:	f000 fe35 	bl	800aa24 <_sbrk_r>
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	d103      	bne.n	8009dc6 <sbrk_aligned+0x26>
 8009dbe:	f04f 34ff 	mov.w	r4, #4294967295
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	bd70      	pop	{r4, r5, r6, pc}
 8009dc6:	1cc4      	adds	r4, r0, #3
 8009dc8:	f024 0403 	bic.w	r4, r4, #3
 8009dcc:	42a0      	cmp	r0, r4
 8009dce:	d0f8      	beq.n	8009dc2 <sbrk_aligned+0x22>
 8009dd0:	1a21      	subs	r1, r4, r0
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 fe26 	bl	800aa24 <_sbrk_r>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d1f2      	bne.n	8009dc2 <sbrk_aligned+0x22>
 8009ddc:	e7ef      	b.n	8009dbe <sbrk_aligned+0x1e>
 8009dde:	bf00      	nop
 8009de0:	20000d94 	.word	0x20000d94

08009de4 <_malloc_r>:
 8009de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de8:	1ccd      	adds	r5, r1, #3
 8009dea:	f025 0503 	bic.w	r5, r5, #3
 8009dee:	3508      	adds	r5, #8
 8009df0:	2d0c      	cmp	r5, #12
 8009df2:	bf38      	it	cc
 8009df4:	250c      	movcc	r5, #12
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	4606      	mov	r6, r0
 8009dfa:	db01      	blt.n	8009e00 <_malloc_r+0x1c>
 8009dfc:	42a9      	cmp	r1, r5
 8009dfe:	d904      	bls.n	8009e0a <_malloc_r+0x26>
 8009e00:	230c      	movs	r3, #12
 8009e02:	6033      	str	r3, [r6, #0]
 8009e04:	2000      	movs	r0, #0
 8009e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ee0 <_malloc_r+0xfc>
 8009e0e:	f000 f869 	bl	8009ee4 <__malloc_lock>
 8009e12:	f8d8 3000 	ldr.w	r3, [r8]
 8009e16:	461c      	mov	r4, r3
 8009e18:	bb44      	cbnz	r4, 8009e6c <_malloc_r+0x88>
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7ff ffbf 	bl	8009da0 <sbrk_aligned>
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	4604      	mov	r4, r0
 8009e26:	d158      	bne.n	8009eda <_malloc_r+0xf6>
 8009e28:	f8d8 4000 	ldr.w	r4, [r8]
 8009e2c:	4627      	mov	r7, r4
 8009e2e:	2f00      	cmp	r7, #0
 8009e30:	d143      	bne.n	8009eba <_malloc_r+0xd6>
 8009e32:	2c00      	cmp	r4, #0
 8009e34:	d04b      	beq.n	8009ece <_malloc_r+0xea>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	4639      	mov	r1, r7
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	eb04 0903 	add.w	r9, r4, r3
 8009e40:	f000 fdf0 	bl	800aa24 <_sbrk_r>
 8009e44:	4581      	cmp	r9, r0
 8009e46:	d142      	bne.n	8009ece <_malloc_r+0xea>
 8009e48:	6821      	ldr	r1, [r4, #0]
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	1a6d      	subs	r5, r5, r1
 8009e4e:	4629      	mov	r1, r5
 8009e50:	f7ff ffa6 	bl	8009da0 <sbrk_aligned>
 8009e54:	3001      	adds	r0, #1
 8009e56:	d03a      	beq.n	8009ece <_malloc_r+0xea>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	442b      	add	r3, r5
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	bb62      	cbnz	r2, 8009ec0 <_malloc_r+0xdc>
 8009e66:	f8c8 7000 	str.w	r7, [r8]
 8009e6a:	e00f      	b.n	8009e8c <_malloc_r+0xa8>
 8009e6c:	6822      	ldr	r2, [r4, #0]
 8009e6e:	1b52      	subs	r2, r2, r5
 8009e70:	d420      	bmi.n	8009eb4 <_malloc_r+0xd0>
 8009e72:	2a0b      	cmp	r2, #11
 8009e74:	d917      	bls.n	8009ea6 <_malloc_r+0xc2>
 8009e76:	1961      	adds	r1, r4, r5
 8009e78:	42a3      	cmp	r3, r4
 8009e7a:	6025      	str	r5, [r4, #0]
 8009e7c:	bf18      	it	ne
 8009e7e:	6059      	strne	r1, [r3, #4]
 8009e80:	6863      	ldr	r3, [r4, #4]
 8009e82:	bf08      	it	eq
 8009e84:	f8c8 1000 	streq.w	r1, [r8]
 8009e88:	5162      	str	r2, [r4, r5]
 8009e8a:	604b      	str	r3, [r1, #4]
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f000 f82f 	bl	8009ef0 <__malloc_unlock>
 8009e92:	f104 000b 	add.w	r0, r4, #11
 8009e96:	1d23      	adds	r3, r4, #4
 8009e98:	f020 0007 	bic.w	r0, r0, #7
 8009e9c:	1ac2      	subs	r2, r0, r3
 8009e9e:	bf1c      	itt	ne
 8009ea0:	1a1b      	subne	r3, r3, r0
 8009ea2:	50a3      	strne	r3, [r4, r2]
 8009ea4:	e7af      	b.n	8009e06 <_malloc_r+0x22>
 8009ea6:	6862      	ldr	r2, [r4, #4]
 8009ea8:	42a3      	cmp	r3, r4
 8009eaa:	bf0c      	ite	eq
 8009eac:	f8c8 2000 	streq.w	r2, [r8]
 8009eb0:	605a      	strne	r2, [r3, #4]
 8009eb2:	e7eb      	b.n	8009e8c <_malloc_r+0xa8>
 8009eb4:	4623      	mov	r3, r4
 8009eb6:	6864      	ldr	r4, [r4, #4]
 8009eb8:	e7ae      	b.n	8009e18 <_malloc_r+0x34>
 8009eba:	463c      	mov	r4, r7
 8009ebc:	687f      	ldr	r7, [r7, #4]
 8009ebe:	e7b6      	b.n	8009e2e <_malloc_r+0x4a>
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	42a3      	cmp	r3, r4
 8009ec6:	d1fb      	bne.n	8009ec0 <_malloc_r+0xdc>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	6053      	str	r3, [r2, #4]
 8009ecc:	e7de      	b.n	8009e8c <_malloc_r+0xa8>
 8009ece:	230c      	movs	r3, #12
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	6033      	str	r3, [r6, #0]
 8009ed4:	f000 f80c 	bl	8009ef0 <__malloc_unlock>
 8009ed8:	e794      	b.n	8009e04 <_malloc_r+0x20>
 8009eda:	6005      	str	r5, [r0, #0]
 8009edc:	e7d6      	b.n	8009e8c <_malloc_r+0xa8>
 8009ede:	bf00      	nop
 8009ee0:	20000d98 	.word	0x20000d98

08009ee4 <__malloc_lock>:
 8009ee4:	4801      	ldr	r0, [pc, #4]	@ (8009eec <__malloc_lock+0x8>)
 8009ee6:	f7ff b88e 	b.w	8009006 <__retarget_lock_acquire_recursive>
 8009eea:	bf00      	nop
 8009eec:	20000d90 	.word	0x20000d90

08009ef0 <__malloc_unlock>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	@ (8009ef8 <__malloc_unlock+0x8>)
 8009ef2:	f7ff b889 	b.w	8009008 <__retarget_lock_release_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	20000d90 	.word	0x20000d90

08009efc <_Balloc>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	69c6      	ldr	r6, [r0, #28]
 8009f00:	4604      	mov	r4, r0
 8009f02:	460d      	mov	r5, r1
 8009f04:	b976      	cbnz	r6, 8009f24 <_Balloc+0x28>
 8009f06:	2010      	movs	r0, #16
 8009f08:	f7ff ff42 	bl	8009d90 <malloc>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	61e0      	str	r0, [r4, #28]
 8009f10:	b920      	cbnz	r0, 8009f1c <_Balloc+0x20>
 8009f12:	216b      	movs	r1, #107	@ 0x6b
 8009f14:	4b17      	ldr	r3, [pc, #92]	@ (8009f74 <_Balloc+0x78>)
 8009f16:	4818      	ldr	r0, [pc, #96]	@ (8009f78 <_Balloc+0x7c>)
 8009f18:	f000 fd94 	bl	800aa44 <__assert_func>
 8009f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f20:	6006      	str	r6, [r0, #0]
 8009f22:	60c6      	str	r6, [r0, #12]
 8009f24:	69e6      	ldr	r6, [r4, #28]
 8009f26:	68f3      	ldr	r3, [r6, #12]
 8009f28:	b183      	cbz	r3, 8009f4c <_Balloc+0x50>
 8009f2a:	69e3      	ldr	r3, [r4, #28]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f32:	b9b8      	cbnz	r0, 8009f64 <_Balloc+0x68>
 8009f34:	2101      	movs	r1, #1
 8009f36:	fa01 f605 	lsl.w	r6, r1, r5
 8009f3a:	1d72      	adds	r2, r6, #5
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	0092      	lsls	r2, r2, #2
 8009f40:	f000 fd9e 	bl	800aa80 <_calloc_r>
 8009f44:	b160      	cbz	r0, 8009f60 <_Balloc+0x64>
 8009f46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f4a:	e00e      	b.n	8009f6a <_Balloc+0x6e>
 8009f4c:	2221      	movs	r2, #33	@ 0x21
 8009f4e:	2104      	movs	r1, #4
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 fd95 	bl	800aa80 <_calloc_r>
 8009f56:	69e3      	ldr	r3, [r4, #28]
 8009f58:	60f0      	str	r0, [r6, #12]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1e4      	bne.n	8009f2a <_Balloc+0x2e>
 8009f60:	2000      	movs	r0, #0
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	6802      	ldr	r2, [r0, #0]
 8009f66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f70:	e7f7      	b.n	8009f62 <_Balloc+0x66>
 8009f72:	bf00      	nop
 8009f74:	0800bf8b 	.word	0x0800bf8b
 8009f78:	0800c00b 	.word	0x0800c00b

08009f7c <_Bfree>:
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	69c6      	ldr	r6, [r0, #28]
 8009f80:	4605      	mov	r5, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	b976      	cbnz	r6, 8009fa4 <_Bfree+0x28>
 8009f86:	2010      	movs	r0, #16
 8009f88:	f7ff ff02 	bl	8009d90 <malloc>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	61e8      	str	r0, [r5, #28]
 8009f90:	b920      	cbnz	r0, 8009f9c <_Bfree+0x20>
 8009f92:	218f      	movs	r1, #143	@ 0x8f
 8009f94:	4b08      	ldr	r3, [pc, #32]	@ (8009fb8 <_Bfree+0x3c>)
 8009f96:	4809      	ldr	r0, [pc, #36]	@ (8009fbc <_Bfree+0x40>)
 8009f98:	f000 fd54 	bl	800aa44 <__assert_func>
 8009f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fa0:	6006      	str	r6, [r0, #0]
 8009fa2:	60c6      	str	r6, [r0, #12]
 8009fa4:	b13c      	cbz	r4, 8009fb6 <_Bfree+0x3a>
 8009fa6:	69eb      	ldr	r3, [r5, #28]
 8009fa8:	6862      	ldr	r2, [r4, #4]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fb0:	6021      	str	r1, [r4, #0]
 8009fb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
 8009fb8:	0800bf8b 	.word	0x0800bf8b
 8009fbc:	0800c00b 	.word	0x0800c00b

08009fc0 <__multadd>:
 8009fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	461e      	mov	r6, r3
 8009fca:	2000      	movs	r0, #0
 8009fcc:	690d      	ldr	r5, [r1, #16]
 8009fce:	f101 0c14 	add.w	ip, r1, #20
 8009fd2:	f8dc 3000 	ldr.w	r3, [ip]
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	b299      	uxth	r1, r3
 8009fda:	fb02 6101 	mla	r1, r2, r1, r6
 8009fde:	0c1e      	lsrs	r6, r3, #16
 8009fe0:	0c0b      	lsrs	r3, r1, #16
 8009fe2:	fb02 3306 	mla	r3, r2, r6, r3
 8009fe6:	b289      	uxth	r1, r1
 8009fe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fec:	4285      	cmp	r5, r0
 8009fee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ff2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ff6:	dcec      	bgt.n	8009fd2 <__multadd+0x12>
 8009ff8:	b30e      	cbz	r6, 800a03e <__multadd+0x7e>
 8009ffa:	68a3      	ldr	r3, [r4, #8]
 8009ffc:	42ab      	cmp	r3, r5
 8009ffe:	dc19      	bgt.n	800a034 <__multadd+0x74>
 800a000:	6861      	ldr	r1, [r4, #4]
 800a002:	4638      	mov	r0, r7
 800a004:	3101      	adds	r1, #1
 800a006:	f7ff ff79 	bl	8009efc <_Balloc>
 800a00a:	4680      	mov	r8, r0
 800a00c:	b928      	cbnz	r0, 800a01a <__multadd+0x5a>
 800a00e:	4602      	mov	r2, r0
 800a010:	21ba      	movs	r1, #186	@ 0xba
 800a012:	4b0c      	ldr	r3, [pc, #48]	@ (800a044 <__multadd+0x84>)
 800a014:	480c      	ldr	r0, [pc, #48]	@ (800a048 <__multadd+0x88>)
 800a016:	f000 fd15 	bl	800aa44 <__assert_func>
 800a01a:	6922      	ldr	r2, [r4, #16]
 800a01c:	f104 010c 	add.w	r1, r4, #12
 800a020:	3202      	adds	r2, #2
 800a022:	0092      	lsls	r2, r2, #2
 800a024:	300c      	adds	r0, #12
 800a026:	f7fe fffe 	bl	8009026 <memcpy>
 800a02a:	4621      	mov	r1, r4
 800a02c:	4638      	mov	r0, r7
 800a02e:	f7ff ffa5 	bl	8009f7c <_Bfree>
 800a032:	4644      	mov	r4, r8
 800a034:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a038:	3501      	adds	r5, #1
 800a03a:	615e      	str	r6, [r3, #20]
 800a03c:	6125      	str	r5, [r4, #16]
 800a03e:	4620      	mov	r0, r4
 800a040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a044:	0800bffa 	.word	0x0800bffa
 800a048:	0800c00b 	.word	0x0800c00b

0800a04c <__hi0bits>:
 800a04c:	4603      	mov	r3, r0
 800a04e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a052:	bf3a      	itte	cc
 800a054:	0403      	lslcc	r3, r0, #16
 800a056:	2010      	movcc	r0, #16
 800a058:	2000      	movcs	r0, #0
 800a05a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a05e:	bf3c      	itt	cc
 800a060:	021b      	lslcc	r3, r3, #8
 800a062:	3008      	addcc	r0, #8
 800a064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a068:	bf3c      	itt	cc
 800a06a:	011b      	lslcc	r3, r3, #4
 800a06c:	3004      	addcc	r0, #4
 800a06e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a072:	bf3c      	itt	cc
 800a074:	009b      	lslcc	r3, r3, #2
 800a076:	3002      	addcc	r0, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	db05      	blt.n	800a088 <__hi0bits+0x3c>
 800a07c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a080:	f100 0001 	add.w	r0, r0, #1
 800a084:	bf08      	it	eq
 800a086:	2020      	moveq	r0, #32
 800a088:	4770      	bx	lr

0800a08a <__lo0bits>:
 800a08a:	6803      	ldr	r3, [r0, #0]
 800a08c:	4602      	mov	r2, r0
 800a08e:	f013 0007 	ands.w	r0, r3, #7
 800a092:	d00b      	beq.n	800a0ac <__lo0bits+0x22>
 800a094:	07d9      	lsls	r1, r3, #31
 800a096:	d421      	bmi.n	800a0dc <__lo0bits+0x52>
 800a098:	0798      	lsls	r0, r3, #30
 800a09a:	bf49      	itett	mi
 800a09c:	085b      	lsrmi	r3, r3, #1
 800a09e:	089b      	lsrpl	r3, r3, #2
 800a0a0:	2001      	movmi	r0, #1
 800a0a2:	6013      	strmi	r3, [r2, #0]
 800a0a4:	bf5c      	itt	pl
 800a0a6:	2002      	movpl	r0, #2
 800a0a8:	6013      	strpl	r3, [r2, #0]
 800a0aa:	4770      	bx	lr
 800a0ac:	b299      	uxth	r1, r3
 800a0ae:	b909      	cbnz	r1, 800a0b4 <__lo0bits+0x2a>
 800a0b0:	2010      	movs	r0, #16
 800a0b2:	0c1b      	lsrs	r3, r3, #16
 800a0b4:	b2d9      	uxtb	r1, r3
 800a0b6:	b909      	cbnz	r1, 800a0bc <__lo0bits+0x32>
 800a0b8:	3008      	adds	r0, #8
 800a0ba:	0a1b      	lsrs	r3, r3, #8
 800a0bc:	0719      	lsls	r1, r3, #28
 800a0be:	bf04      	itt	eq
 800a0c0:	091b      	lsreq	r3, r3, #4
 800a0c2:	3004      	addeq	r0, #4
 800a0c4:	0799      	lsls	r1, r3, #30
 800a0c6:	bf04      	itt	eq
 800a0c8:	089b      	lsreq	r3, r3, #2
 800a0ca:	3002      	addeq	r0, #2
 800a0cc:	07d9      	lsls	r1, r3, #31
 800a0ce:	d403      	bmi.n	800a0d8 <__lo0bits+0x4e>
 800a0d0:	085b      	lsrs	r3, r3, #1
 800a0d2:	f100 0001 	add.w	r0, r0, #1
 800a0d6:	d003      	beq.n	800a0e0 <__lo0bits+0x56>
 800a0d8:	6013      	str	r3, [r2, #0]
 800a0da:	4770      	bx	lr
 800a0dc:	2000      	movs	r0, #0
 800a0de:	4770      	bx	lr
 800a0e0:	2020      	movs	r0, #32
 800a0e2:	4770      	bx	lr

0800a0e4 <__i2b>:
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	f7ff ff07 	bl	8009efc <_Balloc>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	b928      	cbnz	r0, 800a0fe <__i2b+0x1a>
 800a0f2:	f240 1145 	movw	r1, #325	@ 0x145
 800a0f6:	4b04      	ldr	r3, [pc, #16]	@ (800a108 <__i2b+0x24>)
 800a0f8:	4804      	ldr	r0, [pc, #16]	@ (800a10c <__i2b+0x28>)
 800a0fa:	f000 fca3 	bl	800aa44 <__assert_func>
 800a0fe:	2301      	movs	r3, #1
 800a100:	6144      	str	r4, [r0, #20]
 800a102:	6103      	str	r3, [r0, #16]
 800a104:	bd10      	pop	{r4, pc}
 800a106:	bf00      	nop
 800a108:	0800bffa 	.word	0x0800bffa
 800a10c:	0800c00b 	.word	0x0800c00b

0800a110 <__multiply>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	4617      	mov	r7, r2
 800a116:	690a      	ldr	r2, [r1, #16]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	4689      	mov	r9, r1
 800a11c:	429a      	cmp	r2, r3
 800a11e:	bfa2      	ittt	ge
 800a120:	463b      	movge	r3, r7
 800a122:	460f      	movge	r7, r1
 800a124:	4699      	movge	r9, r3
 800a126:	693d      	ldr	r5, [r7, #16]
 800a128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	eb05 060a 	add.w	r6, r5, sl
 800a134:	42b3      	cmp	r3, r6
 800a136:	b085      	sub	sp, #20
 800a138:	bfb8      	it	lt
 800a13a:	3101      	addlt	r1, #1
 800a13c:	f7ff fede 	bl	8009efc <_Balloc>
 800a140:	b930      	cbnz	r0, 800a150 <__multiply+0x40>
 800a142:	4602      	mov	r2, r0
 800a144:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a148:	4b40      	ldr	r3, [pc, #256]	@ (800a24c <__multiply+0x13c>)
 800a14a:	4841      	ldr	r0, [pc, #260]	@ (800a250 <__multiply+0x140>)
 800a14c:	f000 fc7a 	bl	800aa44 <__assert_func>
 800a150:	f100 0414 	add.w	r4, r0, #20
 800a154:	4623      	mov	r3, r4
 800a156:	2200      	movs	r2, #0
 800a158:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a15c:	4573      	cmp	r3, lr
 800a15e:	d320      	bcc.n	800a1a2 <__multiply+0x92>
 800a160:	f107 0814 	add.w	r8, r7, #20
 800a164:	f109 0114 	add.w	r1, r9, #20
 800a168:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a16c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a170:	9302      	str	r3, [sp, #8]
 800a172:	1beb      	subs	r3, r5, r7
 800a174:	3b15      	subs	r3, #21
 800a176:	f023 0303 	bic.w	r3, r3, #3
 800a17a:	3304      	adds	r3, #4
 800a17c:	3715      	adds	r7, #21
 800a17e:	42bd      	cmp	r5, r7
 800a180:	bf38      	it	cc
 800a182:	2304      	movcc	r3, #4
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	9b02      	ldr	r3, [sp, #8]
 800a188:	9103      	str	r1, [sp, #12]
 800a18a:	428b      	cmp	r3, r1
 800a18c:	d80c      	bhi.n	800a1a8 <__multiply+0x98>
 800a18e:	2e00      	cmp	r6, #0
 800a190:	dd03      	ble.n	800a19a <__multiply+0x8a>
 800a192:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a196:	2b00      	cmp	r3, #0
 800a198:	d055      	beq.n	800a246 <__multiply+0x136>
 800a19a:	6106      	str	r6, [r0, #16]
 800a19c:	b005      	add	sp, #20
 800a19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a2:	f843 2b04 	str.w	r2, [r3], #4
 800a1a6:	e7d9      	b.n	800a15c <__multiply+0x4c>
 800a1a8:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1ac:	f1ba 0f00 	cmp.w	sl, #0
 800a1b0:	d01f      	beq.n	800a1f2 <__multiply+0xe2>
 800a1b2:	46c4      	mov	ip, r8
 800a1b4:	46a1      	mov	r9, r4
 800a1b6:	2700      	movs	r7, #0
 800a1b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1bc:	f8d9 3000 	ldr.w	r3, [r9]
 800a1c0:	fa1f fb82 	uxth.w	fp, r2
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1ca:	443b      	add	r3, r7
 800a1cc:	f8d9 7000 	ldr.w	r7, [r9]
 800a1d0:	0c12      	lsrs	r2, r2, #16
 800a1d2:	0c3f      	lsrs	r7, r7, #16
 800a1d4:	fb0a 7202 	mla	r2, sl, r2, r7
 800a1d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1e2:	4565      	cmp	r5, ip
 800a1e4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a1e8:	f849 3b04 	str.w	r3, [r9], #4
 800a1ec:	d8e4      	bhi.n	800a1b8 <__multiply+0xa8>
 800a1ee:	9b01      	ldr	r3, [sp, #4]
 800a1f0:	50e7      	str	r7, [r4, r3]
 800a1f2:	9b03      	ldr	r3, [sp, #12]
 800a1f4:	3104      	adds	r1, #4
 800a1f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a1fa:	f1b9 0f00 	cmp.w	r9, #0
 800a1fe:	d020      	beq.n	800a242 <__multiply+0x132>
 800a200:	4647      	mov	r7, r8
 800a202:	46a4      	mov	ip, r4
 800a204:	f04f 0a00 	mov.w	sl, #0
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	f8b7 b000 	ldrh.w	fp, [r7]
 800a20e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a212:	b29b      	uxth	r3, r3
 800a214:	fb09 220b 	mla	r2, r9, fp, r2
 800a218:	4452      	add	r2, sl
 800a21a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a21e:	f84c 3b04 	str.w	r3, [ip], #4
 800a222:	f857 3b04 	ldr.w	r3, [r7], #4
 800a226:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a22a:	f8bc 3000 	ldrh.w	r3, [ip]
 800a22e:	42bd      	cmp	r5, r7
 800a230:	fb09 330a 	mla	r3, r9, sl, r3
 800a234:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a23c:	d8e5      	bhi.n	800a20a <__multiply+0xfa>
 800a23e:	9a01      	ldr	r2, [sp, #4]
 800a240:	50a3      	str	r3, [r4, r2]
 800a242:	3404      	adds	r4, #4
 800a244:	e79f      	b.n	800a186 <__multiply+0x76>
 800a246:	3e01      	subs	r6, #1
 800a248:	e7a1      	b.n	800a18e <__multiply+0x7e>
 800a24a:	bf00      	nop
 800a24c:	0800bffa 	.word	0x0800bffa
 800a250:	0800c00b 	.word	0x0800c00b

0800a254 <__pow5mult>:
 800a254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a258:	4615      	mov	r5, r2
 800a25a:	f012 0203 	ands.w	r2, r2, #3
 800a25e:	4607      	mov	r7, r0
 800a260:	460e      	mov	r6, r1
 800a262:	d007      	beq.n	800a274 <__pow5mult+0x20>
 800a264:	4c25      	ldr	r4, [pc, #148]	@ (800a2fc <__pow5mult+0xa8>)
 800a266:	3a01      	subs	r2, #1
 800a268:	2300      	movs	r3, #0
 800a26a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a26e:	f7ff fea7 	bl	8009fc0 <__multadd>
 800a272:	4606      	mov	r6, r0
 800a274:	10ad      	asrs	r5, r5, #2
 800a276:	d03d      	beq.n	800a2f4 <__pow5mult+0xa0>
 800a278:	69fc      	ldr	r4, [r7, #28]
 800a27a:	b97c      	cbnz	r4, 800a29c <__pow5mult+0x48>
 800a27c:	2010      	movs	r0, #16
 800a27e:	f7ff fd87 	bl	8009d90 <malloc>
 800a282:	4602      	mov	r2, r0
 800a284:	61f8      	str	r0, [r7, #28]
 800a286:	b928      	cbnz	r0, 800a294 <__pow5mult+0x40>
 800a288:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a28c:	4b1c      	ldr	r3, [pc, #112]	@ (800a300 <__pow5mult+0xac>)
 800a28e:	481d      	ldr	r0, [pc, #116]	@ (800a304 <__pow5mult+0xb0>)
 800a290:	f000 fbd8 	bl	800aa44 <__assert_func>
 800a294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a298:	6004      	str	r4, [r0, #0]
 800a29a:	60c4      	str	r4, [r0, #12]
 800a29c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2a4:	b94c      	cbnz	r4, 800a2ba <__pow5mult+0x66>
 800a2a6:	f240 2171 	movw	r1, #625	@ 0x271
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	f7ff ff1a 	bl	800a0e4 <__i2b>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	f04f 0900 	mov.w	r9, #0
 800a2be:	07eb      	lsls	r3, r5, #31
 800a2c0:	d50a      	bpl.n	800a2d8 <__pow5mult+0x84>
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f7ff ff22 	bl	800a110 <__multiply>
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f7ff fe53 	bl	8009f7c <_Bfree>
 800a2d6:	4646      	mov	r6, r8
 800a2d8:	106d      	asrs	r5, r5, #1
 800a2da:	d00b      	beq.n	800a2f4 <__pow5mult+0xa0>
 800a2dc:	6820      	ldr	r0, [r4, #0]
 800a2de:	b938      	cbnz	r0, 800a2f0 <__pow5mult+0x9c>
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7ff ff13 	bl	800a110 <__multiply>
 800a2ea:	6020      	str	r0, [r4, #0]
 800a2ec:	f8c0 9000 	str.w	r9, [r0]
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	e7e4      	b.n	800a2be <__pow5mult+0x6a>
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0800c0bc 	.word	0x0800c0bc
 800a300:	0800bf8b 	.word	0x0800bf8b
 800a304:	0800c00b 	.word	0x0800c00b

0800a308 <__lshift>:
 800a308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	460c      	mov	r4, r1
 800a30e:	4607      	mov	r7, r0
 800a310:	4691      	mov	r9, r2
 800a312:	6923      	ldr	r3, [r4, #16]
 800a314:	6849      	ldr	r1, [r1, #4]
 800a316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a31a:	68a3      	ldr	r3, [r4, #8]
 800a31c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a320:	f108 0601 	add.w	r6, r8, #1
 800a324:	42b3      	cmp	r3, r6
 800a326:	db0b      	blt.n	800a340 <__lshift+0x38>
 800a328:	4638      	mov	r0, r7
 800a32a:	f7ff fde7 	bl	8009efc <_Balloc>
 800a32e:	4605      	mov	r5, r0
 800a330:	b948      	cbnz	r0, 800a346 <__lshift+0x3e>
 800a332:	4602      	mov	r2, r0
 800a334:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a338:	4b27      	ldr	r3, [pc, #156]	@ (800a3d8 <__lshift+0xd0>)
 800a33a:	4828      	ldr	r0, [pc, #160]	@ (800a3dc <__lshift+0xd4>)
 800a33c:	f000 fb82 	bl	800aa44 <__assert_func>
 800a340:	3101      	adds	r1, #1
 800a342:	005b      	lsls	r3, r3, #1
 800a344:	e7ee      	b.n	800a324 <__lshift+0x1c>
 800a346:	2300      	movs	r3, #0
 800a348:	f100 0114 	add.w	r1, r0, #20
 800a34c:	f100 0210 	add.w	r2, r0, #16
 800a350:	4618      	mov	r0, r3
 800a352:	4553      	cmp	r3, sl
 800a354:	db33      	blt.n	800a3be <__lshift+0xb6>
 800a356:	6920      	ldr	r0, [r4, #16]
 800a358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a35c:	f104 0314 	add.w	r3, r4, #20
 800a360:	f019 091f 	ands.w	r9, r9, #31
 800a364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a36c:	d02b      	beq.n	800a3c6 <__lshift+0xbe>
 800a36e:	468a      	mov	sl, r1
 800a370:	2200      	movs	r2, #0
 800a372:	f1c9 0e20 	rsb	lr, r9, #32
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	fa00 f009 	lsl.w	r0, r0, r9
 800a37c:	4310      	orrs	r0, r2
 800a37e:	f84a 0b04 	str.w	r0, [sl], #4
 800a382:	f853 2b04 	ldr.w	r2, [r3], #4
 800a386:	459c      	cmp	ip, r3
 800a388:	fa22 f20e 	lsr.w	r2, r2, lr
 800a38c:	d8f3      	bhi.n	800a376 <__lshift+0x6e>
 800a38e:	ebac 0304 	sub.w	r3, ip, r4
 800a392:	3b15      	subs	r3, #21
 800a394:	f023 0303 	bic.w	r3, r3, #3
 800a398:	3304      	adds	r3, #4
 800a39a:	f104 0015 	add.w	r0, r4, #21
 800a39e:	4560      	cmp	r0, ip
 800a3a0:	bf88      	it	hi
 800a3a2:	2304      	movhi	r3, #4
 800a3a4:	50ca      	str	r2, [r1, r3]
 800a3a6:	b10a      	cbz	r2, 800a3ac <__lshift+0xa4>
 800a3a8:	f108 0602 	add.w	r6, r8, #2
 800a3ac:	3e01      	subs	r6, #1
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	612e      	str	r6, [r5, #16]
 800a3b4:	f7ff fde2 	bl	8009f7c <_Bfree>
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3be:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	e7c5      	b.n	800a352 <__lshift+0x4a>
 800a3c6:	3904      	subs	r1, #4
 800a3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3cc:	459c      	cmp	ip, r3
 800a3ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3d2:	d8f9      	bhi.n	800a3c8 <__lshift+0xc0>
 800a3d4:	e7ea      	b.n	800a3ac <__lshift+0xa4>
 800a3d6:	bf00      	nop
 800a3d8:	0800bffa 	.word	0x0800bffa
 800a3dc:	0800c00b 	.word	0x0800c00b

0800a3e0 <__mcmp>:
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	690a      	ldr	r2, [r1, #16]
 800a3e4:	6900      	ldr	r0, [r0, #16]
 800a3e6:	b530      	push	{r4, r5, lr}
 800a3e8:	1a80      	subs	r0, r0, r2
 800a3ea:	d10e      	bne.n	800a40a <__mcmp+0x2a>
 800a3ec:	3314      	adds	r3, #20
 800a3ee:	3114      	adds	r1, #20
 800a3f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a400:	4295      	cmp	r5, r2
 800a402:	d003      	beq.n	800a40c <__mcmp+0x2c>
 800a404:	d205      	bcs.n	800a412 <__mcmp+0x32>
 800a406:	f04f 30ff 	mov.w	r0, #4294967295
 800a40a:	bd30      	pop	{r4, r5, pc}
 800a40c:	42a3      	cmp	r3, r4
 800a40e:	d3f3      	bcc.n	800a3f8 <__mcmp+0x18>
 800a410:	e7fb      	b.n	800a40a <__mcmp+0x2a>
 800a412:	2001      	movs	r0, #1
 800a414:	e7f9      	b.n	800a40a <__mcmp+0x2a>
	...

0800a418 <__mdiff>:
 800a418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	4689      	mov	r9, r1
 800a41e:	4606      	mov	r6, r0
 800a420:	4611      	mov	r1, r2
 800a422:	4648      	mov	r0, r9
 800a424:	4614      	mov	r4, r2
 800a426:	f7ff ffdb 	bl	800a3e0 <__mcmp>
 800a42a:	1e05      	subs	r5, r0, #0
 800a42c:	d112      	bne.n	800a454 <__mdiff+0x3c>
 800a42e:	4629      	mov	r1, r5
 800a430:	4630      	mov	r0, r6
 800a432:	f7ff fd63 	bl	8009efc <_Balloc>
 800a436:	4602      	mov	r2, r0
 800a438:	b928      	cbnz	r0, 800a446 <__mdiff+0x2e>
 800a43a:	f240 2137 	movw	r1, #567	@ 0x237
 800a43e:	4b3e      	ldr	r3, [pc, #248]	@ (800a538 <__mdiff+0x120>)
 800a440:	483e      	ldr	r0, [pc, #248]	@ (800a53c <__mdiff+0x124>)
 800a442:	f000 faff 	bl	800aa44 <__assert_func>
 800a446:	2301      	movs	r3, #1
 800a448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a44c:	4610      	mov	r0, r2
 800a44e:	b003      	add	sp, #12
 800a450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a454:	bfbc      	itt	lt
 800a456:	464b      	movlt	r3, r9
 800a458:	46a1      	movlt	r9, r4
 800a45a:	4630      	mov	r0, r6
 800a45c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a460:	bfba      	itte	lt
 800a462:	461c      	movlt	r4, r3
 800a464:	2501      	movlt	r5, #1
 800a466:	2500      	movge	r5, #0
 800a468:	f7ff fd48 	bl	8009efc <_Balloc>
 800a46c:	4602      	mov	r2, r0
 800a46e:	b918      	cbnz	r0, 800a478 <__mdiff+0x60>
 800a470:	f240 2145 	movw	r1, #581	@ 0x245
 800a474:	4b30      	ldr	r3, [pc, #192]	@ (800a538 <__mdiff+0x120>)
 800a476:	e7e3      	b.n	800a440 <__mdiff+0x28>
 800a478:	f100 0b14 	add.w	fp, r0, #20
 800a47c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a480:	f109 0310 	add.w	r3, r9, #16
 800a484:	60c5      	str	r5, [r0, #12]
 800a486:	f04f 0c00 	mov.w	ip, #0
 800a48a:	f109 0514 	add.w	r5, r9, #20
 800a48e:	46d9      	mov	r9, fp
 800a490:	6926      	ldr	r6, [r4, #16]
 800a492:	f104 0e14 	add.w	lr, r4, #20
 800a496:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a49a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a49e:	9301      	str	r3, [sp, #4]
 800a4a0:	9b01      	ldr	r3, [sp, #4]
 800a4a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4aa:	b281      	uxth	r1, r0
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	fa1f f38a 	uxth.w	r3, sl
 800a4b2:	1a5b      	subs	r3, r3, r1
 800a4b4:	0c00      	lsrs	r0, r0, #16
 800a4b6:	4463      	add	r3, ip
 800a4b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4c6:	4576      	cmp	r6, lr
 800a4c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4cc:	f849 3b04 	str.w	r3, [r9], #4
 800a4d0:	d8e6      	bhi.n	800a4a0 <__mdiff+0x88>
 800a4d2:	1b33      	subs	r3, r6, r4
 800a4d4:	3b15      	subs	r3, #21
 800a4d6:	f023 0303 	bic.w	r3, r3, #3
 800a4da:	3415      	adds	r4, #21
 800a4dc:	3304      	adds	r3, #4
 800a4de:	42a6      	cmp	r6, r4
 800a4e0:	bf38      	it	cc
 800a4e2:	2304      	movcc	r3, #4
 800a4e4:	441d      	add	r5, r3
 800a4e6:	445b      	add	r3, fp
 800a4e8:	461e      	mov	r6, r3
 800a4ea:	462c      	mov	r4, r5
 800a4ec:	4544      	cmp	r4, r8
 800a4ee:	d30e      	bcc.n	800a50e <__mdiff+0xf6>
 800a4f0:	f108 0103 	add.w	r1, r8, #3
 800a4f4:	1b49      	subs	r1, r1, r5
 800a4f6:	f021 0103 	bic.w	r1, r1, #3
 800a4fa:	3d03      	subs	r5, #3
 800a4fc:	45a8      	cmp	r8, r5
 800a4fe:	bf38      	it	cc
 800a500:	2100      	movcc	r1, #0
 800a502:	440b      	add	r3, r1
 800a504:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a508:	b199      	cbz	r1, 800a532 <__mdiff+0x11a>
 800a50a:	6117      	str	r7, [r2, #16]
 800a50c:	e79e      	b.n	800a44c <__mdiff+0x34>
 800a50e:	46e6      	mov	lr, ip
 800a510:	f854 1b04 	ldr.w	r1, [r4], #4
 800a514:	fa1f fc81 	uxth.w	ip, r1
 800a518:	44f4      	add	ip, lr
 800a51a:	0c08      	lsrs	r0, r1, #16
 800a51c:	4471      	add	r1, lr
 800a51e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a522:	b289      	uxth	r1, r1
 800a524:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a528:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a52c:	f846 1b04 	str.w	r1, [r6], #4
 800a530:	e7dc      	b.n	800a4ec <__mdiff+0xd4>
 800a532:	3f01      	subs	r7, #1
 800a534:	e7e6      	b.n	800a504 <__mdiff+0xec>
 800a536:	bf00      	nop
 800a538:	0800bffa 	.word	0x0800bffa
 800a53c:	0800c00b 	.word	0x0800c00b

0800a540 <__d2b>:
 800a540:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a544:	2101      	movs	r1, #1
 800a546:	4690      	mov	r8, r2
 800a548:	4699      	mov	r9, r3
 800a54a:	9e08      	ldr	r6, [sp, #32]
 800a54c:	f7ff fcd6 	bl	8009efc <_Balloc>
 800a550:	4604      	mov	r4, r0
 800a552:	b930      	cbnz	r0, 800a562 <__d2b+0x22>
 800a554:	4602      	mov	r2, r0
 800a556:	f240 310f 	movw	r1, #783	@ 0x30f
 800a55a:	4b23      	ldr	r3, [pc, #140]	@ (800a5e8 <__d2b+0xa8>)
 800a55c:	4823      	ldr	r0, [pc, #140]	@ (800a5ec <__d2b+0xac>)
 800a55e:	f000 fa71 	bl	800aa44 <__assert_func>
 800a562:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a566:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a56a:	b10d      	cbz	r5, 800a570 <__d2b+0x30>
 800a56c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	f1b8 0300 	subs.w	r3, r8, #0
 800a576:	d024      	beq.n	800a5c2 <__d2b+0x82>
 800a578:	4668      	mov	r0, sp
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	f7ff fd85 	bl	800a08a <__lo0bits>
 800a580:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a584:	b1d8      	cbz	r0, 800a5be <__d2b+0x7e>
 800a586:	f1c0 0320 	rsb	r3, r0, #32
 800a58a:	fa02 f303 	lsl.w	r3, r2, r3
 800a58e:	430b      	orrs	r3, r1
 800a590:	40c2      	lsrs	r2, r0
 800a592:	6163      	str	r3, [r4, #20]
 800a594:	9201      	str	r2, [sp, #4]
 800a596:	9b01      	ldr	r3, [sp, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	bf0c      	ite	eq
 800a59c:	2201      	moveq	r2, #1
 800a59e:	2202      	movne	r2, #2
 800a5a0:	61a3      	str	r3, [r4, #24]
 800a5a2:	6122      	str	r2, [r4, #16]
 800a5a4:	b1ad      	cbz	r5, 800a5d2 <__d2b+0x92>
 800a5a6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a5aa:	4405      	add	r5, r0
 800a5ac:	6035      	str	r5, [r6, #0]
 800a5ae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b4:	6018      	str	r0, [r3, #0]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	b002      	add	sp, #8
 800a5ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a5be:	6161      	str	r1, [r4, #20]
 800a5c0:	e7e9      	b.n	800a596 <__d2b+0x56>
 800a5c2:	a801      	add	r0, sp, #4
 800a5c4:	f7ff fd61 	bl	800a08a <__lo0bits>
 800a5c8:	9b01      	ldr	r3, [sp, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	6163      	str	r3, [r4, #20]
 800a5ce:	3020      	adds	r0, #32
 800a5d0:	e7e7      	b.n	800a5a2 <__d2b+0x62>
 800a5d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5da:	6030      	str	r0, [r6, #0]
 800a5dc:	6918      	ldr	r0, [r3, #16]
 800a5de:	f7ff fd35 	bl	800a04c <__hi0bits>
 800a5e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5e6:	e7e4      	b.n	800a5b2 <__d2b+0x72>
 800a5e8:	0800bffa 	.word	0x0800bffa
 800a5ec:	0800c00b 	.word	0x0800c00b

0800a5f0 <__ssputs_r>:
 800a5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f4:	461f      	mov	r7, r3
 800a5f6:	688e      	ldr	r6, [r1, #8]
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	42be      	cmp	r6, r7
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	4690      	mov	r8, r2
 800a600:	680b      	ldr	r3, [r1, #0]
 800a602:	d82d      	bhi.n	800a660 <__ssputs_r+0x70>
 800a604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a608:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a60c:	d026      	beq.n	800a65c <__ssputs_r+0x6c>
 800a60e:	6965      	ldr	r5, [r4, #20]
 800a610:	6909      	ldr	r1, [r1, #16]
 800a612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a616:	eba3 0901 	sub.w	r9, r3, r1
 800a61a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a61e:	1c7b      	adds	r3, r7, #1
 800a620:	444b      	add	r3, r9
 800a622:	106d      	asrs	r5, r5, #1
 800a624:	429d      	cmp	r5, r3
 800a626:	bf38      	it	cc
 800a628:	461d      	movcc	r5, r3
 800a62a:	0553      	lsls	r3, r2, #21
 800a62c:	d527      	bpl.n	800a67e <__ssputs_r+0x8e>
 800a62e:	4629      	mov	r1, r5
 800a630:	f7ff fbd8 	bl	8009de4 <_malloc_r>
 800a634:	4606      	mov	r6, r0
 800a636:	b360      	cbz	r0, 800a692 <__ssputs_r+0xa2>
 800a638:	464a      	mov	r2, r9
 800a63a:	6921      	ldr	r1, [r4, #16]
 800a63c:	f7fe fcf3 	bl	8009026 <memcpy>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a64a:	81a3      	strh	r3, [r4, #12]
 800a64c:	6126      	str	r6, [r4, #16]
 800a64e:	444e      	add	r6, r9
 800a650:	6026      	str	r6, [r4, #0]
 800a652:	463e      	mov	r6, r7
 800a654:	6165      	str	r5, [r4, #20]
 800a656:	eba5 0509 	sub.w	r5, r5, r9
 800a65a:	60a5      	str	r5, [r4, #8]
 800a65c:	42be      	cmp	r6, r7
 800a65e:	d900      	bls.n	800a662 <__ssputs_r+0x72>
 800a660:	463e      	mov	r6, r7
 800a662:	4632      	mov	r2, r6
 800a664:	4641      	mov	r1, r8
 800a666:	6820      	ldr	r0, [r4, #0]
 800a668:	f000 f9c2 	bl	800a9f0 <memmove>
 800a66c:	2000      	movs	r0, #0
 800a66e:	68a3      	ldr	r3, [r4, #8]
 800a670:	1b9b      	subs	r3, r3, r6
 800a672:	60a3      	str	r3, [r4, #8]
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	4433      	add	r3, r6
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a67e:	462a      	mov	r2, r5
 800a680:	f000 fa24 	bl	800aacc <_realloc_r>
 800a684:	4606      	mov	r6, r0
 800a686:	2800      	cmp	r0, #0
 800a688:	d1e0      	bne.n	800a64c <__ssputs_r+0x5c>
 800a68a:	4650      	mov	r0, sl
 800a68c:	6921      	ldr	r1, [r4, #16]
 800a68e:	f7ff fb37 	bl	8009d00 <_free_r>
 800a692:	230c      	movs	r3, #12
 800a694:	f8ca 3000 	str.w	r3, [sl]
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	f04f 30ff 	mov.w	r0, #4294967295
 800a69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6a2:	81a3      	strh	r3, [r4, #12]
 800a6a4:	e7e9      	b.n	800a67a <__ssputs_r+0x8a>
	...

0800a6a8 <_svfiprintf_r>:
 800a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ac:	4698      	mov	r8, r3
 800a6ae:	898b      	ldrh	r3, [r1, #12]
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	061b      	lsls	r3, r3, #24
 800a6b4:	460d      	mov	r5, r1
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	b09d      	sub	sp, #116	@ 0x74
 800a6ba:	d510      	bpl.n	800a6de <_svfiprintf_r+0x36>
 800a6bc:	690b      	ldr	r3, [r1, #16]
 800a6be:	b973      	cbnz	r3, 800a6de <_svfiprintf_r+0x36>
 800a6c0:	2140      	movs	r1, #64	@ 0x40
 800a6c2:	f7ff fb8f 	bl	8009de4 <_malloc_r>
 800a6c6:	6028      	str	r0, [r5, #0]
 800a6c8:	6128      	str	r0, [r5, #16]
 800a6ca:	b930      	cbnz	r0, 800a6da <_svfiprintf_r+0x32>
 800a6cc:	230c      	movs	r3, #12
 800a6ce:	603b      	str	r3, [r7, #0]
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d4:	b01d      	add	sp, #116	@ 0x74
 800a6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6da:	2340      	movs	r3, #64	@ 0x40
 800a6dc:	616b      	str	r3, [r5, #20]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6e2:	2320      	movs	r3, #32
 800a6e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6e8:	2330      	movs	r3, #48	@ 0x30
 800a6ea:	f04f 0901 	mov.w	r9, #1
 800a6ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6f2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a88c <_svfiprintf_r+0x1e4>
 800a6f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6fa:	4623      	mov	r3, r4
 800a6fc:	469a      	mov	sl, r3
 800a6fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a702:	b10a      	cbz	r2, 800a708 <_svfiprintf_r+0x60>
 800a704:	2a25      	cmp	r2, #37	@ 0x25
 800a706:	d1f9      	bne.n	800a6fc <_svfiprintf_r+0x54>
 800a708:	ebba 0b04 	subs.w	fp, sl, r4
 800a70c:	d00b      	beq.n	800a726 <_svfiprintf_r+0x7e>
 800a70e:	465b      	mov	r3, fp
 800a710:	4622      	mov	r2, r4
 800a712:	4629      	mov	r1, r5
 800a714:	4638      	mov	r0, r7
 800a716:	f7ff ff6b 	bl	800a5f0 <__ssputs_r>
 800a71a:	3001      	adds	r0, #1
 800a71c:	f000 80a7 	beq.w	800a86e <_svfiprintf_r+0x1c6>
 800a720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a722:	445a      	add	r2, fp
 800a724:	9209      	str	r2, [sp, #36]	@ 0x24
 800a726:	f89a 3000 	ldrb.w	r3, [sl]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 809f 	beq.w	800a86e <_svfiprintf_r+0x1c6>
 800a730:	2300      	movs	r3, #0
 800a732:	f04f 32ff 	mov.w	r2, #4294967295
 800a736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a73a:	f10a 0a01 	add.w	sl, sl, #1
 800a73e:	9304      	str	r3, [sp, #16]
 800a740:	9307      	str	r3, [sp, #28]
 800a742:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a746:	931a      	str	r3, [sp, #104]	@ 0x68
 800a748:	4654      	mov	r4, sl
 800a74a:	2205      	movs	r2, #5
 800a74c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a750:	484e      	ldr	r0, [pc, #312]	@ (800a88c <_svfiprintf_r+0x1e4>)
 800a752:	f7fe fc5a 	bl	800900a <memchr>
 800a756:	9a04      	ldr	r2, [sp, #16]
 800a758:	b9d8      	cbnz	r0, 800a792 <_svfiprintf_r+0xea>
 800a75a:	06d0      	lsls	r0, r2, #27
 800a75c:	bf44      	itt	mi
 800a75e:	2320      	movmi	r3, #32
 800a760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a764:	0711      	lsls	r1, r2, #28
 800a766:	bf44      	itt	mi
 800a768:	232b      	movmi	r3, #43	@ 0x2b
 800a76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a76e:	f89a 3000 	ldrb.w	r3, [sl]
 800a772:	2b2a      	cmp	r3, #42	@ 0x2a
 800a774:	d015      	beq.n	800a7a2 <_svfiprintf_r+0xfa>
 800a776:	4654      	mov	r4, sl
 800a778:	2000      	movs	r0, #0
 800a77a:	f04f 0c0a 	mov.w	ip, #10
 800a77e:	9a07      	ldr	r2, [sp, #28]
 800a780:	4621      	mov	r1, r4
 800a782:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a786:	3b30      	subs	r3, #48	@ 0x30
 800a788:	2b09      	cmp	r3, #9
 800a78a:	d94b      	bls.n	800a824 <_svfiprintf_r+0x17c>
 800a78c:	b1b0      	cbz	r0, 800a7bc <_svfiprintf_r+0x114>
 800a78e:	9207      	str	r2, [sp, #28]
 800a790:	e014      	b.n	800a7bc <_svfiprintf_r+0x114>
 800a792:	eba0 0308 	sub.w	r3, r0, r8
 800a796:	fa09 f303 	lsl.w	r3, r9, r3
 800a79a:	4313      	orrs	r3, r2
 800a79c:	46a2      	mov	sl, r4
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	e7d2      	b.n	800a748 <_svfiprintf_r+0xa0>
 800a7a2:	9b03      	ldr	r3, [sp, #12]
 800a7a4:	1d19      	adds	r1, r3, #4
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	9103      	str	r1, [sp, #12]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	bfbb      	ittet	lt
 800a7ae:	425b      	neglt	r3, r3
 800a7b0:	f042 0202 	orrlt.w	r2, r2, #2
 800a7b4:	9307      	strge	r3, [sp, #28]
 800a7b6:	9307      	strlt	r3, [sp, #28]
 800a7b8:	bfb8      	it	lt
 800a7ba:	9204      	strlt	r2, [sp, #16]
 800a7bc:	7823      	ldrb	r3, [r4, #0]
 800a7be:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7c0:	d10a      	bne.n	800a7d8 <_svfiprintf_r+0x130>
 800a7c2:	7863      	ldrb	r3, [r4, #1]
 800a7c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7c6:	d132      	bne.n	800a82e <_svfiprintf_r+0x186>
 800a7c8:	9b03      	ldr	r3, [sp, #12]
 800a7ca:	3402      	adds	r4, #2
 800a7cc:	1d1a      	adds	r2, r3, #4
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	9203      	str	r2, [sp, #12]
 800a7d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7d6:	9305      	str	r3, [sp, #20]
 800a7d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a890 <_svfiprintf_r+0x1e8>
 800a7dc:	2203      	movs	r2, #3
 800a7de:	4650      	mov	r0, sl
 800a7e0:	7821      	ldrb	r1, [r4, #0]
 800a7e2:	f7fe fc12 	bl	800900a <memchr>
 800a7e6:	b138      	cbz	r0, 800a7f8 <_svfiprintf_r+0x150>
 800a7e8:	2240      	movs	r2, #64	@ 0x40
 800a7ea:	9b04      	ldr	r3, [sp, #16]
 800a7ec:	eba0 000a 	sub.w	r0, r0, sl
 800a7f0:	4082      	lsls	r2, r0
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	3401      	adds	r4, #1
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fc:	2206      	movs	r2, #6
 800a7fe:	4825      	ldr	r0, [pc, #148]	@ (800a894 <_svfiprintf_r+0x1ec>)
 800a800:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a804:	f7fe fc01 	bl	800900a <memchr>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d036      	beq.n	800a87a <_svfiprintf_r+0x1d2>
 800a80c:	4b22      	ldr	r3, [pc, #136]	@ (800a898 <_svfiprintf_r+0x1f0>)
 800a80e:	bb1b      	cbnz	r3, 800a858 <_svfiprintf_r+0x1b0>
 800a810:	9b03      	ldr	r3, [sp, #12]
 800a812:	3307      	adds	r3, #7
 800a814:	f023 0307 	bic.w	r3, r3, #7
 800a818:	3308      	adds	r3, #8
 800a81a:	9303      	str	r3, [sp, #12]
 800a81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a81e:	4433      	add	r3, r6
 800a820:	9309      	str	r3, [sp, #36]	@ 0x24
 800a822:	e76a      	b.n	800a6fa <_svfiprintf_r+0x52>
 800a824:	460c      	mov	r4, r1
 800a826:	2001      	movs	r0, #1
 800a828:	fb0c 3202 	mla	r2, ip, r2, r3
 800a82c:	e7a8      	b.n	800a780 <_svfiprintf_r+0xd8>
 800a82e:	2300      	movs	r3, #0
 800a830:	f04f 0c0a 	mov.w	ip, #10
 800a834:	4619      	mov	r1, r3
 800a836:	3401      	adds	r4, #1
 800a838:	9305      	str	r3, [sp, #20]
 800a83a:	4620      	mov	r0, r4
 800a83c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a840:	3a30      	subs	r2, #48	@ 0x30
 800a842:	2a09      	cmp	r2, #9
 800a844:	d903      	bls.n	800a84e <_svfiprintf_r+0x1a6>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0c6      	beq.n	800a7d8 <_svfiprintf_r+0x130>
 800a84a:	9105      	str	r1, [sp, #20]
 800a84c:	e7c4      	b.n	800a7d8 <_svfiprintf_r+0x130>
 800a84e:	4604      	mov	r4, r0
 800a850:	2301      	movs	r3, #1
 800a852:	fb0c 2101 	mla	r1, ip, r1, r2
 800a856:	e7f0      	b.n	800a83a <_svfiprintf_r+0x192>
 800a858:	ab03      	add	r3, sp, #12
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	462a      	mov	r2, r5
 800a85e:	4638      	mov	r0, r7
 800a860:	4b0e      	ldr	r3, [pc, #56]	@ (800a89c <_svfiprintf_r+0x1f4>)
 800a862:	a904      	add	r1, sp, #16
 800a864:	f7fd fe6e 	bl	8008544 <_printf_float>
 800a868:	1c42      	adds	r2, r0, #1
 800a86a:	4606      	mov	r6, r0
 800a86c:	d1d6      	bne.n	800a81c <_svfiprintf_r+0x174>
 800a86e:	89ab      	ldrh	r3, [r5, #12]
 800a870:	065b      	lsls	r3, r3, #25
 800a872:	f53f af2d 	bmi.w	800a6d0 <_svfiprintf_r+0x28>
 800a876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a878:	e72c      	b.n	800a6d4 <_svfiprintf_r+0x2c>
 800a87a:	ab03      	add	r3, sp, #12
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	462a      	mov	r2, r5
 800a880:	4638      	mov	r0, r7
 800a882:	4b06      	ldr	r3, [pc, #24]	@ (800a89c <_svfiprintf_r+0x1f4>)
 800a884:	a904      	add	r1, sp, #16
 800a886:	f7fe f8fb 	bl	8008a80 <_printf_i>
 800a88a:	e7ed      	b.n	800a868 <_svfiprintf_r+0x1c0>
 800a88c:	0800c064 	.word	0x0800c064
 800a890:	0800c06a 	.word	0x0800c06a
 800a894:	0800c06e 	.word	0x0800c06e
 800a898:	08008545 	.word	0x08008545
 800a89c:	0800a5f1 	.word	0x0800a5f1

0800a8a0 <__sflush_r>:
 800a8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	0716      	lsls	r6, r2, #28
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	d454      	bmi.n	800a958 <__sflush_r+0xb8>
 800a8ae:	684b      	ldr	r3, [r1, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dc02      	bgt.n	800a8ba <__sflush_r+0x1a>
 800a8b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	dd48      	ble.n	800a94c <__sflush_r+0xac>
 800a8ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8bc:	2e00      	cmp	r6, #0
 800a8be:	d045      	beq.n	800a94c <__sflush_r+0xac>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8c6:	682f      	ldr	r7, [r5, #0]
 800a8c8:	6a21      	ldr	r1, [r4, #32]
 800a8ca:	602b      	str	r3, [r5, #0]
 800a8cc:	d030      	beq.n	800a930 <__sflush_r+0x90>
 800a8ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	0759      	lsls	r1, r3, #29
 800a8d4:	d505      	bpl.n	800a8e2 <__sflush_r+0x42>
 800a8d6:	6863      	ldr	r3, [r4, #4]
 800a8d8:	1ad2      	subs	r2, r2, r3
 800a8da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8dc:	b10b      	cbz	r3, 800a8e2 <__sflush_r+0x42>
 800a8de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8e0:	1ad2      	subs	r2, r2, r3
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8e8:	6a21      	ldr	r1, [r4, #32]
 800a8ea:	47b0      	blx	r6
 800a8ec:	1c43      	adds	r3, r0, #1
 800a8ee:	89a3      	ldrh	r3, [r4, #12]
 800a8f0:	d106      	bne.n	800a900 <__sflush_r+0x60>
 800a8f2:	6829      	ldr	r1, [r5, #0]
 800a8f4:	291d      	cmp	r1, #29
 800a8f6:	d82b      	bhi.n	800a950 <__sflush_r+0xb0>
 800a8f8:	4a28      	ldr	r2, [pc, #160]	@ (800a99c <__sflush_r+0xfc>)
 800a8fa:	40ca      	lsrs	r2, r1
 800a8fc:	07d6      	lsls	r6, r2, #31
 800a8fe:	d527      	bpl.n	800a950 <__sflush_r+0xb0>
 800a900:	2200      	movs	r2, #0
 800a902:	6062      	str	r2, [r4, #4]
 800a904:	6922      	ldr	r2, [r4, #16]
 800a906:	04d9      	lsls	r1, r3, #19
 800a908:	6022      	str	r2, [r4, #0]
 800a90a:	d504      	bpl.n	800a916 <__sflush_r+0x76>
 800a90c:	1c42      	adds	r2, r0, #1
 800a90e:	d101      	bne.n	800a914 <__sflush_r+0x74>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b903      	cbnz	r3, 800a916 <__sflush_r+0x76>
 800a914:	6560      	str	r0, [r4, #84]	@ 0x54
 800a916:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a918:	602f      	str	r7, [r5, #0]
 800a91a:	b1b9      	cbz	r1, 800a94c <__sflush_r+0xac>
 800a91c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a920:	4299      	cmp	r1, r3
 800a922:	d002      	beq.n	800a92a <__sflush_r+0x8a>
 800a924:	4628      	mov	r0, r5
 800a926:	f7ff f9eb 	bl	8009d00 <_free_r>
 800a92a:	2300      	movs	r3, #0
 800a92c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a92e:	e00d      	b.n	800a94c <__sflush_r+0xac>
 800a930:	2301      	movs	r3, #1
 800a932:	4628      	mov	r0, r5
 800a934:	47b0      	blx	r6
 800a936:	4602      	mov	r2, r0
 800a938:	1c50      	adds	r0, r2, #1
 800a93a:	d1c9      	bne.n	800a8d0 <__sflush_r+0x30>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0c6      	beq.n	800a8d0 <__sflush_r+0x30>
 800a942:	2b1d      	cmp	r3, #29
 800a944:	d001      	beq.n	800a94a <__sflush_r+0xaa>
 800a946:	2b16      	cmp	r3, #22
 800a948:	d11d      	bne.n	800a986 <__sflush_r+0xe6>
 800a94a:	602f      	str	r7, [r5, #0]
 800a94c:	2000      	movs	r0, #0
 800a94e:	e021      	b.n	800a994 <__sflush_r+0xf4>
 800a950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a954:	b21b      	sxth	r3, r3
 800a956:	e01a      	b.n	800a98e <__sflush_r+0xee>
 800a958:	690f      	ldr	r7, [r1, #16]
 800a95a:	2f00      	cmp	r7, #0
 800a95c:	d0f6      	beq.n	800a94c <__sflush_r+0xac>
 800a95e:	0793      	lsls	r3, r2, #30
 800a960:	bf18      	it	ne
 800a962:	2300      	movne	r3, #0
 800a964:	680e      	ldr	r6, [r1, #0]
 800a966:	bf08      	it	eq
 800a968:	694b      	ldreq	r3, [r1, #20]
 800a96a:	1bf6      	subs	r6, r6, r7
 800a96c:	600f      	str	r7, [r1, #0]
 800a96e:	608b      	str	r3, [r1, #8]
 800a970:	2e00      	cmp	r6, #0
 800a972:	ddeb      	ble.n	800a94c <__sflush_r+0xac>
 800a974:	4633      	mov	r3, r6
 800a976:	463a      	mov	r2, r7
 800a978:	4628      	mov	r0, r5
 800a97a:	6a21      	ldr	r1, [r4, #32]
 800a97c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a980:	47e0      	blx	ip
 800a982:	2800      	cmp	r0, #0
 800a984:	dc07      	bgt.n	800a996 <__sflush_r+0xf6>
 800a986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a98e:	f04f 30ff 	mov.w	r0, #4294967295
 800a992:	81a3      	strh	r3, [r4, #12]
 800a994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a996:	4407      	add	r7, r0
 800a998:	1a36      	subs	r6, r6, r0
 800a99a:	e7e9      	b.n	800a970 <__sflush_r+0xd0>
 800a99c:	20400001 	.word	0x20400001

0800a9a0 <_fflush_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	690b      	ldr	r3, [r1, #16]
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	b913      	cbnz	r3, 800a9b0 <_fflush_r+0x10>
 800a9aa:	2500      	movs	r5, #0
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	b118      	cbz	r0, 800a9ba <_fflush_r+0x1a>
 800a9b2:	6a03      	ldr	r3, [r0, #32]
 800a9b4:	b90b      	cbnz	r3, 800a9ba <_fflush_r+0x1a>
 800a9b6:	f7fe fa0d 	bl	8008dd4 <__sinit>
 800a9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0f3      	beq.n	800a9aa <_fflush_r+0xa>
 800a9c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9c4:	07d0      	lsls	r0, r2, #31
 800a9c6:	d404      	bmi.n	800a9d2 <_fflush_r+0x32>
 800a9c8:	0599      	lsls	r1, r3, #22
 800a9ca:	d402      	bmi.n	800a9d2 <_fflush_r+0x32>
 800a9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ce:	f7fe fb1a 	bl	8009006 <__retarget_lock_acquire_recursive>
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	f7ff ff63 	bl	800a8a0 <__sflush_r>
 800a9da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9dc:	4605      	mov	r5, r0
 800a9de:	07da      	lsls	r2, r3, #31
 800a9e0:	d4e4      	bmi.n	800a9ac <_fflush_r+0xc>
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	059b      	lsls	r3, r3, #22
 800a9e6:	d4e1      	bmi.n	800a9ac <_fflush_r+0xc>
 800a9e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ea:	f7fe fb0d 	bl	8009008 <__retarget_lock_release_recursive>
 800a9ee:	e7dd      	b.n	800a9ac <_fflush_r+0xc>

0800a9f0 <memmove>:
 800a9f0:	4288      	cmp	r0, r1
 800a9f2:	b510      	push	{r4, lr}
 800a9f4:	eb01 0402 	add.w	r4, r1, r2
 800a9f8:	d902      	bls.n	800aa00 <memmove+0x10>
 800a9fa:	4284      	cmp	r4, r0
 800a9fc:	4623      	mov	r3, r4
 800a9fe:	d807      	bhi.n	800aa10 <memmove+0x20>
 800aa00:	1e43      	subs	r3, r0, #1
 800aa02:	42a1      	cmp	r1, r4
 800aa04:	d008      	beq.n	800aa18 <memmove+0x28>
 800aa06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa0e:	e7f8      	b.n	800aa02 <memmove+0x12>
 800aa10:	4601      	mov	r1, r0
 800aa12:	4402      	add	r2, r0
 800aa14:	428a      	cmp	r2, r1
 800aa16:	d100      	bne.n	800aa1a <memmove+0x2a>
 800aa18:	bd10      	pop	{r4, pc}
 800aa1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa22:	e7f7      	b.n	800aa14 <memmove+0x24>

0800aa24 <_sbrk_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	2300      	movs	r3, #0
 800aa28:	4d05      	ldr	r5, [pc, #20]	@ (800aa40 <_sbrk_r+0x1c>)
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	4608      	mov	r0, r1
 800aa2e:	602b      	str	r3, [r5, #0]
 800aa30:	f7f8 f8ce 	bl	8002bd0 <_sbrk>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d102      	bne.n	800aa3e <_sbrk_r+0x1a>
 800aa38:	682b      	ldr	r3, [r5, #0]
 800aa3a:	b103      	cbz	r3, 800aa3e <_sbrk_r+0x1a>
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	bd38      	pop	{r3, r4, r5, pc}
 800aa40:	20000d8c 	.word	0x20000d8c

0800aa44 <__assert_func>:
 800aa44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa46:	4614      	mov	r4, r2
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4b09      	ldr	r3, [pc, #36]	@ (800aa70 <__assert_func+0x2c>)
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68d8      	ldr	r0, [r3, #12]
 800aa52:	b14c      	cbz	r4, 800aa68 <__assert_func+0x24>
 800aa54:	4b07      	ldr	r3, [pc, #28]	@ (800aa74 <__assert_func+0x30>)
 800aa56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa5a:	9100      	str	r1, [sp, #0]
 800aa5c:	462b      	mov	r3, r5
 800aa5e:	4906      	ldr	r1, [pc, #24]	@ (800aa78 <__assert_func+0x34>)
 800aa60:	f000 f870 	bl	800ab44 <fiprintf>
 800aa64:	f000 f880 	bl	800ab68 <abort>
 800aa68:	4b04      	ldr	r3, [pc, #16]	@ (800aa7c <__assert_func+0x38>)
 800aa6a:	461c      	mov	r4, r3
 800aa6c:	e7f3      	b.n	800aa56 <__assert_func+0x12>
 800aa6e:	bf00      	nop
 800aa70:	20000090 	.word	0x20000090
 800aa74:	0800c07f 	.word	0x0800c07f
 800aa78:	0800c08c 	.word	0x0800c08c
 800aa7c:	0800c0ba 	.word	0x0800c0ba

0800aa80 <_calloc_r>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	fba1 5402 	umull	r5, r4, r1, r2
 800aa86:	b934      	cbnz	r4, 800aa96 <_calloc_r+0x16>
 800aa88:	4629      	mov	r1, r5
 800aa8a:	f7ff f9ab 	bl	8009de4 <_malloc_r>
 800aa8e:	4606      	mov	r6, r0
 800aa90:	b928      	cbnz	r0, 800aa9e <_calloc_r+0x1e>
 800aa92:	4630      	mov	r0, r6
 800aa94:	bd70      	pop	{r4, r5, r6, pc}
 800aa96:	220c      	movs	r2, #12
 800aa98:	2600      	movs	r6, #0
 800aa9a:	6002      	str	r2, [r0, #0]
 800aa9c:	e7f9      	b.n	800aa92 <_calloc_r+0x12>
 800aa9e:	462a      	mov	r2, r5
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	f7fe fa32 	bl	8008f0a <memset>
 800aaa6:	e7f4      	b.n	800aa92 <_calloc_r+0x12>

0800aaa8 <__ascii_mbtowc>:
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	b901      	cbnz	r1, 800aaae <__ascii_mbtowc+0x6>
 800aaac:	a901      	add	r1, sp, #4
 800aaae:	b142      	cbz	r2, 800aac2 <__ascii_mbtowc+0x1a>
 800aab0:	b14b      	cbz	r3, 800aac6 <__ascii_mbtowc+0x1e>
 800aab2:	7813      	ldrb	r3, [r2, #0]
 800aab4:	600b      	str	r3, [r1, #0]
 800aab6:	7812      	ldrb	r2, [r2, #0]
 800aab8:	1e10      	subs	r0, r2, #0
 800aaba:	bf18      	it	ne
 800aabc:	2001      	movne	r0, #1
 800aabe:	b002      	add	sp, #8
 800aac0:	4770      	bx	lr
 800aac2:	4610      	mov	r0, r2
 800aac4:	e7fb      	b.n	800aabe <__ascii_mbtowc+0x16>
 800aac6:	f06f 0001 	mvn.w	r0, #1
 800aaca:	e7f8      	b.n	800aabe <__ascii_mbtowc+0x16>

0800aacc <_realloc_r>:
 800aacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad0:	4607      	mov	r7, r0
 800aad2:	4614      	mov	r4, r2
 800aad4:	460d      	mov	r5, r1
 800aad6:	b921      	cbnz	r1, 800aae2 <_realloc_r+0x16>
 800aad8:	4611      	mov	r1, r2
 800aada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aade:	f7ff b981 	b.w	8009de4 <_malloc_r>
 800aae2:	b92a      	cbnz	r2, 800aaf0 <_realloc_r+0x24>
 800aae4:	f7ff f90c 	bl	8009d00 <_free_r>
 800aae8:	4625      	mov	r5, r4
 800aaea:	4628      	mov	r0, r5
 800aaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf0:	f000 f841 	bl	800ab76 <_malloc_usable_size_r>
 800aaf4:	4284      	cmp	r4, r0
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	d802      	bhi.n	800ab00 <_realloc_r+0x34>
 800aafa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aafe:	d8f4      	bhi.n	800aaea <_realloc_r+0x1e>
 800ab00:	4621      	mov	r1, r4
 800ab02:	4638      	mov	r0, r7
 800ab04:	f7ff f96e 	bl	8009de4 <_malloc_r>
 800ab08:	4680      	mov	r8, r0
 800ab0a:	b908      	cbnz	r0, 800ab10 <_realloc_r+0x44>
 800ab0c:	4645      	mov	r5, r8
 800ab0e:	e7ec      	b.n	800aaea <_realloc_r+0x1e>
 800ab10:	42b4      	cmp	r4, r6
 800ab12:	4622      	mov	r2, r4
 800ab14:	4629      	mov	r1, r5
 800ab16:	bf28      	it	cs
 800ab18:	4632      	movcs	r2, r6
 800ab1a:	f7fe fa84 	bl	8009026 <memcpy>
 800ab1e:	4629      	mov	r1, r5
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff f8ed 	bl	8009d00 <_free_r>
 800ab26:	e7f1      	b.n	800ab0c <_realloc_r+0x40>

0800ab28 <__ascii_wctomb>:
 800ab28:	4603      	mov	r3, r0
 800ab2a:	4608      	mov	r0, r1
 800ab2c:	b141      	cbz	r1, 800ab40 <__ascii_wctomb+0x18>
 800ab2e:	2aff      	cmp	r2, #255	@ 0xff
 800ab30:	d904      	bls.n	800ab3c <__ascii_wctomb+0x14>
 800ab32:	228a      	movs	r2, #138	@ 0x8a
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	4770      	bx	lr
 800ab3c:	2001      	movs	r0, #1
 800ab3e:	700a      	strb	r2, [r1, #0]
 800ab40:	4770      	bx	lr
	...

0800ab44 <fiprintf>:
 800ab44:	b40e      	push	{r1, r2, r3}
 800ab46:	b503      	push	{r0, r1, lr}
 800ab48:	4601      	mov	r1, r0
 800ab4a:	ab03      	add	r3, sp, #12
 800ab4c:	4805      	ldr	r0, [pc, #20]	@ (800ab64 <fiprintf+0x20>)
 800ab4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab52:	6800      	ldr	r0, [r0, #0]
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	f000 f83d 	bl	800abd4 <_vfiprintf_r>
 800ab5a:	b002      	add	sp, #8
 800ab5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab60:	b003      	add	sp, #12
 800ab62:	4770      	bx	lr
 800ab64:	20000090 	.word	0x20000090

0800ab68 <abort>:
 800ab68:	2006      	movs	r0, #6
 800ab6a:	b508      	push	{r3, lr}
 800ab6c:	f000 fa06 	bl	800af7c <raise>
 800ab70:	2001      	movs	r0, #1
 800ab72:	f7f7 ffd4 	bl	8002b1e <_exit>

0800ab76 <_malloc_usable_size_r>:
 800ab76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab7a:	1f18      	subs	r0, r3, #4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bfbc      	itt	lt
 800ab80:	580b      	ldrlt	r3, [r1, r0]
 800ab82:	18c0      	addlt	r0, r0, r3
 800ab84:	4770      	bx	lr

0800ab86 <__sfputc_r>:
 800ab86:	6893      	ldr	r3, [r2, #8]
 800ab88:	b410      	push	{r4}
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	6093      	str	r3, [r2, #8]
 800ab90:	da07      	bge.n	800aba2 <__sfputc_r+0x1c>
 800ab92:	6994      	ldr	r4, [r2, #24]
 800ab94:	42a3      	cmp	r3, r4
 800ab96:	db01      	blt.n	800ab9c <__sfputc_r+0x16>
 800ab98:	290a      	cmp	r1, #10
 800ab9a:	d102      	bne.n	800aba2 <__sfputc_r+0x1c>
 800ab9c:	bc10      	pop	{r4}
 800ab9e:	f000 b931 	b.w	800ae04 <__swbuf_r>
 800aba2:	6813      	ldr	r3, [r2, #0]
 800aba4:	1c58      	adds	r0, r3, #1
 800aba6:	6010      	str	r0, [r2, #0]
 800aba8:	7019      	strb	r1, [r3, #0]
 800abaa:	4608      	mov	r0, r1
 800abac:	bc10      	pop	{r4}
 800abae:	4770      	bx	lr

0800abb0 <__sfputs_r>:
 800abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb2:	4606      	mov	r6, r0
 800abb4:	460f      	mov	r7, r1
 800abb6:	4614      	mov	r4, r2
 800abb8:	18d5      	adds	r5, r2, r3
 800abba:	42ac      	cmp	r4, r5
 800abbc:	d101      	bne.n	800abc2 <__sfputs_r+0x12>
 800abbe:	2000      	movs	r0, #0
 800abc0:	e007      	b.n	800abd2 <__sfputs_r+0x22>
 800abc2:	463a      	mov	r2, r7
 800abc4:	4630      	mov	r0, r6
 800abc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abca:	f7ff ffdc 	bl	800ab86 <__sfputc_r>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	d1f3      	bne.n	800abba <__sfputs_r+0xa>
 800abd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abd4 <_vfiprintf_r>:
 800abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd8:	460d      	mov	r5, r1
 800abda:	4614      	mov	r4, r2
 800abdc:	4698      	mov	r8, r3
 800abde:	4606      	mov	r6, r0
 800abe0:	b09d      	sub	sp, #116	@ 0x74
 800abe2:	b118      	cbz	r0, 800abec <_vfiprintf_r+0x18>
 800abe4:	6a03      	ldr	r3, [r0, #32]
 800abe6:	b90b      	cbnz	r3, 800abec <_vfiprintf_r+0x18>
 800abe8:	f7fe f8f4 	bl	8008dd4 <__sinit>
 800abec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abee:	07d9      	lsls	r1, r3, #31
 800abf0:	d405      	bmi.n	800abfe <_vfiprintf_r+0x2a>
 800abf2:	89ab      	ldrh	r3, [r5, #12]
 800abf4:	059a      	lsls	r2, r3, #22
 800abf6:	d402      	bmi.n	800abfe <_vfiprintf_r+0x2a>
 800abf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abfa:	f7fe fa04 	bl	8009006 <__retarget_lock_acquire_recursive>
 800abfe:	89ab      	ldrh	r3, [r5, #12]
 800ac00:	071b      	lsls	r3, r3, #28
 800ac02:	d501      	bpl.n	800ac08 <_vfiprintf_r+0x34>
 800ac04:	692b      	ldr	r3, [r5, #16]
 800ac06:	b99b      	cbnz	r3, 800ac30 <_vfiprintf_r+0x5c>
 800ac08:	4629      	mov	r1, r5
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f000 f938 	bl	800ae80 <__swsetup_r>
 800ac10:	b170      	cbz	r0, 800ac30 <_vfiprintf_r+0x5c>
 800ac12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac14:	07dc      	lsls	r4, r3, #31
 800ac16:	d504      	bpl.n	800ac22 <_vfiprintf_r+0x4e>
 800ac18:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1c:	b01d      	add	sp, #116	@ 0x74
 800ac1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac22:	89ab      	ldrh	r3, [r5, #12]
 800ac24:	0598      	lsls	r0, r3, #22
 800ac26:	d4f7      	bmi.n	800ac18 <_vfiprintf_r+0x44>
 800ac28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac2a:	f7fe f9ed 	bl	8009008 <__retarget_lock_release_recursive>
 800ac2e:	e7f3      	b.n	800ac18 <_vfiprintf_r+0x44>
 800ac30:	2300      	movs	r3, #0
 800ac32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac34:	2320      	movs	r3, #32
 800ac36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac3a:	2330      	movs	r3, #48	@ 0x30
 800ac3c:	f04f 0901 	mov.w	r9, #1
 800ac40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac44:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800adf0 <_vfiprintf_r+0x21c>
 800ac48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac4c:	4623      	mov	r3, r4
 800ac4e:	469a      	mov	sl, r3
 800ac50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac54:	b10a      	cbz	r2, 800ac5a <_vfiprintf_r+0x86>
 800ac56:	2a25      	cmp	r2, #37	@ 0x25
 800ac58:	d1f9      	bne.n	800ac4e <_vfiprintf_r+0x7a>
 800ac5a:	ebba 0b04 	subs.w	fp, sl, r4
 800ac5e:	d00b      	beq.n	800ac78 <_vfiprintf_r+0xa4>
 800ac60:	465b      	mov	r3, fp
 800ac62:	4622      	mov	r2, r4
 800ac64:	4629      	mov	r1, r5
 800ac66:	4630      	mov	r0, r6
 800ac68:	f7ff ffa2 	bl	800abb0 <__sfputs_r>
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	f000 80a7 	beq.w	800adc0 <_vfiprintf_r+0x1ec>
 800ac72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac74:	445a      	add	r2, fp
 800ac76:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac78:	f89a 3000 	ldrb.w	r3, [sl]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 809f 	beq.w	800adc0 <_vfiprintf_r+0x1ec>
 800ac82:	2300      	movs	r3, #0
 800ac84:	f04f 32ff 	mov.w	r2, #4294967295
 800ac88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac8c:	f10a 0a01 	add.w	sl, sl, #1
 800ac90:	9304      	str	r3, [sp, #16]
 800ac92:	9307      	str	r3, [sp, #28]
 800ac94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac98:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac9a:	4654      	mov	r4, sl
 800ac9c:	2205      	movs	r2, #5
 800ac9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca2:	4853      	ldr	r0, [pc, #332]	@ (800adf0 <_vfiprintf_r+0x21c>)
 800aca4:	f7fe f9b1 	bl	800900a <memchr>
 800aca8:	9a04      	ldr	r2, [sp, #16]
 800acaa:	b9d8      	cbnz	r0, 800ace4 <_vfiprintf_r+0x110>
 800acac:	06d1      	lsls	r1, r2, #27
 800acae:	bf44      	itt	mi
 800acb0:	2320      	movmi	r3, #32
 800acb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acb6:	0713      	lsls	r3, r2, #28
 800acb8:	bf44      	itt	mi
 800acba:	232b      	movmi	r3, #43	@ 0x2b
 800acbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acc0:	f89a 3000 	ldrb.w	r3, [sl]
 800acc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800acc6:	d015      	beq.n	800acf4 <_vfiprintf_r+0x120>
 800acc8:	4654      	mov	r4, sl
 800acca:	2000      	movs	r0, #0
 800accc:	f04f 0c0a 	mov.w	ip, #10
 800acd0:	9a07      	ldr	r2, [sp, #28]
 800acd2:	4621      	mov	r1, r4
 800acd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acd8:	3b30      	subs	r3, #48	@ 0x30
 800acda:	2b09      	cmp	r3, #9
 800acdc:	d94b      	bls.n	800ad76 <_vfiprintf_r+0x1a2>
 800acde:	b1b0      	cbz	r0, 800ad0e <_vfiprintf_r+0x13a>
 800ace0:	9207      	str	r2, [sp, #28]
 800ace2:	e014      	b.n	800ad0e <_vfiprintf_r+0x13a>
 800ace4:	eba0 0308 	sub.w	r3, r0, r8
 800ace8:	fa09 f303 	lsl.w	r3, r9, r3
 800acec:	4313      	orrs	r3, r2
 800acee:	46a2      	mov	sl, r4
 800acf0:	9304      	str	r3, [sp, #16]
 800acf2:	e7d2      	b.n	800ac9a <_vfiprintf_r+0xc6>
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	1d19      	adds	r1, r3, #4
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	9103      	str	r1, [sp, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	bfbb      	ittet	lt
 800ad00:	425b      	neglt	r3, r3
 800ad02:	f042 0202 	orrlt.w	r2, r2, #2
 800ad06:	9307      	strge	r3, [sp, #28]
 800ad08:	9307      	strlt	r3, [sp, #28]
 800ad0a:	bfb8      	it	lt
 800ad0c:	9204      	strlt	r2, [sp, #16]
 800ad0e:	7823      	ldrb	r3, [r4, #0]
 800ad10:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad12:	d10a      	bne.n	800ad2a <_vfiprintf_r+0x156>
 800ad14:	7863      	ldrb	r3, [r4, #1]
 800ad16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad18:	d132      	bne.n	800ad80 <_vfiprintf_r+0x1ac>
 800ad1a:	9b03      	ldr	r3, [sp, #12]
 800ad1c:	3402      	adds	r4, #2
 800ad1e:	1d1a      	adds	r2, r3, #4
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	9203      	str	r2, [sp, #12]
 800ad24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad28:	9305      	str	r3, [sp, #20]
 800ad2a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800adf4 <_vfiprintf_r+0x220>
 800ad2e:	2203      	movs	r2, #3
 800ad30:	4650      	mov	r0, sl
 800ad32:	7821      	ldrb	r1, [r4, #0]
 800ad34:	f7fe f969 	bl	800900a <memchr>
 800ad38:	b138      	cbz	r0, 800ad4a <_vfiprintf_r+0x176>
 800ad3a:	2240      	movs	r2, #64	@ 0x40
 800ad3c:	9b04      	ldr	r3, [sp, #16]
 800ad3e:	eba0 000a 	sub.w	r0, r0, sl
 800ad42:	4082      	lsls	r2, r0
 800ad44:	4313      	orrs	r3, r2
 800ad46:	3401      	adds	r4, #1
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4e:	2206      	movs	r2, #6
 800ad50:	4829      	ldr	r0, [pc, #164]	@ (800adf8 <_vfiprintf_r+0x224>)
 800ad52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad56:	f7fe f958 	bl	800900a <memchr>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d03f      	beq.n	800adde <_vfiprintf_r+0x20a>
 800ad5e:	4b27      	ldr	r3, [pc, #156]	@ (800adfc <_vfiprintf_r+0x228>)
 800ad60:	bb1b      	cbnz	r3, 800adaa <_vfiprintf_r+0x1d6>
 800ad62:	9b03      	ldr	r3, [sp, #12]
 800ad64:	3307      	adds	r3, #7
 800ad66:	f023 0307 	bic.w	r3, r3, #7
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	9303      	str	r3, [sp, #12]
 800ad6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad70:	443b      	add	r3, r7
 800ad72:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad74:	e76a      	b.n	800ac4c <_vfiprintf_r+0x78>
 800ad76:	460c      	mov	r4, r1
 800ad78:	2001      	movs	r0, #1
 800ad7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad7e:	e7a8      	b.n	800acd2 <_vfiprintf_r+0xfe>
 800ad80:	2300      	movs	r3, #0
 800ad82:	f04f 0c0a 	mov.w	ip, #10
 800ad86:	4619      	mov	r1, r3
 800ad88:	3401      	adds	r4, #1
 800ad8a:	9305      	str	r3, [sp, #20]
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad92:	3a30      	subs	r2, #48	@ 0x30
 800ad94:	2a09      	cmp	r2, #9
 800ad96:	d903      	bls.n	800ada0 <_vfiprintf_r+0x1cc>
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d0c6      	beq.n	800ad2a <_vfiprintf_r+0x156>
 800ad9c:	9105      	str	r1, [sp, #20]
 800ad9e:	e7c4      	b.n	800ad2a <_vfiprintf_r+0x156>
 800ada0:	4604      	mov	r4, r0
 800ada2:	2301      	movs	r3, #1
 800ada4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ada8:	e7f0      	b.n	800ad8c <_vfiprintf_r+0x1b8>
 800adaa:	ab03      	add	r3, sp, #12
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	462a      	mov	r2, r5
 800adb0:	4630      	mov	r0, r6
 800adb2:	4b13      	ldr	r3, [pc, #76]	@ (800ae00 <_vfiprintf_r+0x22c>)
 800adb4:	a904      	add	r1, sp, #16
 800adb6:	f7fd fbc5 	bl	8008544 <_printf_float>
 800adba:	4607      	mov	r7, r0
 800adbc:	1c78      	adds	r0, r7, #1
 800adbe:	d1d6      	bne.n	800ad6e <_vfiprintf_r+0x19a>
 800adc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adc2:	07d9      	lsls	r1, r3, #31
 800adc4:	d405      	bmi.n	800add2 <_vfiprintf_r+0x1fe>
 800adc6:	89ab      	ldrh	r3, [r5, #12]
 800adc8:	059a      	lsls	r2, r3, #22
 800adca:	d402      	bmi.n	800add2 <_vfiprintf_r+0x1fe>
 800adcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adce:	f7fe f91b 	bl	8009008 <__retarget_lock_release_recursive>
 800add2:	89ab      	ldrh	r3, [r5, #12]
 800add4:	065b      	lsls	r3, r3, #25
 800add6:	f53f af1f 	bmi.w	800ac18 <_vfiprintf_r+0x44>
 800adda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800addc:	e71e      	b.n	800ac1c <_vfiprintf_r+0x48>
 800adde:	ab03      	add	r3, sp, #12
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	462a      	mov	r2, r5
 800ade4:	4630      	mov	r0, r6
 800ade6:	4b06      	ldr	r3, [pc, #24]	@ (800ae00 <_vfiprintf_r+0x22c>)
 800ade8:	a904      	add	r1, sp, #16
 800adea:	f7fd fe49 	bl	8008a80 <_printf_i>
 800adee:	e7e4      	b.n	800adba <_vfiprintf_r+0x1e6>
 800adf0:	0800c064 	.word	0x0800c064
 800adf4:	0800c06a 	.word	0x0800c06a
 800adf8:	0800c06e 	.word	0x0800c06e
 800adfc:	08008545 	.word	0x08008545
 800ae00:	0800abb1 	.word	0x0800abb1

0800ae04 <__swbuf_r>:
 800ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae06:	460e      	mov	r6, r1
 800ae08:	4614      	mov	r4, r2
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	b118      	cbz	r0, 800ae16 <__swbuf_r+0x12>
 800ae0e:	6a03      	ldr	r3, [r0, #32]
 800ae10:	b90b      	cbnz	r3, 800ae16 <__swbuf_r+0x12>
 800ae12:	f7fd ffdf 	bl	8008dd4 <__sinit>
 800ae16:	69a3      	ldr	r3, [r4, #24]
 800ae18:	60a3      	str	r3, [r4, #8]
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	071a      	lsls	r2, r3, #28
 800ae1e:	d501      	bpl.n	800ae24 <__swbuf_r+0x20>
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	b943      	cbnz	r3, 800ae36 <__swbuf_r+0x32>
 800ae24:	4621      	mov	r1, r4
 800ae26:	4628      	mov	r0, r5
 800ae28:	f000 f82a 	bl	800ae80 <__swsetup_r>
 800ae2c:	b118      	cbz	r0, 800ae36 <__swbuf_r+0x32>
 800ae2e:	f04f 37ff 	mov.w	r7, #4294967295
 800ae32:	4638      	mov	r0, r7
 800ae34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	6922      	ldr	r2, [r4, #16]
 800ae3a:	b2f6      	uxtb	r6, r6
 800ae3c:	1a98      	subs	r0, r3, r2
 800ae3e:	6963      	ldr	r3, [r4, #20]
 800ae40:	4637      	mov	r7, r6
 800ae42:	4283      	cmp	r3, r0
 800ae44:	dc05      	bgt.n	800ae52 <__swbuf_r+0x4e>
 800ae46:	4621      	mov	r1, r4
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f7ff fda9 	bl	800a9a0 <_fflush_r>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d1ed      	bne.n	800ae2e <__swbuf_r+0x2a>
 800ae52:	68a3      	ldr	r3, [r4, #8]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	60a3      	str	r3, [r4, #8]
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	6022      	str	r2, [r4, #0]
 800ae5e:	701e      	strb	r6, [r3, #0]
 800ae60:	6962      	ldr	r2, [r4, #20]
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d004      	beq.n	800ae72 <__swbuf_r+0x6e>
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	07db      	lsls	r3, r3, #31
 800ae6c:	d5e1      	bpl.n	800ae32 <__swbuf_r+0x2e>
 800ae6e:	2e0a      	cmp	r6, #10
 800ae70:	d1df      	bne.n	800ae32 <__swbuf_r+0x2e>
 800ae72:	4621      	mov	r1, r4
 800ae74:	4628      	mov	r0, r5
 800ae76:	f7ff fd93 	bl	800a9a0 <_fflush_r>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d0d9      	beq.n	800ae32 <__swbuf_r+0x2e>
 800ae7e:	e7d6      	b.n	800ae2e <__swbuf_r+0x2a>

0800ae80 <__swsetup_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4b29      	ldr	r3, [pc, #164]	@ (800af28 <__swsetup_r+0xa8>)
 800ae84:	4605      	mov	r5, r0
 800ae86:	6818      	ldr	r0, [r3, #0]
 800ae88:	460c      	mov	r4, r1
 800ae8a:	b118      	cbz	r0, 800ae94 <__swsetup_r+0x14>
 800ae8c:	6a03      	ldr	r3, [r0, #32]
 800ae8e:	b90b      	cbnz	r3, 800ae94 <__swsetup_r+0x14>
 800ae90:	f7fd ffa0 	bl	8008dd4 <__sinit>
 800ae94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae98:	0719      	lsls	r1, r3, #28
 800ae9a:	d422      	bmi.n	800aee2 <__swsetup_r+0x62>
 800ae9c:	06da      	lsls	r2, r3, #27
 800ae9e:	d407      	bmi.n	800aeb0 <__swsetup_r+0x30>
 800aea0:	2209      	movs	r2, #9
 800aea2:	602a      	str	r2, [r5, #0]
 800aea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	e033      	b.n	800af18 <__swsetup_r+0x98>
 800aeb0:	0758      	lsls	r0, r3, #29
 800aeb2:	d512      	bpl.n	800aeda <__swsetup_r+0x5a>
 800aeb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeb6:	b141      	cbz	r1, 800aeca <__swsetup_r+0x4a>
 800aeb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aebc:	4299      	cmp	r1, r3
 800aebe:	d002      	beq.n	800aec6 <__swsetup_r+0x46>
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7fe ff1d 	bl	8009d00 <_free_r>
 800aec6:	2300      	movs	r3, #0
 800aec8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aed0:	81a3      	strh	r3, [r4, #12]
 800aed2:	2300      	movs	r3, #0
 800aed4:	6063      	str	r3, [r4, #4]
 800aed6:	6923      	ldr	r3, [r4, #16]
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	f043 0308 	orr.w	r3, r3, #8
 800aee0:	81a3      	strh	r3, [r4, #12]
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	b94b      	cbnz	r3, 800aefa <__swsetup_r+0x7a>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aeec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aef0:	d003      	beq.n	800aefa <__swsetup_r+0x7a>
 800aef2:	4621      	mov	r1, r4
 800aef4:	4628      	mov	r0, r5
 800aef6:	f000 f882 	bl	800affe <__smakebuf_r>
 800aefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefe:	f013 0201 	ands.w	r2, r3, #1
 800af02:	d00a      	beq.n	800af1a <__swsetup_r+0x9a>
 800af04:	2200      	movs	r2, #0
 800af06:	60a2      	str	r2, [r4, #8]
 800af08:	6962      	ldr	r2, [r4, #20]
 800af0a:	4252      	negs	r2, r2
 800af0c:	61a2      	str	r2, [r4, #24]
 800af0e:	6922      	ldr	r2, [r4, #16]
 800af10:	b942      	cbnz	r2, 800af24 <__swsetup_r+0xa4>
 800af12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af16:	d1c5      	bne.n	800aea4 <__swsetup_r+0x24>
 800af18:	bd38      	pop	{r3, r4, r5, pc}
 800af1a:	0799      	lsls	r1, r3, #30
 800af1c:	bf58      	it	pl
 800af1e:	6962      	ldrpl	r2, [r4, #20]
 800af20:	60a2      	str	r2, [r4, #8]
 800af22:	e7f4      	b.n	800af0e <__swsetup_r+0x8e>
 800af24:	2000      	movs	r0, #0
 800af26:	e7f7      	b.n	800af18 <__swsetup_r+0x98>
 800af28:	20000090 	.word	0x20000090

0800af2c <_raise_r>:
 800af2c:	291f      	cmp	r1, #31
 800af2e:	b538      	push	{r3, r4, r5, lr}
 800af30:	4605      	mov	r5, r0
 800af32:	460c      	mov	r4, r1
 800af34:	d904      	bls.n	800af40 <_raise_r+0x14>
 800af36:	2316      	movs	r3, #22
 800af38:	6003      	str	r3, [r0, #0]
 800af3a:	f04f 30ff 	mov.w	r0, #4294967295
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af42:	b112      	cbz	r2, 800af4a <_raise_r+0x1e>
 800af44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af48:	b94b      	cbnz	r3, 800af5e <_raise_r+0x32>
 800af4a:	4628      	mov	r0, r5
 800af4c:	f000 f830 	bl	800afb0 <_getpid_r>
 800af50:	4622      	mov	r2, r4
 800af52:	4601      	mov	r1, r0
 800af54:	4628      	mov	r0, r5
 800af56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af5a:	f000 b817 	b.w	800af8c <_kill_r>
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d00a      	beq.n	800af78 <_raise_r+0x4c>
 800af62:	1c59      	adds	r1, r3, #1
 800af64:	d103      	bne.n	800af6e <_raise_r+0x42>
 800af66:	2316      	movs	r3, #22
 800af68:	6003      	str	r3, [r0, #0]
 800af6a:	2001      	movs	r0, #1
 800af6c:	e7e7      	b.n	800af3e <_raise_r+0x12>
 800af6e:	2100      	movs	r1, #0
 800af70:	4620      	mov	r0, r4
 800af72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af76:	4798      	blx	r3
 800af78:	2000      	movs	r0, #0
 800af7a:	e7e0      	b.n	800af3e <_raise_r+0x12>

0800af7c <raise>:
 800af7c:	4b02      	ldr	r3, [pc, #8]	@ (800af88 <raise+0xc>)
 800af7e:	4601      	mov	r1, r0
 800af80:	6818      	ldr	r0, [r3, #0]
 800af82:	f7ff bfd3 	b.w	800af2c <_raise_r>
 800af86:	bf00      	nop
 800af88:	20000090 	.word	0x20000090

0800af8c <_kill_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	2300      	movs	r3, #0
 800af90:	4d06      	ldr	r5, [pc, #24]	@ (800afac <_kill_r+0x20>)
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	4611      	mov	r1, r2
 800af98:	602b      	str	r3, [r5, #0]
 800af9a:	f7f7 fdb0 	bl	8002afe <_kill>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	d102      	bne.n	800afa8 <_kill_r+0x1c>
 800afa2:	682b      	ldr	r3, [r5, #0]
 800afa4:	b103      	cbz	r3, 800afa8 <_kill_r+0x1c>
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	bd38      	pop	{r3, r4, r5, pc}
 800afaa:	bf00      	nop
 800afac:	20000d8c 	.word	0x20000d8c

0800afb0 <_getpid_r>:
 800afb0:	f7f7 bd9e 	b.w	8002af0 <_getpid>

0800afb4 <__swhatbuf_r>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	460c      	mov	r4, r1
 800afb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afbc:	4615      	mov	r5, r2
 800afbe:	2900      	cmp	r1, #0
 800afc0:	461e      	mov	r6, r3
 800afc2:	b096      	sub	sp, #88	@ 0x58
 800afc4:	da0c      	bge.n	800afe0 <__swhatbuf_r+0x2c>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	2100      	movs	r1, #0
 800afca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afce:	bf14      	ite	ne
 800afd0:	2340      	movne	r3, #64	@ 0x40
 800afd2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800afd6:	2000      	movs	r0, #0
 800afd8:	6031      	str	r1, [r6, #0]
 800afda:	602b      	str	r3, [r5, #0]
 800afdc:	b016      	add	sp, #88	@ 0x58
 800afde:	bd70      	pop	{r4, r5, r6, pc}
 800afe0:	466a      	mov	r2, sp
 800afe2:	f000 f849 	bl	800b078 <_fstat_r>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	dbed      	blt.n	800afc6 <__swhatbuf_r+0x12>
 800afea:	9901      	ldr	r1, [sp, #4]
 800afec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aff0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aff4:	4259      	negs	r1, r3
 800aff6:	4159      	adcs	r1, r3
 800aff8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800affc:	e7eb      	b.n	800afd6 <__swhatbuf_r+0x22>

0800affe <__smakebuf_r>:
 800affe:	898b      	ldrh	r3, [r1, #12]
 800b000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b002:	079d      	lsls	r5, r3, #30
 800b004:	4606      	mov	r6, r0
 800b006:	460c      	mov	r4, r1
 800b008:	d507      	bpl.n	800b01a <__smakebuf_r+0x1c>
 800b00a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b00e:	6023      	str	r3, [r4, #0]
 800b010:	6123      	str	r3, [r4, #16]
 800b012:	2301      	movs	r3, #1
 800b014:	6163      	str	r3, [r4, #20]
 800b016:	b003      	add	sp, #12
 800b018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b01a:	466a      	mov	r2, sp
 800b01c:	ab01      	add	r3, sp, #4
 800b01e:	f7ff ffc9 	bl	800afb4 <__swhatbuf_r>
 800b022:	9f00      	ldr	r7, [sp, #0]
 800b024:	4605      	mov	r5, r0
 800b026:	4639      	mov	r1, r7
 800b028:	4630      	mov	r0, r6
 800b02a:	f7fe fedb 	bl	8009de4 <_malloc_r>
 800b02e:	b948      	cbnz	r0, 800b044 <__smakebuf_r+0x46>
 800b030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b034:	059a      	lsls	r2, r3, #22
 800b036:	d4ee      	bmi.n	800b016 <__smakebuf_r+0x18>
 800b038:	f023 0303 	bic.w	r3, r3, #3
 800b03c:	f043 0302 	orr.w	r3, r3, #2
 800b040:	81a3      	strh	r3, [r4, #12]
 800b042:	e7e2      	b.n	800b00a <__smakebuf_r+0xc>
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b04e:	81a3      	strh	r3, [r4, #12]
 800b050:	9b01      	ldr	r3, [sp, #4]
 800b052:	6020      	str	r0, [r4, #0]
 800b054:	b15b      	cbz	r3, 800b06e <__smakebuf_r+0x70>
 800b056:	4630      	mov	r0, r6
 800b058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b05c:	f000 f81e 	bl	800b09c <_isatty_r>
 800b060:	b128      	cbz	r0, 800b06e <__smakebuf_r+0x70>
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	f023 0303 	bic.w	r3, r3, #3
 800b068:	f043 0301 	orr.w	r3, r3, #1
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	89a3      	ldrh	r3, [r4, #12]
 800b070:	431d      	orrs	r5, r3
 800b072:	81a5      	strh	r5, [r4, #12]
 800b074:	e7cf      	b.n	800b016 <__smakebuf_r+0x18>
	...

0800b078 <_fstat_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	2300      	movs	r3, #0
 800b07c:	4d06      	ldr	r5, [pc, #24]	@ (800b098 <_fstat_r+0x20>)
 800b07e:	4604      	mov	r4, r0
 800b080:	4608      	mov	r0, r1
 800b082:	4611      	mov	r1, r2
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	f7f7 fd7d 	bl	8002b84 <_fstat>
 800b08a:	1c43      	adds	r3, r0, #1
 800b08c:	d102      	bne.n	800b094 <_fstat_r+0x1c>
 800b08e:	682b      	ldr	r3, [r5, #0]
 800b090:	b103      	cbz	r3, 800b094 <_fstat_r+0x1c>
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	bd38      	pop	{r3, r4, r5, pc}
 800b096:	bf00      	nop
 800b098:	20000d8c 	.word	0x20000d8c

0800b09c <_isatty_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	2300      	movs	r3, #0
 800b0a0:	4d05      	ldr	r5, [pc, #20]	@ (800b0b8 <_isatty_r+0x1c>)
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	602b      	str	r3, [r5, #0]
 800b0a8:	f7f7 fd7b 	bl	8002ba2 <_isatty>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d102      	bne.n	800b0b6 <_isatty_r+0x1a>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	b103      	cbz	r3, 800b0b6 <_isatty_r+0x1a>
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	20000d8c 	.word	0x20000d8c

0800b0bc <atan2>:
 800b0bc:	f000 b8f8 	b.w	800b2b0 <__ieee754_atan2>

0800b0c0 <sqrt>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	460f      	mov	r7, r1
 800b0c6:	f000 f81f 	bl	800b108 <__ieee754_sqrt>
 800b0ca:	4632      	mov	r2, r6
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	460d      	mov	r5, r1
 800b0d0:	463b      	mov	r3, r7
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	f7f5 fc99 	bl	8000a0c <__aeabi_dcmpun>
 800b0da:	b990      	cbnz	r0, 800b102 <sqrt+0x42>
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2300      	movs	r3, #0
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	4639      	mov	r1, r7
 800b0e4:	f7f5 fc6a 	bl	80009bc <__aeabi_dcmplt>
 800b0e8:	b158      	cbz	r0, 800b102 <sqrt+0x42>
 800b0ea:	f7fd ff61 	bl	8008fb0 <__errno>
 800b0ee:	2321      	movs	r3, #33	@ 0x21
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	6003      	str	r3, [r0, #0]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	f7f5 fb17 	bl	800072c <__aeabi_ddiv>
 800b0fe:	4604      	mov	r4, r0
 800b100:	460d      	mov	r5, r1
 800b102:	4620      	mov	r0, r4
 800b104:	4629      	mov	r1, r5
 800b106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b108 <__ieee754_sqrt>:
 800b108:	4a65      	ldr	r2, [pc, #404]	@ (800b2a0 <__ieee754_sqrt+0x198>)
 800b10a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10e:	438a      	bics	r2, r1
 800b110:	4606      	mov	r6, r0
 800b112:	460f      	mov	r7, r1
 800b114:	460b      	mov	r3, r1
 800b116:	4604      	mov	r4, r0
 800b118:	d10e      	bne.n	800b138 <__ieee754_sqrt+0x30>
 800b11a:	4602      	mov	r2, r0
 800b11c:	f7f5 f9dc 	bl	80004d8 <__aeabi_dmul>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4630      	mov	r0, r6
 800b126:	4639      	mov	r1, r7
 800b128:	f7f5 f820 	bl	800016c <__adddf3>
 800b12c:	4606      	mov	r6, r0
 800b12e:	460f      	mov	r7, r1
 800b130:	4630      	mov	r0, r6
 800b132:	4639      	mov	r1, r7
 800b134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b138:	2900      	cmp	r1, #0
 800b13a:	dc0c      	bgt.n	800b156 <__ieee754_sqrt+0x4e>
 800b13c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b140:	4302      	orrs	r2, r0
 800b142:	d0f5      	beq.n	800b130 <__ieee754_sqrt+0x28>
 800b144:	b189      	cbz	r1, 800b16a <__ieee754_sqrt+0x62>
 800b146:	4602      	mov	r2, r0
 800b148:	f7f5 f80e 	bl	8000168 <__aeabi_dsub>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	f7f5 faec 	bl	800072c <__aeabi_ddiv>
 800b154:	e7ea      	b.n	800b12c <__ieee754_sqrt+0x24>
 800b156:	150a      	asrs	r2, r1, #20
 800b158:	d115      	bne.n	800b186 <__ieee754_sqrt+0x7e>
 800b15a:	2100      	movs	r1, #0
 800b15c:	e009      	b.n	800b172 <__ieee754_sqrt+0x6a>
 800b15e:	0ae3      	lsrs	r3, r4, #11
 800b160:	3a15      	subs	r2, #21
 800b162:	0564      	lsls	r4, r4, #21
 800b164:	2b00      	cmp	r3, #0
 800b166:	d0fa      	beq.n	800b15e <__ieee754_sqrt+0x56>
 800b168:	e7f7      	b.n	800b15a <__ieee754_sqrt+0x52>
 800b16a:	460a      	mov	r2, r1
 800b16c:	e7fa      	b.n	800b164 <__ieee754_sqrt+0x5c>
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	3101      	adds	r1, #1
 800b172:	02d8      	lsls	r0, r3, #11
 800b174:	d5fb      	bpl.n	800b16e <__ieee754_sqrt+0x66>
 800b176:	1e48      	subs	r0, r1, #1
 800b178:	1a12      	subs	r2, r2, r0
 800b17a:	f1c1 0020 	rsb	r0, r1, #32
 800b17e:	fa24 f000 	lsr.w	r0, r4, r0
 800b182:	4303      	orrs	r3, r0
 800b184:	408c      	lsls	r4, r1
 800b186:	2700      	movs	r7, #0
 800b188:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800b18c:	2116      	movs	r1, #22
 800b18e:	07d2      	lsls	r2, r2, #31
 800b190:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b194:	463a      	mov	r2, r7
 800b196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b19a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b19e:	bf5c      	itt	pl
 800b1a0:	005b      	lslpl	r3, r3, #1
 800b1a2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b1a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1aa:	bf58      	it	pl
 800b1ac:	0064      	lslpl	r4, r4, #1
 800b1ae:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b1b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b1b6:	0064      	lsls	r4, r4, #1
 800b1b8:	1815      	adds	r5, r2, r0
 800b1ba:	429d      	cmp	r5, r3
 800b1bc:	bfde      	ittt	le
 800b1be:	182a      	addle	r2, r5, r0
 800b1c0:	1b5b      	suble	r3, r3, r5
 800b1c2:	183f      	addle	r7, r7, r0
 800b1c4:	0fe5      	lsrs	r5, r4, #31
 800b1c6:	3901      	subs	r1, #1
 800b1c8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b1cc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b1d0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b1d4:	d1f0      	bne.n	800b1b8 <__ieee754_sqrt+0xb0>
 800b1d6:	460d      	mov	r5, r1
 800b1d8:	2620      	movs	r6, #32
 800b1da:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	eb00 0c01 	add.w	ip, r0, r1
 800b1e4:	dc02      	bgt.n	800b1ec <__ieee754_sqrt+0xe4>
 800b1e6:	d113      	bne.n	800b210 <__ieee754_sqrt+0x108>
 800b1e8:	45a4      	cmp	ip, r4
 800b1ea:	d811      	bhi.n	800b210 <__ieee754_sqrt+0x108>
 800b1ec:	f1bc 0f00 	cmp.w	ip, #0
 800b1f0:	eb0c 0100 	add.w	r1, ip, r0
 800b1f4:	da3e      	bge.n	800b274 <__ieee754_sqrt+0x16c>
 800b1f6:	2900      	cmp	r1, #0
 800b1f8:	db3c      	blt.n	800b274 <__ieee754_sqrt+0x16c>
 800b1fa:	f102 0e01 	add.w	lr, r2, #1
 800b1fe:	1a9b      	subs	r3, r3, r2
 800b200:	4672      	mov	r2, lr
 800b202:	45a4      	cmp	ip, r4
 800b204:	bf88      	it	hi
 800b206:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b20a:	eba4 040c 	sub.w	r4, r4, ip
 800b20e:	4405      	add	r5, r0
 800b210:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b214:	3e01      	subs	r6, #1
 800b216:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b21a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b21e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b222:	d1dc      	bne.n	800b1de <__ieee754_sqrt+0xd6>
 800b224:	431c      	orrs	r4, r3
 800b226:	d01a      	beq.n	800b25e <__ieee754_sqrt+0x156>
 800b228:	4c1e      	ldr	r4, [pc, #120]	@ (800b2a4 <__ieee754_sqrt+0x19c>)
 800b22a:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800b2a8 <__ieee754_sqrt+0x1a0>
 800b22e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b232:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b236:	f7f4 ff97 	bl	8000168 <__aeabi_dsub>
 800b23a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	4650      	mov	r0, sl
 800b244:	4659      	mov	r1, fp
 800b246:	f7f5 fbc3 	bl	80009d0 <__aeabi_dcmple>
 800b24a:	b140      	cbz	r0, 800b25e <__ieee754_sqrt+0x156>
 800b24c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b250:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b254:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b258:	d10e      	bne.n	800b278 <__ieee754_sqrt+0x170>
 800b25a:	4635      	mov	r5, r6
 800b25c:	3701      	adds	r7, #1
 800b25e:	107b      	asrs	r3, r7, #1
 800b260:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800b264:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800b268:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800b26c:	086b      	lsrs	r3, r5, #1
 800b26e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800b272:	e75b      	b.n	800b12c <__ieee754_sqrt+0x24>
 800b274:	4696      	mov	lr, r2
 800b276:	e7c2      	b.n	800b1fe <__ieee754_sqrt+0xf6>
 800b278:	f7f4 ff78 	bl	800016c <__adddf3>
 800b27c:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4650      	mov	r0, sl
 800b286:	4659      	mov	r1, fp
 800b288:	f7f5 fb98 	bl	80009bc <__aeabi_dcmplt>
 800b28c:	b120      	cbz	r0, 800b298 <__ieee754_sqrt+0x190>
 800b28e:	1cab      	adds	r3, r5, #2
 800b290:	bf08      	it	eq
 800b292:	3701      	addeq	r7, #1
 800b294:	3502      	adds	r5, #2
 800b296:	e7e2      	b.n	800b25e <__ieee754_sqrt+0x156>
 800b298:	1c6b      	adds	r3, r5, #1
 800b29a:	f023 0501 	bic.w	r5, r3, #1
 800b29e:	e7de      	b.n	800b25e <__ieee754_sqrt+0x156>
 800b2a0:	7ff00000 	.word	0x7ff00000
 800b2a4:	0800c2c8 	.word	0x0800c2c8
 800b2a8:	0800c2c0 	.word	0x0800c2c0
 800b2ac:	00000000 	.word	0x00000000

0800b2b0 <__ieee754_atan2>:
 800b2b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	4617      	mov	r7, r2
 800b2b6:	4690      	mov	r8, r2
 800b2b8:	4699      	mov	r9, r3
 800b2ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b2be:	427b      	negs	r3, r7
 800b2c0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800b448 <__ieee754_atan2+0x198>
 800b2c4:	433b      	orrs	r3, r7
 800b2c6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b2ca:	4553      	cmp	r3, sl
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	460d      	mov	r5, r1
 800b2d0:	d809      	bhi.n	800b2e6 <__ieee754_atan2+0x36>
 800b2d2:	4246      	negs	r6, r0
 800b2d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b2d8:	4306      	orrs	r6, r0
 800b2da:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800b2de:	4556      	cmp	r6, sl
 800b2e0:	468e      	mov	lr, r1
 800b2e2:	4683      	mov	fp, r0
 800b2e4:	d908      	bls.n	800b2f8 <__ieee754_atan2+0x48>
 800b2e6:	4642      	mov	r2, r8
 800b2e8:	464b      	mov	r3, r9
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	f7f4 ff3d 	bl	800016c <__adddf3>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	460d      	mov	r5, r1
 800b2f6:	e016      	b.n	800b326 <__ieee754_atan2+0x76>
 800b2f8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800b2fc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b300:	433e      	orrs	r6, r7
 800b302:	d103      	bne.n	800b30c <__ieee754_atan2+0x5c>
 800b304:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	f000 b8a6 	b.w	800b458 <atan>
 800b30c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800b310:	f006 0602 	and.w	r6, r6, #2
 800b314:	ea53 0b0b 	orrs.w	fp, r3, fp
 800b318:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b31c:	d107      	bne.n	800b32e <__ieee754_atan2+0x7e>
 800b31e:	2e02      	cmp	r6, #2
 800b320:	d064      	beq.n	800b3ec <__ieee754_atan2+0x13c>
 800b322:	2e03      	cmp	r6, #3
 800b324:	d066      	beq.n	800b3f4 <__ieee754_atan2+0x144>
 800b326:	4620      	mov	r0, r4
 800b328:	4629      	mov	r1, r5
 800b32a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32e:	4317      	orrs	r7, r2
 800b330:	d106      	bne.n	800b340 <__ieee754_atan2+0x90>
 800b332:	f1be 0f00 	cmp.w	lr, #0
 800b336:	db68      	blt.n	800b40a <__ieee754_atan2+0x15a>
 800b338:	a537      	add	r5, pc, #220	@ (adr r5, 800b418 <__ieee754_atan2+0x168>)
 800b33a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b33e:	e7f2      	b.n	800b326 <__ieee754_atan2+0x76>
 800b340:	4552      	cmp	r2, sl
 800b342:	d10f      	bne.n	800b364 <__ieee754_atan2+0xb4>
 800b344:	4293      	cmp	r3, r2
 800b346:	f106 36ff 	add.w	r6, r6, #4294967295
 800b34a:	d107      	bne.n	800b35c <__ieee754_atan2+0xac>
 800b34c:	2e02      	cmp	r6, #2
 800b34e:	d855      	bhi.n	800b3fc <__ieee754_atan2+0x14c>
 800b350:	4b3e      	ldr	r3, [pc, #248]	@ (800b44c <__ieee754_atan2+0x19c>)
 800b352:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b356:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b35a:	e7e4      	b.n	800b326 <__ieee754_atan2+0x76>
 800b35c:	2e02      	cmp	r6, #2
 800b35e:	d851      	bhi.n	800b404 <__ieee754_atan2+0x154>
 800b360:	4b3b      	ldr	r3, [pc, #236]	@ (800b450 <__ieee754_atan2+0x1a0>)
 800b362:	e7f6      	b.n	800b352 <__ieee754_atan2+0xa2>
 800b364:	4553      	cmp	r3, sl
 800b366:	d0e4      	beq.n	800b332 <__ieee754_atan2+0x82>
 800b368:	1a9b      	subs	r3, r3, r2
 800b36a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b36e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b372:	da21      	bge.n	800b3b8 <__ieee754_atan2+0x108>
 800b374:	f1b9 0f00 	cmp.w	r9, #0
 800b378:	da01      	bge.n	800b37e <__ieee754_atan2+0xce>
 800b37a:	323c      	adds	r2, #60	@ 0x3c
 800b37c:	db20      	blt.n	800b3c0 <__ieee754_atan2+0x110>
 800b37e:	4642      	mov	r2, r8
 800b380:	464b      	mov	r3, r9
 800b382:	4620      	mov	r0, r4
 800b384:	4629      	mov	r1, r5
 800b386:	f7f5 f9d1 	bl	800072c <__aeabi_ddiv>
 800b38a:	f000 f9f5 	bl	800b778 <fabs>
 800b38e:	f000 f863 	bl	800b458 <atan>
 800b392:	4604      	mov	r4, r0
 800b394:	460d      	mov	r5, r1
 800b396:	2e01      	cmp	r6, #1
 800b398:	d015      	beq.n	800b3c6 <__ieee754_atan2+0x116>
 800b39a:	2e02      	cmp	r6, #2
 800b39c:	d017      	beq.n	800b3ce <__ieee754_atan2+0x11e>
 800b39e:	2e00      	cmp	r6, #0
 800b3a0:	d0c1      	beq.n	800b326 <__ieee754_atan2+0x76>
 800b3a2:	a31f      	add	r3, pc, #124	@ (adr r3, 800b420 <__ieee754_atan2+0x170>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7f4 fedc 	bl	8000168 <__aeabi_dsub>
 800b3b0:	a31d      	add	r3, pc, #116	@ (adr r3, 800b428 <__ieee754_atan2+0x178>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	e016      	b.n	800b3e6 <__ieee754_atan2+0x136>
 800b3b8:	a517      	add	r5, pc, #92	@ (adr r5, 800b418 <__ieee754_atan2+0x168>)
 800b3ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3be:	e7ea      	b.n	800b396 <__ieee754_atan2+0xe6>
 800b3c0:	2400      	movs	r4, #0
 800b3c2:	2500      	movs	r5, #0
 800b3c4:	e7e7      	b.n	800b396 <__ieee754_atan2+0xe6>
 800b3c6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800b3ca:	461d      	mov	r5, r3
 800b3cc:	e7ab      	b.n	800b326 <__ieee754_atan2+0x76>
 800b3ce:	a314      	add	r3, pc, #80	@ (adr r3, 800b420 <__ieee754_atan2+0x170>)
 800b3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	f7f4 fec6 	bl	8000168 <__aeabi_dsub>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	a111      	add	r1, pc, #68	@ (adr r1, 800b428 <__ieee754_atan2+0x178>)
 800b3e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3e6:	f7f4 febf 	bl	8000168 <__aeabi_dsub>
 800b3ea:	e782      	b.n	800b2f2 <__ieee754_atan2+0x42>
 800b3ec:	a50e      	add	r5, pc, #56	@ (adr r5, 800b428 <__ieee754_atan2+0x178>)
 800b3ee:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3f2:	e798      	b.n	800b326 <__ieee754_atan2+0x76>
 800b3f4:	a50e      	add	r5, pc, #56	@ (adr r5, 800b430 <__ieee754_atan2+0x180>)
 800b3f6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3fa:	e794      	b.n	800b326 <__ieee754_atan2+0x76>
 800b3fc:	a50e      	add	r5, pc, #56	@ (adr r5, 800b438 <__ieee754_atan2+0x188>)
 800b3fe:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b402:	e790      	b.n	800b326 <__ieee754_atan2+0x76>
 800b404:	2400      	movs	r4, #0
 800b406:	2500      	movs	r5, #0
 800b408:	e78d      	b.n	800b326 <__ieee754_atan2+0x76>
 800b40a:	a50d      	add	r5, pc, #52	@ (adr r5, 800b440 <__ieee754_atan2+0x190>)
 800b40c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b410:	e789      	b.n	800b326 <__ieee754_atan2+0x76>
 800b412:	bf00      	nop
 800b414:	f3af 8000 	nop.w
 800b418:	54442d18 	.word	0x54442d18
 800b41c:	3ff921fb 	.word	0x3ff921fb
 800b420:	33145c07 	.word	0x33145c07
 800b424:	3ca1a626 	.word	0x3ca1a626
 800b428:	54442d18 	.word	0x54442d18
 800b42c:	400921fb 	.word	0x400921fb
 800b430:	54442d18 	.word	0x54442d18
 800b434:	c00921fb 	.word	0xc00921fb
 800b438:	54442d18 	.word	0x54442d18
 800b43c:	3fe921fb 	.word	0x3fe921fb
 800b440:	54442d18 	.word	0x54442d18
 800b444:	bff921fb 	.word	0xbff921fb
 800b448:	7ff00000 	.word	0x7ff00000
 800b44c:	0800c2e8 	.word	0x0800c2e8
 800b450:	0800c2d0 	.word	0x0800c2d0
 800b454:	00000000 	.word	0x00000000

0800b458 <atan>:
 800b458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	4bbc      	ldr	r3, [pc, #752]	@ (800b750 <atan+0x2f8>)
 800b45e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800b462:	429e      	cmp	r6, r3
 800b464:	4604      	mov	r4, r0
 800b466:	460d      	mov	r5, r1
 800b468:	468b      	mov	fp, r1
 800b46a:	d918      	bls.n	800b49e <atan+0x46>
 800b46c:	4bb9      	ldr	r3, [pc, #740]	@ (800b754 <atan+0x2fc>)
 800b46e:	429e      	cmp	r6, r3
 800b470:	d801      	bhi.n	800b476 <atan+0x1e>
 800b472:	d109      	bne.n	800b488 <atan+0x30>
 800b474:	b140      	cbz	r0, 800b488 <atan+0x30>
 800b476:	4622      	mov	r2, r4
 800b478:	462b      	mov	r3, r5
 800b47a:	4620      	mov	r0, r4
 800b47c:	4629      	mov	r1, r5
 800b47e:	f7f4 fe75 	bl	800016c <__adddf3>
 800b482:	4604      	mov	r4, r0
 800b484:	460d      	mov	r5, r1
 800b486:	e006      	b.n	800b496 <atan+0x3e>
 800b488:	f1bb 0f00 	cmp.w	fp, #0
 800b48c:	f340 8123 	ble.w	800b6d6 <atan+0x27e>
 800b490:	a593      	add	r5, pc, #588	@ (adr r5, 800b6e0 <atan+0x288>)
 800b492:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b496:	4620      	mov	r0, r4
 800b498:	4629      	mov	r1, r5
 800b49a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49e:	4bae      	ldr	r3, [pc, #696]	@ (800b758 <atan+0x300>)
 800b4a0:	429e      	cmp	r6, r3
 800b4a2:	d811      	bhi.n	800b4c8 <atan+0x70>
 800b4a4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b4a8:	429e      	cmp	r6, r3
 800b4aa:	d80a      	bhi.n	800b4c2 <atan+0x6a>
 800b4ac:	a38e      	add	r3, pc, #568	@ (adr r3, 800b6e8 <atan+0x290>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	f7f4 fe5b 	bl	800016c <__adddf3>
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	4ba8      	ldr	r3, [pc, #672]	@ (800b75c <atan+0x304>)
 800b4ba:	f7f5 fa9d 	bl	80009f8 <__aeabi_dcmpgt>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d1e9      	bne.n	800b496 <atan+0x3e>
 800b4c2:	f04f 3aff 	mov.w	sl, #4294967295
 800b4c6:	e027      	b.n	800b518 <atan+0xc0>
 800b4c8:	f000 f956 	bl	800b778 <fabs>
 800b4cc:	4ba4      	ldr	r3, [pc, #656]	@ (800b760 <atan+0x308>)
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	429e      	cmp	r6, r3
 800b4d2:	460d      	mov	r5, r1
 800b4d4:	f200 80b8 	bhi.w	800b648 <atan+0x1f0>
 800b4d8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b4dc:	429e      	cmp	r6, r3
 800b4de:	f200 809c 	bhi.w	800b61a <atan+0x1c2>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	f7f4 fe41 	bl	800016c <__adddf3>
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	4b9b      	ldr	r3, [pc, #620]	@ (800b75c <atan+0x304>)
 800b4ee:	f7f4 fe3b 	bl	8000168 <__aeabi_dsub>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	460f      	mov	r7, r1
 800b4f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	4629      	mov	r1, r5
 800b500:	f7f4 fe34 	bl	800016c <__adddf3>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f5 f90e 	bl	800072c <__aeabi_ddiv>
 800b510:	f04f 0a00 	mov.w	sl, #0
 800b514:	4604      	mov	r4, r0
 800b516:	460d      	mov	r5, r1
 800b518:	4622      	mov	r2, r4
 800b51a:	462b      	mov	r3, r5
 800b51c:	4620      	mov	r0, r4
 800b51e:	4629      	mov	r1, r5
 800b520:	f7f4 ffda 	bl	80004d8 <__aeabi_dmul>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	4680      	mov	r8, r0
 800b52a:	4689      	mov	r9, r1
 800b52c:	f7f4 ffd4 	bl	80004d8 <__aeabi_dmul>
 800b530:	a36f      	add	r3, pc, #444	@ (adr r3, 800b6f0 <atan+0x298>)
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	4606      	mov	r6, r0
 800b538:	460f      	mov	r7, r1
 800b53a:	f7f4 ffcd 	bl	80004d8 <__aeabi_dmul>
 800b53e:	a36e      	add	r3, pc, #440	@ (adr r3, 800b6f8 <atan+0x2a0>)
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	f7f4 fe12 	bl	800016c <__adddf3>
 800b548:	4632      	mov	r2, r6
 800b54a:	463b      	mov	r3, r7
 800b54c:	f7f4 ffc4 	bl	80004d8 <__aeabi_dmul>
 800b550:	a36b      	add	r3, pc, #428	@ (adr r3, 800b700 <atan+0x2a8>)
 800b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b556:	f7f4 fe09 	bl	800016c <__adddf3>
 800b55a:	4632      	mov	r2, r6
 800b55c:	463b      	mov	r3, r7
 800b55e:	f7f4 ffbb 	bl	80004d8 <__aeabi_dmul>
 800b562:	a369      	add	r3, pc, #420	@ (adr r3, 800b708 <atan+0x2b0>)
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	f7f4 fe00 	bl	800016c <__adddf3>
 800b56c:	4632      	mov	r2, r6
 800b56e:	463b      	mov	r3, r7
 800b570:	f7f4 ffb2 	bl	80004d8 <__aeabi_dmul>
 800b574:	a366      	add	r3, pc, #408	@ (adr r3, 800b710 <atan+0x2b8>)
 800b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57a:	f7f4 fdf7 	bl	800016c <__adddf3>
 800b57e:	4632      	mov	r2, r6
 800b580:	463b      	mov	r3, r7
 800b582:	f7f4 ffa9 	bl	80004d8 <__aeabi_dmul>
 800b586:	a364      	add	r3, pc, #400	@ (adr r3, 800b718 <atan+0x2c0>)
 800b588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58c:	f7f4 fdee 	bl	800016c <__adddf3>
 800b590:	4642      	mov	r2, r8
 800b592:	464b      	mov	r3, r9
 800b594:	f7f4 ffa0 	bl	80004d8 <__aeabi_dmul>
 800b598:	a361      	add	r3, pc, #388	@ (adr r3, 800b720 <atan+0x2c8>)
 800b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59e:	4680      	mov	r8, r0
 800b5a0:	4689      	mov	r9, r1
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	f7f4 ff97 	bl	80004d8 <__aeabi_dmul>
 800b5aa:	a35f      	add	r3, pc, #380	@ (adr r3, 800b728 <atan+0x2d0>)
 800b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b0:	f7f4 fdda 	bl	8000168 <__aeabi_dsub>
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	463b      	mov	r3, r7
 800b5b8:	f7f4 ff8e 	bl	80004d8 <__aeabi_dmul>
 800b5bc:	a35c      	add	r3, pc, #368	@ (adr r3, 800b730 <atan+0x2d8>)
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f7f4 fdd1 	bl	8000168 <__aeabi_dsub>
 800b5c6:	4632      	mov	r2, r6
 800b5c8:	463b      	mov	r3, r7
 800b5ca:	f7f4 ff85 	bl	80004d8 <__aeabi_dmul>
 800b5ce:	a35a      	add	r3, pc, #360	@ (adr r3, 800b738 <atan+0x2e0>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f7f4 fdc8 	bl	8000168 <__aeabi_dsub>
 800b5d8:	4632      	mov	r2, r6
 800b5da:	463b      	mov	r3, r7
 800b5dc:	f7f4 ff7c 	bl	80004d8 <__aeabi_dmul>
 800b5e0:	a357      	add	r3, pc, #348	@ (adr r3, 800b740 <atan+0x2e8>)
 800b5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e6:	f7f4 fdbf 	bl	8000168 <__aeabi_dsub>
 800b5ea:	4632      	mov	r2, r6
 800b5ec:	463b      	mov	r3, r7
 800b5ee:	f7f4 ff73 	bl	80004d8 <__aeabi_dmul>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	f7f4 fdb7 	bl	800016c <__adddf3>
 800b5fe:	4622      	mov	r2, r4
 800b600:	462b      	mov	r3, r5
 800b602:	f7f4 ff69 	bl	80004d8 <__aeabi_dmul>
 800b606:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	d144      	bne.n	800b69a <atan+0x242>
 800b610:	4620      	mov	r0, r4
 800b612:	4629      	mov	r1, r5
 800b614:	f7f4 fda8 	bl	8000168 <__aeabi_dsub>
 800b618:	e733      	b.n	800b482 <atan+0x2a>
 800b61a:	2200      	movs	r2, #0
 800b61c:	4b4f      	ldr	r3, [pc, #316]	@ (800b75c <atan+0x304>)
 800b61e:	f7f4 fda3 	bl	8000168 <__aeabi_dsub>
 800b622:	2200      	movs	r2, #0
 800b624:	4606      	mov	r6, r0
 800b626:	460f      	mov	r7, r1
 800b628:	4620      	mov	r0, r4
 800b62a:	4629      	mov	r1, r5
 800b62c:	4b4b      	ldr	r3, [pc, #300]	@ (800b75c <atan+0x304>)
 800b62e:	f7f4 fd9d 	bl	800016c <__adddf3>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4630      	mov	r0, r6
 800b638:	4639      	mov	r1, r7
 800b63a:	f7f5 f877 	bl	800072c <__aeabi_ddiv>
 800b63e:	f04f 0a01 	mov.w	sl, #1
 800b642:	4604      	mov	r4, r0
 800b644:	460d      	mov	r5, r1
 800b646:	e767      	b.n	800b518 <atan+0xc0>
 800b648:	4b46      	ldr	r3, [pc, #280]	@ (800b764 <atan+0x30c>)
 800b64a:	429e      	cmp	r6, r3
 800b64c:	d21a      	bcs.n	800b684 <atan+0x22c>
 800b64e:	2200      	movs	r2, #0
 800b650:	4b45      	ldr	r3, [pc, #276]	@ (800b768 <atan+0x310>)
 800b652:	f7f4 fd89 	bl	8000168 <__aeabi_dsub>
 800b656:	2200      	movs	r2, #0
 800b658:	4606      	mov	r6, r0
 800b65a:	460f      	mov	r7, r1
 800b65c:	4620      	mov	r0, r4
 800b65e:	4629      	mov	r1, r5
 800b660:	4b41      	ldr	r3, [pc, #260]	@ (800b768 <atan+0x310>)
 800b662:	f7f4 ff39 	bl	80004d8 <__aeabi_dmul>
 800b666:	2200      	movs	r2, #0
 800b668:	4b3c      	ldr	r3, [pc, #240]	@ (800b75c <atan+0x304>)
 800b66a:	f7f4 fd7f 	bl	800016c <__adddf3>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4630      	mov	r0, r6
 800b674:	4639      	mov	r1, r7
 800b676:	f7f5 f859 	bl	800072c <__aeabi_ddiv>
 800b67a:	f04f 0a02 	mov.w	sl, #2
 800b67e:	4604      	mov	r4, r0
 800b680:	460d      	mov	r5, r1
 800b682:	e749      	b.n	800b518 <atan+0xc0>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	2000      	movs	r0, #0
 800b68a:	4938      	ldr	r1, [pc, #224]	@ (800b76c <atan+0x314>)
 800b68c:	f7f5 f84e 	bl	800072c <__aeabi_ddiv>
 800b690:	f04f 0a03 	mov.w	sl, #3
 800b694:	4604      	mov	r4, r0
 800b696:	460d      	mov	r5, r1
 800b698:	e73e      	b.n	800b518 <atan+0xc0>
 800b69a:	4b35      	ldr	r3, [pc, #212]	@ (800b770 <atan+0x318>)
 800b69c:	4e35      	ldr	r6, [pc, #212]	@ (800b774 <atan+0x31c>)
 800b69e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f7f4 fd5f 	bl	8000168 <__aeabi_dsub>
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	462b      	mov	r3, r5
 800b6ae:	f7f4 fd5b 	bl	8000168 <__aeabi_dsub>
 800b6b2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b6be:	f7f4 fd53 	bl	8000168 <__aeabi_dsub>
 800b6c2:	f1bb 0f00 	cmp.w	fp, #0
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	460d      	mov	r5, r1
 800b6ca:	f6bf aee4 	bge.w	800b496 <atan+0x3e>
 800b6ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6d2:	461d      	mov	r5, r3
 800b6d4:	e6df      	b.n	800b496 <atan+0x3e>
 800b6d6:	a51c      	add	r5, pc, #112	@ (adr r5, 800b748 <atan+0x2f0>)
 800b6d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b6dc:	e6db      	b.n	800b496 <atan+0x3e>
 800b6de:	bf00      	nop
 800b6e0:	54442d18 	.word	0x54442d18
 800b6e4:	3ff921fb 	.word	0x3ff921fb
 800b6e8:	8800759c 	.word	0x8800759c
 800b6ec:	7e37e43c 	.word	0x7e37e43c
 800b6f0:	e322da11 	.word	0xe322da11
 800b6f4:	3f90ad3a 	.word	0x3f90ad3a
 800b6f8:	24760deb 	.word	0x24760deb
 800b6fc:	3fa97b4b 	.word	0x3fa97b4b
 800b700:	a0d03d51 	.word	0xa0d03d51
 800b704:	3fb10d66 	.word	0x3fb10d66
 800b708:	c54c206e 	.word	0xc54c206e
 800b70c:	3fb745cd 	.word	0x3fb745cd
 800b710:	920083ff 	.word	0x920083ff
 800b714:	3fc24924 	.word	0x3fc24924
 800b718:	5555550d 	.word	0x5555550d
 800b71c:	3fd55555 	.word	0x3fd55555
 800b720:	2c6a6c2f 	.word	0x2c6a6c2f
 800b724:	bfa2b444 	.word	0xbfa2b444
 800b728:	52defd9a 	.word	0x52defd9a
 800b72c:	3fadde2d 	.word	0x3fadde2d
 800b730:	af749a6d 	.word	0xaf749a6d
 800b734:	3fb3b0f2 	.word	0x3fb3b0f2
 800b738:	fe231671 	.word	0xfe231671
 800b73c:	3fbc71c6 	.word	0x3fbc71c6
 800b740:	9998ebc4 	.word	0x9998ebc4
 800b744:	3fc99999 	.word	0x3fc99999
 800b748:	54442d18 	.word	0x54442d18
 800b74c:	bff921fb 	.word	0xbff921fb
 800b750:	440fffff 	.word	0x440fffff
 800b754:	7ff00000 	.word	0x7ff00000
 800b758:	3fdbffff 	.word	0x3fdbffff
 800b75c:	3ff00000 	.word	0x3ff00000
 800b760:	3ff2ffff 	.word	0x3ff2ffff
 800b764:	40038000 	.word	0x40038000
 800b768:	3ff80000 	.word	0x3ff80000
 800b76c:	bff00000 	.word	0xbff00000
 800b770:	0800c300 	.word	0x0800c300
 800b774:	0800c320 	.word	0x0800c320

0800b778 <fabs>:
 800b778:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b77c:	4619      	mov	r1, r3
 800b77e:	4770      	bx	lr

0800b780 <_init>:
 800b780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b782:	bf00      	nop
 800b784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b786:	bc08      	pop	{r3}
 800b788:	469e      	mov	lr, r3
 800b78a:	4770      	bx	lr

0800b78c <_fini>:
 800b78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78e:	bf00      	nop
 800b790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b792:	bc08      	pop	{r3}
 800b794:	469e      	mov	lr, r3
 800b796:	4770      	bx	lr
